{"componentChunkName":"component---src-templates-blog-post-js","path":"/domain-specific-languages-using-python-part-1/","result":{"data":{"site":{"siteMetadata":{"title":"Tejas Jadhav"}},"mdx":{"id":"c863fde3-8402-5c70-b444-059e21d223a9","excerpt":"Introduction If you don't know about DSLs  (Domain Specific Languages) , they are intermediate languages used purely for convenience and focus more on theâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Domain Specific Languages using Python\",\n  \"slug\": \"/domain-specific-languages-using-python-part-1\",\n  \"date\": \"2016-06-05T13:19:00.000Z\",\n  \"featured\": false,\n  \"draft\": false,\n  \"tags\": [\"python\", \"dsl\", \"programming\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"p\", null, \"If you don\\u2019t know about DSLs \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"(Domain Specific Languages)\"), \", they are intermediate languages used purely for convenience and focus more on the actual business requirements than code. They give a beautiful makeup to their underlying ugly implementation code. They often provide higher level abstractions to frequently performed tasks. DSLs are mostly intended for people who don\\u2019t write code but, actually, decide the logic and business flow or those who do data analysis.\"), mdx(\"p\", null, \"For example, suppose a business is specifically targeting adults in its next campaign. Here, we would want to fetch all users having age greater than or equal to 18 years. An SQL query for this would look like,\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"sql\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-sql\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"SELECT\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"*\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"FROM\"), \" users \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"WHERE\"), \" age \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"18\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\")))), mdx(\"p\", null, \"In the above code, how much percentage of code actually conveys the business logic? I think except for \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"users\"), \" and \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"age >= 18\"), \", rest everything is just boilerplate code that has nothing to do with the user or his/her age. Now, how about this,\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"User.age >= 18\"))), mdx(\"p\", null, \"Short and simple, isn\\u2019t it? But, then my fellow programmer friends would say,\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"\\u201CThat looks incomplete!\\u201D\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"\\u201CWhere\\u2019s the object definition?\\u201D\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"\\u201CWhere\\u2019s the output handler?\\u201D\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"\\u201CYou didn\\u2019t even mention the database connection part. How is it supposed to know where to fetch from?\\u201D\"))), mdx(\"p\", null, \"Exactly! Why should a non-programmer bother about these trivial things if all the above code accurately conveys the business requirement in minimum corpus? Just a text box where they can put their minimal code, hit the execute button and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"lo\"), \", you got your list of users. No need to carry around your programmer guy for each of your business meetings. All the boilerplate code (object definitions, variable initializtion, etc.), backend complexities, error handling is what programmers have to deal with, not the business team. From their perspective, this is more of a boon (although, a UI solution would be a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dream-come-true\"), \" for them). The best part is, DSLs isolate your code and logic which, I feel, is just way too awesome! Welcome to the world of DSLs!\"), mdx(\"h1\", null, \"Language features\"), mdx(\"p\", null, \"Let\\u2019s decide what our language can do.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Assigning variables.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Perform basic arithmetic between constants and variables.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Perform basic IO like printing output and reading input from keyboard.\")), mdx(\"p\", null, \"That\\u2019s it for the first version. We will build a purely mathematical language and eventually add more complex features like strings, conditions, loops and functions.\"), mdx(\"h1\", null, \"Syntax\"), mdx(\"p\", null, \"The essence of DSLs is simple and readable syntax. We will try to make the syntax as minimal as possible but without affecting the readability.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber 0\"\n    },\n    \"className\": \"language-text line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"define pi 3.14159\\ninput radius\\n\\ndefine circumference 2 * pi * radius\\noutput circumference\\noutput pi * r * r\"), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"Our simple language can take input from the user, print the output and can do some basic arithmetic with variables. I\\u2019ve written a very basic implementation for the above syntax. Check the code below. I\\u2019ve added comments everywhere so that the code becomes pretty easy to understand.\"), mdx(Gist, {\n    id: \"b79980055bb7a9e56e9476e9a19a5ead\",\n    mdxType: \"Gist\"\n  }), mdx(\"h1\", null, \"Execution\"), mdx(\"p\", null, \"To see it in action, download the above files \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"main.py\"), \" and \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"utils.py\"), \" in a folder. Make sure you have Python 3 installed. Run the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"main.py\"), \" file and enter our DSL code line by line.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"command-line-prompt\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"data-user\": \"tejas\",\n    \"data-host\": \"localhost\"\n  })), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })), \"python3 main.py\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" define pi \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"3.14159\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" input radius\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"5\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" define circumference \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"2\"), \" * pi * radius\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" output circumference\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"31.4159\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" output pi * radius * radius\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"78.53975\")))), mdx(\"p\", null, \"Exit the console with \", mdx(\"kbd\", null, \"CTRL\"), \"+\", mdx(\"kbd\", null, \"C\"), \".\"), mdx(\"h1\", null, \"Conclusion\"), mdx(\"p\", null, \"This is just the beginning. We can add so much more in the above example like adding loops, conditions, functions, etc. But that remains out of this demonstration. This was just to show you can making your own language is not hard at all. All it needs is a really well thought syntax keeping the stakeholders\\u2019 convenience in mind. After all, that\\u2019s what DSLs are for.\"), mdx(\"p\", null, \"On a side note,\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Python has always amazed me. Not for the fact that it is beginner friendly and, at the same time, quite powerful to be used in complex mathematical and scientific calculations. But, it is one such language which gives you quite a lot of surprises every time. The moment you feel that you got a grip of the language and its standard libraries, something pops up that you never expected could be done by it.\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Domain Specific Languages using Python","date":"June 05, 2016"}}},"pageContext":{"slug":"/domain-specific-languages-using-python-part-1/","previous":{"fields":{"slug":"/two-sides-of-a-coin-biased-opinions/"},"frontmatter":{"title":"Two sides of a coin: Biased opinions"}},"next":{"fields":{"slug":"/similarities-between-one-piece-alabasta-arc-and-the-dark-knight-rises/"},"frontmatter":{"title":"Similarities between One Piece (Alabasta Arc) and The Dark Knight Rises"}}}}}