{"componentChunkName":"component---src-templates-blog-post-js","path":"/the-actor/","result":{"data":{"site":{"siteMetadata":{"title":"Tejas Jadhav"}},"mdx":{"id":"e7add685-4ce6-534a-85b9-5e4314f99122","excerpt":"The Model Have you heard of the  Actor model  in context of software architecture before? If you have, then continue reading for a quick revision; else, beâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"The Actor model\",\n  \"slug\": \"/the-actor\",\n  \"date\": \"2016-04-22T18:56:51.000Z\",\n  \"featured\": false,\n  \"draft\": false,\n  \"tags\": [\"actor model\", \"architecture\", \"model\", \"concept\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"The Model\"), mdx(\"p\", null, \"Have you heard of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Actor model\"), \" in context of software architecture before? If you have, then continue reading for a quick revision; else, be prepared to understand one of the most amazing software architectures ever thought of. The Actor model somewhat works like this:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There\\u2019s a guy called as the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Actor\"), \" who is extremely good at doing one specific thing. He also has some good letter writing skills.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Imaging this guy is kept alone in a closed room without windows and doors, but just a small letter slot.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All this guy has to do is, whenever he gets a letter from the letter slot, he reads it, writes his reply in a new letter and sends the new letter out from the same letter slot.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The guy doesn\\u2019t know from whom he received the letter and doesn\\u2019t even know who will read his letter. All he has to do is respond to the incoming letters. If the content of the letter is intended for him, he can reply. Else, he may just ignore.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The guy who is sending him the letter can be another \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Actor\"), \" sitting in some other closed room like him or any third party agent.\")), mdx(\"p\", null, \"This is it. This is called the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Actor model\"), \". This model is pretty close to pure functional programming if you relate \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Actors\"), \" to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"functions\"), \". In fact, one of the high functional programming language, Erlang, is completely based out of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Actor model\"), \".\"), mdx(\"h2\", null, \"What\\u2019s so great about this model\"), mdx(\"p\", null, \"Imagine, individual entities doing their own job without having a dependency on any other entity and exchanging data through strict message passing. Doesn\\u2019t that sound great? Since \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Actors\"), \" are restricted from communicating directly with each other, we can ensure that communication between them is transparent. Another interesting thing is, it\\u2019s more of a Publisher-Subscriber (PubSub) architecture where the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Actors\"), \" send the message out in the wild. Other \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Actors\"), \" can read this message and if they find something in that message that is related to their job, they can reply back with another message and it all across.\"), mdx(\"p\", null, \"As \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Actors\"), \" perform like individual entities, they can be put anywhere as long as the messaging channel is available to them. Think of this in context with servers distributed across a huge network. Each server is an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Actor\"), \" and the network is the messaging channel.\"), mdx(\"p\", null, \"I mentioned earlier that \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Actor model\"), \" strongly resembles functional programming. Here\\u2019s a small piece of code to demonstrate that,\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"python\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"style\": {\n      \"counterReset\": \"linenumber 0\"\n    },\n    \"className\": \"language-python line-numbers\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"def\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"apple_actor\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"message\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"if\"), \" message\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \".\"), \"contains\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'apple'\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'An Apple a day, keeps the doctor away.'\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"def\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"length_actor\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"message\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"if\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token builtin\"\n  }), \"len\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"(\"), \"message\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \")\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \">\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"10\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \":\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), \"'That was some really some long message.'\")), mdx(\"span\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"className\": \"line-numbers-rows\",\n    \"style\": {\n      \"whiteSpace\": \"normal\",\n      \"width\": \"auto\",\n      \"left\": \"0\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))), mdx(\"p\", null, \"The \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"apple_actor\"), \" is concerned with only those messages which have the word \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"apple\"), \" in them. Similarly, \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"length_actor\"), \" is concerned with only those messages which are more than \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"10\"), \" characters. So, despite the fact that they may receive all the messages, they will respond to only those with whom they are related to. In return, they will respond with another message which will be broadcast everywhere.\"), mdx(\"p\", null, \"For instance, \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"length_actor\"), \" can respond to the response of \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"apple_actor\"), \" since it exceeds the 10 character count. This is how \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Actors\"), \" actually communicate without knowing the source or destination.\"), mdx(\"p\", null, \"Since these entities \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"act\"), \" to certain messages, they are called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Actors\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"The Actor model","date":"April 22, 2016"}}},"pageContext":{"slug":"/the-actor/","previous":null,"next":{"fields":{"slug":"/heliocentrism-vs-geocentrism/"},"frontmatter":{"title":"Heliocentrism vs. Geocentrism"}}}}}