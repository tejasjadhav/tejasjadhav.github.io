{"db":[{"meta":{"exported_on":1587404015234,"version":"2.27.0"},"data":{"migrations_lock":[{"lock_key":"km01","locked":0,"acquired_at":"2019-08-11 14:23:39","released_at":"2019-08-11 14:23:39"}],"migrations":[{"id":1,"name":"1-create-tables.js","version":"init","currentVersion":"2.7"},{"id":2,"name":"2-create-fixtures.js","version":"init","currentVersion":"2.7"},{"id":3,"name":"1-post-excerpt.js","version":"1.3","currentVersion":"2.7"},{"id":4,"name":"1-codeinjection-post.js","version":"1.4","currentVersion":"2.7"},{"id":5,"name":"1-og-twitter-post.js","version":"1.5","currentVersion":"2.7"},{"id":6,"name":"1-add-backup-client.js","version":"1.7","currentVersion":"2.7"},{"id":7,"name":"1-add-permissions-redirect.js","version":"1.9","currentVersion":"2.7"},{"id":8,"name":"1-custom-template-post.js","version":"1.13","currentVersion":"2.7"},{"id":9,"name":"2-theme-permissions.js","version":"1.13","currentVersion":"2.7"},{"id":10,"name":"1-add-webhooks-table.js","version":"1.18","currentVersion":"2.7"},{"id":11,"name":"1-webhook-permissions.js","version":"1.19","currentVersion":"2.7"},{"id":12,"name":"1-remove-settings-keys.js","version":"1.20","currentVersion":"2.7"},{"id":13,"name":"1-add-contributor-role.js","version":"1.21","currentVersion":"2.7"},{"id":14,"name":"1-multiple-authors-DDL.js","version":"1.22","currentVersion":"2.7"},{"id":15,"name":"1-multiple-authors-DML.js","version":"1.22","currentVersion":"2.7"},{"id":16,"name":"1-update-koenig-beta-html.js","version":"1.25","currentVersion":"2.7"},{"id":17,"name":"2-demo-post.js","version":"1.25","currentVersion":"2.7"},{"id":18,"name":"1-rename-amp-column.js","version":"2.0","currentVersion":"2.7"},{"id":19,"name":"2-update-posts.js","version":"2.0","currentVersion":"2.7"},{"id":20,"name":"3-remove-koenig-labs.js","version":"2.0","currentVersion":"2.7"},{"id":21,"name":"4-permalink-setting.js","version":"2.0","currentVersion":"2.7"},{"id":22,"name":"5-remove-demo-post.js","version":"2.0","currentVersion":"2.7"},{"id":23,"name":"6-replace-fixture-posts.js","version":"2.0","currentVersion":"2.7"},{"id":24,"name":"1-add-sessions-table.js","version":"2.2","currentVersion":"2.7"},{"id":25,"name":"2-add-integrations-and-api-key-tables.js","version":"2.2","currentVersion":"2.7"},{"id":26,"name":"3-insert-admin-integration-role.js","version":"2.2","currentVersion":"2.7"},{"id":27,"name":"4-insert-integration-and-api-key-permissions.js","version":"2.2","currentVersion":"2.7"},{"id":28,"name":"5-add-mobiledoc-revisions-table.js","version":"2.2","currentVersion":"2.7"},{"id":29,"name":"1-add-webhook-columns.js","version":"2.3","currentVersion":"2.7"},{"id":30,"name":"2-add-webhook-edit-permission.js","version":"2.3","currentVersion":"2.7"},{"id":31,"name":"1-add-webhook-permission-roles.js","version":"2.6","currentVersion":"2.7"},{"id":32,"name":"1-add-members-table.js","version":"2.8","currentVersion":"2.9"},{"id":33,"name":"1-remove-empty-strings.js","version":"2.13","currentVersion":"2.21"},{"id":34,"name":"1-add-actions-table.js","version":"2.14","currentVersion":"2.21"},{"id":35,"name":"2-add-actions-permissions.js","version":"2.14","currentVersion":"2.21"},{"id":36,"name":"1-add-type-column-to-integrations.js","version":"2.15","currentVersion":"2.21"},{"id":37,"name":"2-insert-zapier-integration.js","version":"2.15","currentVersion":"2.21"},{"id":38,"name":"1-add-members-perrmissions.js","version":"2.16","currentVersion":"2.21"},{"id":39,"name":"1-normalize-settings.js","version":"2.17","currentVersion":"2.21"},{"id":40,"name":"2-posts-add-canonical-url.js","version":"2.17","currentVersion":"2.21"},{"id":41,"name":"1-restore-settings-from-backup.js","version":"2.18","currentVersion":"2.21"},{"id":42,"name":"1-update-editor-permissions.js","version":"2.21","currentVersion":"2.21"},{"id":43,"name":"1-add-member-permissions-to-roles.js","version":"2.22","currentVersion":"2.23"},{"id":44,"name":"1-insert-ghost-db-backup-role.js","version":"2.27","currentVersion":"2.27"},{"id":45,"name":"2-insert-db-backup-integration.js","version":"2.27","currentVersion":"2.27"},{"id":46,"name":"3-add-subdirectory-to-relative-canonical-urls.js","version":"2.27","currentVersion":"2.27"}],"posts":[{"id":"5c0c1e7aabc169173fada4c3","uuid":"fa2508a8-57d3-4804-a305-797fbed93271","title":"The Actor model","slug":"the-actor","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"# The Model\\n\\nHave you heard of the _Actor model_ in context of software architecture before? If you have, then continue reading for a quick revision; else, be prepared to understand one of the most amazing software architectures ever thought of. The Actor model somewhat works like this:\\n\\n* There's a guy called as the _Actor_ who is extremely good at doing one specific thing. He also has some good letter writing skills.\\n* Imaging this guy is kept alone in a closed room without windows and doors, but just a small letter slot.\\n* All this guy has to do is, whenever he gets a letter from the letter slot, he reads it, writes his reply in a new letter and sends the new letter out from the same letter slot.\\n* The guy doesn't know from whom he received the letter and doesn't even know who will read his letter. All he has to do is respond to the incoming letters. If the content of the letter is intended for him, he can reply. Else, he may just ignore.\\n* The guy who is sending him the letter can be another _Actor_ sitting in some other closed room like him or any third party agent.\\n\\nThis is it. This is called the _Actor model_. This model is pretty close to pure functional programming if you relate _Actors_ to _functions_. In fact, one of the high functional programming language, Erlang, is completely based out of the _Actor model_.\\n\\n## What's so great about this model\\n\\nImagine, individual entities doing their own job without having a dependency on any other entity and exchanging data through strict message passing. Doesn't that sound great? Since _Actors_ are restricted from communicating directly with each other, we can ensure that communication between them is transparent. Another interesting thing is, it's more of a Publisher-Subscriber (PubSub) architecture where the _Actors_ send the message out in the wild. Other _Actors_ can read this message and if they find something in that message that is related to their job, they can reply back with another message and it all across.\\n\\nAs _Actors_ perform like individual entities, they can be put anywhere as long as the messaging channel is available to them. Think of this in context with servers distributed across a huge network. Each server is an _Actor_ and the network is the messaging channel.\\n\\nI mentioned earlier that _Actor model_ strongly resembles functional programming. Here's a small piece of code to demonstrate that,\\n\\n```python\\ndef apple_actor(message):\\n    if message.contains('apple'):\\n        return 'An Apple a day, keeps the doctor away.'\\n\\ndef length_actor(message):\\n    if len(message) > 10:\\n        return 'That was some really some long message.'\\n```\\n\\nThe `apple_actor` is concerned with only those messages which have the word `apple` in them. Similarly, `length_actor` is concerned with only those messages which are more than `10` characters. So, despite the fact that they may receive all the messages, they will respond to only those with whom they are related to. In return, they will respond with another message which will be broadcast everywhere.\\n\\nFor instance, `length_actor` can respond to the response of `apple_actor` since it exceeds the 10 character count. This is how _Actors_ actually communicate without knowing the source or destination.\\n\\nSince these entities _act_ to certain messages, they are called _Actors_.\"}]],\"sections\":[[10,0]]}","html":"<h1 id=\"themodel\">The Model</h1>\n<p>Have you heard of the <em>Actor model</em> in context of software architecture before? If you have, then continue reading for a quick revision; else, be prepared to understand one of the most amazing software architectures ever thought of. The Actor model somewhat works like this:</p>\n<ul>\n<li>There's a guy called as the <em>Actor</em> who is extremely good at doing one specific thing. He also has some good letter writing skills.</li>\n<li>Imaging this guy is kept alone in a closed room without windows and doors, but just a small letter slot.</li>\n<li>All this guy has to do is, whenever he gets a letter from the letter slot, he reads it, writes his reply in a new letter and sends the new letter out from the same letter slot.</li>\n<li>The guy doesn't know from whom he received the letter and doesn't even know who will read his letter. All he has to do is respond to the incoming letters. If the content of the letter is intended for him, he can reply. Else, he may just ignore.</li>\n<li>The guy who is sending him the letter can be another <em>Actor</em> sitting in some other closed room like him or any third party agent.</li>\n</ul>\n<p>This is it. This is called the <em>Actor model</em>. This model is pretty close to pure functional programming if you relate <em>Actors</em> to <em>functions</em>. In fact, one of the high functional programming language, Erlang, is completely based out of the <em>Actor model</em>.</p>\n<h2 id=\"whatssogreataboutthismodel\">What's so great about this model</h2>\n<p>Imagine, individual entities doing their own job without having a dependency on any other entity and exchanging data through strict message passing. Doesn't that sound great? Since <em>Actors</em> are restricted from communicating directly with each other, we can ensure that communication between them is transparent. Another interesting thing is, it's more of a Publisher-Subscriber (PubSub) architecture where the <em>Actors</em> send the message out in the wild. Other <em>Actors</em> can read this message and if they find something in that message that is related to their job, they can reply back with another message and it all across.</p>\n<p>As <em>Actors</em> perform like individual entities, they can be put anywhere as long as the messaging channel is available to them. Think of this in context with servers distributed across a huge network. Each server is an <em>Actor</em> and the network is the messaging channel.</p>\n<p>I mentioned earlier that <em>Actor model</em> strongly resembles functional programming. Here's a small piece of code to demonstrate that,</p>\n<pre><code class=\"language-python\">def apple_actor(message):\n    if message.contains('apple'):\n        return 'An Apple a day, keeps the doctor away.'\n\ndef length_actor(message):\n    if len(message) &gt; 10:\n        return 'That was some really some long message.'\n</code></pre>\n<p>The <code>apple_actor</code> is concerned with only those messages which have the word <code>apple</code> in them. Similarly, <code>length_actor</code> is concerned with only those messages which are more than <code>10</code> characters. So, despite the fact that they may receive all the messages, they will respond to only those with whom they are related to. In return, they will respond with another message which will be broadcast everywhere.</p>\n<p>For instance, <code>length_actor</code> can respond to the response of <code>apple_actor</code> since it exceeds the 10 character count. This is how <em>Actors</em> actually communicate without knowing the source or destination.</p>\n<p>Since these entities <em>act</em> to certain messages, they are called <em>Actors</em>.</p>\n","comment_id":"2","plaintext":"The Model\nHave you heard of the Actor model  in context of software architecture before?\nIf you have, then continue reading for a quick revision; else, be prepared to\nunderstand one of the most amazing software architectures ever thought of. The\nActor model somewhat works like this:\n\n * There's a guy called as the Actor  who is extremely good at doing one\n   specific thing. He also has some good letter writing skills.\n * Imaging this guy is kept alone in a closed room without windows and doors,\n   but just a small letter slot.\n * All this guy has to do is, whenever he gets a letter from the letter slot, he\n   reads it, writes his reply in a new letter and sends the new letter out from\n   the same letter slot.\n * The guy doesn't know from whom he received the letter and doesn't even know\n   who will read his letter. All he has to do is respond to the incoming\n   letters. If the content of the letter is intended for him, he can reply.\n   Else, he may just ignore.\n * The guy who is sending him the letter can be another Actor  sitting in some\n   other closed room like him or any third party agent.\n\nThis is it. This is called the Actor model. This model is pretty close to pure\nfunctional programming if you relate Actors  to functions. In fact, one of the\nhigh functional programming language, Erlang, is completely based out of the \nActor model.\n\nWhat's so great about this model\nImagine, individual entities doing their own job without having a dependency on\nany other entity and exchanging data through strict message passing. Doesn't\nthat sound great? Since Actors  are restricted from communicating directly with\neach other, we can ensure that communication between them is transparent.\nAnother interesting thing is, it's more of a Publisher-Subscriber (PubSub)\narchitecture where the Actors  send the message out in the wild. Other Actors \ncan read this message and if they find something in that message that is related\nto their job, they can reply back with another message and it all across.\n\nAs Actors  perform like individual entities, they can be put anywhere as long as\nthe messaging channel is available to them. Think of this in context with\nservers distributed across a huge network. Each server is an Actor  and the\nnetwork is the messaging channel.\n\nI mentioned earlier that Actor model  strongly resembles functional programming.\nHere's a small piece of code to demonstrate that,\n\ndef apple_actor(message):\n    if message.contains('apple'):\n        return 'An Apple a day, keeps the doctor away.'\n\ndef length_actor(message):\n    if len(message) > 10:\n        return 'That was some really some long message.'\n\n\nThe apple_actor  is concerned with only those messages which have the word apple \n in them. Similarly, length_actor  is concerned with only those messages which\nare more than 10  characters. So, despite the fact that they may receive all the\nmessages, they will respond to only those with whom they are related to. In\nreturn, they will respond with another message which will be broadcast\neverywhere.\n\nFor instance, length_actor  can respond to the response of apple_actor  since it\nexceeds the 10 character count. This is how Actors  actually communicate without\nknowing the source or destination.\n\nSince these entities act  to certain messages, they are called Actors.","feature_image":"/content/images/2018/12/dayne-topkin-78982-unsplash.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-04-22 23:22:03","updated_at":"2018-12-08 19:57:08","published_at":"2016-04-23 00:26:51","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5c0c1e7aabc169173fada4c4","uuid":"c1ee38e1-bbed-4aef-854f-fb3a1c633b48","title":"Domain Specific Languages using Python","slug":"domain-specific-languages-using-python-part-1","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"# Introduction\\n\\nIf you don't know about DSLs _(Domain Specific Languages)_, they are intermediate languages used purely for convenience and focus more on the actual business requirements than code. They give a beautiful makeup to their underlying ugly implementation code. They often provide higher level abstractions to frequently performed tasks. DSLs are mostly intended for people who don't write code but, actually, decide the logic and business flow or those who do data analysis.\\n\\nFor example, suppose a business is specifically targeting adults in its next campaign. Here, we would want to fetch all users having age greater than or equal to 18 years. An SQL query for this would look like,\\n```sql\\nSELECT * FROM users WHERE age >= 18;\\n```\\nIn the above code, how much percentage of code actually conveys the business logic? I think except for `users` and `age >= 18`, rest everything is just boilerplate code that has nothing to do with the user or his/her age. Now, how about this,\\n```\\nUser.age >= 18\\n```\\nShort and simple, isn't it? But, then my fellow programmer friends would say,\\n\\n* _\\\"That looks incomplete!\\\"_\\n* _\\\"Where's the object definition?\\\"_\\n* _\\\"Where's the output handler?\\\"_\\n* _\\\"You didn't even mention the database connection part. How is it supposed to know where to fetch from?\\\"_ \\n\\nExactly! Why should a non-programmer bother about these trivial things if all the above code accurately conveys the business requirement in minimum corpus? Just a text box where they can put their minimal code, hit the execute button and _lo_, you got your list of users. No need to carry around your programmer guy for each of your business meetings. All the boilerplate code (object definitions, variable initializtion, etc.), backend complexities, error handling is what programmers have to deal with, not the business team. From their perspective, this is more of a boon (although, a UI solution would be a _dream-come-true_ for them). The best part is, DSLs isolate your code and logic which, I feel, is just way too awesome! Welcome to the world of DSLs!\\n\\n# Language features\\n\\nLet's decide what our language can do.\\n\\n1. Assigning variables.\\n2. Perform basic arithmetic between constants and variables.\\n3. Perform basic IO like printing output and reading input from keyboard.\\n\\nThat's it for the first version. We will build a purely mathematical language and eventually add more complex features like strings, conditions, loops and functions.\\n\\n# Syntax\\n\\nThe essence of DSLs is simple and readable syntax. We will try to make the syntax as minimal as possible but without affecting the readability.\\n\\n```\\ndefine pi 3.14159\\ninput radius\\n\\ndefine circumference 2 * pi * radius\\noutput circumference\\noutput pi * r * r\\n```\\n\\nOur simple language can take input from the user, print the output and can do some basic arithmetic with variables. I've written a very basic implementation for the above syntax. Check the code below. I've added comments everywhere so that the code becomes pretty easy to understand.\\n\\n<script type=\\\"text/javascript\\\" src=\\\"https://gist.github.com/tejasjadhav/b79980055bb7a9e56e9476e9a19a5ead.js\\\"></script>\\n\\n# Execution\\n\\nTo see it in action, download the above files `main.py` and `utils.py` in a folder. Make sure you have Python 3 installed. Run the `main.py` file and enter our DSL code line by line.\\n```bash\\npython3 main.py\\n> define pi 3.14159\\n> input radius\\n5\\n> define circumference 2 * pi * radius\\n> output circumference\\n31.4159\\n> output pi * radius * radius\\n78.53975\\n```\\nExit the console with <kbd>CTRL</kbd>+<kbd>C</kbd>.\\n\\n# Conclusion\\nThis is just the beginning. We can add so much more in the above example like adding loops, conditions, functions, etc. But that remains out of this demonstration. This was just to show you can making your own language is not hard at all. All it needs is a really well thought syntax keeping the stakeholders' convenience in mind. After all, that's what DSLs are for.\\n\\nOn a side note,\\n> Python has always amazed me. Not for the fact that it is beginner friendly and, at the same time, quite powerful to be used in complex mathematical and scientific calculations. But, it is one such language which gives you quite a lot of surprises every time. The moment you feel that you got a grip of the language and its standard libraries, something pops up that you never expected could be done by it. \\n\"}]],\"sections\":[[10,0]]}","html":"<h1 id=\"introduction\">Introduction</h1>\n<p>If you don't know about DSLs <em>(Domain Specific Languages)</em>, they are intermediate languages used purely for convenience and focus more on the actual business requirements than code. They give a beautiful makeup to their underlying ugly implementation code. They often provide higher level abstractions to frequently performed tasks. DSLs are mostly intended for people who don't write code but, actually, decide the logic and business flow or those who do data analysis.</p>\n<p>For example, suppose a business is specifically targeting adults in its next campaign. Here, we would want to fetch all users having age greater than or equal to 18 years. An SQL query for this would look like,</p>\n<pre><code class=\"language-sql\">SELECT * FROM users WHERE age &gt;= 18;\n</code></pre>\n<p>In the above code, how much percentage of code actually conveys the business logic? I think except for <code>users</code> and <code>age &gt;= 18</code>, rest everything is just boilerplate code that has nothing to do with the user or his/her age. Now, how about this,</p>\n<pre><code>User.age &gt;= 18\n</code></pre>\n<p>Short and simple, isn't it? But, then my fellow programmer friends would say,</p>\n<ul>\n<li><em>&quot;That looks incomplete!&quot;</em></li>\n<li><em>&quot;Where's the object definition?&quot;</em></li>\n<li><em>&quot;Where's the output handler?&quot;</em></li>\n<li><em>&quot;You didn't even mention the database connection part. How is it supposed to know where to fetch from?&quot;</em></li>\n</ul>\n<p>Exactly! Why should a non-programmer bother about these trivial things if all the above code accurately conveys the business requirement in minimum corpus? Just a text box where they can put their minimal code, hit the execute button and <em>lo</em>, you got your list of users. No need to carry around your programmer guy for each of your business meetings. All the boilerplate code (object definitions, variable initializtion, etc.), backend complexities, error handling is what programmers have to deal with, not the business team. From their perspective, this is more of a boon (although, a UI solution would be a <em>dream-come-true</em> for them). The best part is, DSLs isolate your code and logic which, I feel, is just way too awesome! Welcome to the world of DSLs!</p>\n<h1 id=\"languagefeatures\">Language features</h1>\n<p>Let's decide what our language can do.</p>\n<ol>\n<li>Assigning variables.</li>\n<li>Perform basic arithmetic between constants and variables.</li>\n<li>Perform basic IO like printing output and reading input from keyboard.</li>\n</ol>\n<p>That's it for the first version. We will build a purely mathematical language and eventually add more complex features like strings, conditions, loops and functions.</p>\n<h1 id=\"syntax\">Syntax</h1>\n<p>The essence of DSLs is simple and readable syntax. We will try to make the syntax as minimal as possible but without affecting the readability.</p>\n<pre><code>define pi 3.14159\ninput radius\n\ndefine circumference 2 * pi * radius\noutput circumference\noutput pi * r * r\n</code></pre>\n<p>Our simple language can take input from the user, print the output and can do some basic arithmetic with variables. I've written a very basic implementation for the above syntax. Check the code below. I've added comments everywhere so that the code becomes pretty easy to understand.</p>\n<script type=\"text/javascript\" src=\"https://gist.github.com/tejasjadhav/b79980055bb7a9e56e9476e9a19a5ead.js\"></script>\n<h1 id=\"execution\">Execution</h1>\n<p>To see it in action, download the above files <code>main.py</code> and <code>utils.py</code> in a folder. Make sure you have Python 3 installed. Run the <code>main.py</code> file and enter our DSL code line by line.</p>\n<pre><code class=\"language-bash\">python3 main.py\n&gt; define pi 3.14159\n&gt; input radius\n5\n&gt; define circumference 2 * pi * radius\n&gt; output circumference\n31.4159\n&gt; output pi * radius * radius\n78.53975\n</code></pre>\n<p>Exit the console with <kbd>CTRL</kbd>+<kbd>C</kbd>.</p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>This is just the beginning. We can add so much more in the above example like adding loops, conditions, functions, etc. But that remains out of this demonstration. This was just to show you can making your own language is not hard at all. All it needs is a really well thought syntax keeping the stakeholders' convenience in mind. After all, that's what DSLs are for.</p>\n<p>On a side note,</p>\n<blockquote>\n<p>Python has always amazed me. Not for the fact that it is beginner friendly and, at the same time, quite powerful to be used in complex mathematical and scientific calculations. But, it is one such language which gives you quite a lot of surprises every time. The moment you feel that you got a grip of the language and its standard libraries, something pops up that you never expected could be done by it.</p>\n</blockquote>\n","comment_id":"5","plaintext":"Introduction\nIf you don't know about DSLs (Domain Specific Languages), they are intermediate\nlanguages used purely for convenience and focus more on the actual business\nrequirements than code. They give a beautiful makeup to their underlying ugly\nimplementation code. They often provide higher level abstractions to frequently\nperformed tasks. DSLs are mostly intended for people who don't write code but,\nactually, decide the logic and business flow or those who do data analysis.\n\nFor example, suppose a business is specifically targeting adults in its next\ncampaign. Here, we would want to fetch all users having age greater than or\nequal to 18 years. An SQL query for this would look like,\n\nSELECT * FROM users WHERE age >= 18;\n\n\nIn the above code, how much percentage of code actually conveys the business\nlogic? I think except for users  and age >= 18, rest everything is just\nboilerplate code that has nothing to do with the user or his/her age. Now, how\nabout this,\n\nUser.age >= 18\n\n\nShort and simple, isn't it? But, then my fellow programmer friends would say,\n\n * \"That looks incomplete!\"\n * \"Where's the object definition?\"\n * \"Where's the output handler?\"\n * \"You didn't even mention the database connection part. How is it supposed to\n   know where to fetch from?\"\n\nExactly! Why should a non-programmer bother about these trivial things if all\nthe above code accurately conveys the business requirement in minimum corpus?\nJust a text box where they can put their minimal code, hit the execute button\nand lo, you got your list of users. No need to carry around your programmer guy\nfor each of your business meetings. All the boilerplate code (object\ndefinitions, variable initializtion, etc.), backend complexities, error handling\nis what programmers have to deal with, not the business team. From their\nperspective, this is more of a boon (although, a UI solution would be a \ndream-come-true  for them). The best part is, DSLs isolate your code and logic\nwhich, I feel, is just way too awesome! Welcome to the world of DSLs!\n\nLanguage features\nLet's decide what our language can do.\n\n 1. Assigning variables.\n 2. Perform basic arithmetic between constants and variables.\n 3. Perform basic IO like printing output and reading input from keyboard.\n\nThat's it for the first version. We will build a purely mathematical language\nand eventually add more complex features like strings, conditions, loops and\nfunctions.\n\nSyntax\nThe essence of DSLs is simple and readable syntax. We will try to make the\nsyntax as minimal as possible but without affecting the readability.\n\ndefine pi 3.14159\ninput radius\n\ndefine circumference 2 * pi * radius\noutput circumference\noutput pi * r * r\n\n\nOur simple language can take input from the user, print the output and can do\nsome basic arithmetic with variables. I've written a very basic implementation\nfor the above syntax. Check the code below. I've added comments everywhere so\nthat the code becomes pretty easy to understand.\n\nExecution\nTo see it in action, download the above files main.py  and utils.py  in a\nfolder. Make sure you have Python 3 installed. Run the main.py  file and enter\nour DSL code line by line.\n\npython3 main.py\n> define pi 3.14159\n> input radius\n5\n> define circumference 2 * pi * radius\n> output circumference\n31.4159\n> output pi * radius * radius\n78.53975\n\n\nExit the console with CTRL+C.\n\nConclusion\nThis is just the beginning. We can add so much more in the above example like\nadding loops, conditions, functions, etc. But that remains out of this\ndemonstration. This was just to show you can making your own language is not\nhard at all. All it needs is a really well thought syntax keeping the\nstakeholders' convenience in mind. After all, that's what DSLs are for.\n\nOn a side note,\n\nPython has always amazed me. Not for the fact that it is beginner friendly and,\nat the same time, quite powerful to be used in complex mathematical and\nscientific calculations. But, it is one such language which gives you quite a\nlot of surprises every time. The moment you feel that you got a grip of the\nlanguage and its standard libraries, something pops up that you never expected\ncould be done by it.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-06-05 18:06:51","updated_at":"2017-08-31 20:41:57","published_at":"2016-06-05 18:49:00","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5c0c1e7aabc169173fada4c5","uuid":"d5bd45ca-7f54-497c-996d-0a8549439c0e","title":"Two sides of a coin: Biased opinions","slug":"two-sides-of-a-coin-biased-opinions","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Internet has become a crazy place. Information is available at our fingertips. We know the major events that happen across the globe which eventually become _viral_. Often, the initial impressions of about them are quite biased based on what we see. However, some opinions get a better bias when famous social entities place their vote. These can be a _Facebook page_, a _Twitter handle_, a _YouTube channel_, etc. or on a more personal level, this could be one of our _family member_, a _close friend_, a _professor_, a _higher up at our workplace_, etc.\\n\\nWhat goes wrong here is, these biased opinions ultimately become the verdict of the people. People share these opinions everywhere on the social media which spreads the reach even further. Those who were unaware of the event get an opinionated impression and even they follow the trait. This further goes down at the personal level and becomes a topic at coffee shop talks, meetings, institutions, workplaces and family discussions. It forms a positive feedback loop until a contradictory opinion surfaces and picks up steam.\\n\\n---\\n\\nFor example, let's take an imaginary event.\\n\\n> Government officer Mr. XYZ caught in $100 scam.\\n\\nSoon, posts circulate on social media about the incident and becomes viral. People write more posts, re-share existing ones, blame and abuse _Mr. XYZ_. Some go as far as defaming him publicly, protesting on streets, etc. \\n\\n---\\n\\nBy the time, the truth is known, either the topic loses its traction or the suspect is prejudiced under public opinion. If public opinion is the truth, it means either justice was given hastily under the public influence or justice was surely delivered correctly on time _(kudos to the judicial authorities!)_. Former can be hazardous in case the public opinion wasn't the truth. It may end up ruining the life of the innocent or even death by punishment. If the public opinion is not the truth, then it would set a negative mindset about the suspect among people for some time until truth reaches out to everyone. Then you would see sympathizers spawning up.\\n\\n---\\n\\n> _Mr. XYZ_ has been suspended from his office. His family faces a bad time. Eventually, he moves to a different place to start a new living.\\n\\nSocial media is filled with posts like _\\\"Justice has been served.\\\"_, _\\\"Rightly punished. #FaithInJusticeRegained\\\"_.\\n\\n> However, one fine day, some other officer, Mr. ABC, is caught in a similar scam. Further investigation leads to the conclusion that indeed _Mr. ABC_ was the culprit in the previous scam, not _Mr. XYZ_.\\n\\nFollowing this event, social media cries out in favour of _Mr. XYZ_. _\\\"We are ashamed. Forgive us, Mr. XYZ. #JusticeNotSoRight #ShameOnJudiciary\\\"_. However, damage was already inflicted.\\n\\n***The entire example was imaginary and exaggerated. But, then, you got the point, right?*** \\n\\n---\\n\\nThis can be corrected only if the opinion isn't biased in first place. Only if people think about the order side of the coin early and raise their contradictory opinions, a wrong judgment can averted.\\n\\n# Conclusion\\n\\nWhenever you get to know about an event that goes viral, first, try to understand both the sides of the opinion. If the other side is definitely the truth, your opinion can actually save an innocent.\\n\\nThough, this topic is not restricted to social media, it can be extended to personal level. Maybe we can stop judging people based on others' opinions and conclude our own opinion only after an honest open-minded meeting with that person. We may just make a new friend, but that person would surely get a hope.\"}]],\"sections\":[[10,0]]}","html":"<p>Internet has become a crazy place. Information is available at our fingertips. We know the major events that happen across the globe which eventually become <em>viral</em>. Often, the initial impressions of about them are quite biased based on what we see. However, some opinions get a better bias when famous social entities place their vote. These can be a <em>Facebook page</em>, a <em>Twitter handle</em>, a <em>YouTube channel</em>, etc. or on a more personal level, this could be one of our <em>family member</em>, a <em>close friend</em>, a <em>professor</em>, a <em>higher up at our workplace</em>, etc.</p>\n<p>What goes wrong here is, these biased opinions ultimately become the verdict of the people. People share these opinions everywhere on the social media which spreads the reach even further. Those who were unaware of the event get an opinionated impression and even they follow the trait. This further goes down at the personal level and becomes a topic at coffee shop talks, meetings, institutions, workplaces and family discussions. It forms a positive feedback loop until a contradictory opinion surfaces and picks up steam.</p>\n<hr>\n<p>For example, let's take an imaginary event.</p>\n<blockquote>\n<p>Government officer Mr. XYZ caught in $100 scam.</p>\n</blockquote>\n<p>Soon, posts circulate on social media about the incident and becomes viral. People write more posts, re-share existing ones, blame and abuse <em>Mr. XYZ</em>. Some go as far as defaming him publicly, protesting on streets, etc.</p>\n<hr>\n<p>By the time, the truth is known, either the topic loses its traction or the suspect is prejudiced under public opinion. If public opinion is the truth, it means either justice was given hastily under the public influence or justice was surely delivered correctly on time <em>(kudos to the judicial authorities!)</em>. Former can be hazardous in case the public opinion wasn't the truth. It may end up ruining the life of the innocent or even death by punishment. If the public opinion is not the truth, then it would set a negative mindset about the suspect among people for some time until truth reaches out to everyone. Then you would see sympathizers spawning up.</p>\n<hr>\n<blockquote>\n<p><em>Mr. XYZ</em> has been suspended from his office. His family faces a bad time. Eventually, he moves to a different place to start a new living.</p>\n</blockquote>\n<p>Social media is filled with posts like <em>&quot;Justice has been served.&quot;</em>, <em>&quot;Rightly punished. #FaithInJusticeRegained&quot;</em>.</p>\n<blockquote>\n<p>However, one fine day, some other officer, Mr. ABC, is caught in a similar scam. Further investigation leads to the conclusion that indeed <em>Mr. ABC</em> was the culprit in the previous scam, not <em>Mr. XYZ</em>.</p>\n</blockquote>\n<p>Following this event, social media cries out in favour of <em>Mr. XYZ</em>. <em>&quot;We are ashamed. Forgive us, Mr. XYZ. #JusticeNotSoRight #ShameOnJudiciary&quot;</em>. However, damage was already inflicted.</p>\n<p><em><strong>The entire example was imaginary and exaggerated. But, then, you got the point, right?</strong></em></p>\n<hr>\n<p>This can be corrected only if the opinion isn't biased in first place. Only if people think about the order side of the coin early and raise their contradictory opinions, a wrong judgment can averted.</p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>Whenever you get to know about an event that goes viral, first, try to understand both the sides of the opinion. If the other side is definitely the truth, your opinion can actually save an innocent.</p>\n<p>Though, this topic is not restricted to social media, it can be extended to personal level. Maybe we can stop judging people based on others' opinions and conclude our own opinion only after an honest open-minded meeting with that person. We may just make a new friend, but that person would surely get a hope.</p>\n","comment_id":"4","plaintext":"Internet has become a crazy place. Information is available at our fingertips.\nWe know the major events that happen across the globe which eventually become \nviral. Often, the initial impressions of about them are quite biased based on\nwhat we see. However, some opinions get a better bias when famous social\nentities place their vote. These can be a Facebook page, a Twitter handle, a \nYouTube channel, etc. or on a more personal level, this could be one of our \nfamily member, a close friend, a professor, a higher up at our workplace, etc.\n\nWhat goes wrong here is, these biased opinions ultimately become the verdict of\nthe people. People share these opinions everywhere on the social media which\nspreads the reach even further. Those who were unaware of the event get an\nopinionated impression and even they follow the trait. This further goes down at\nthe personal level and becomes a topic at coffee shop talks, meetings,\ninstitutions, workplaces and family discussions. It forms a positive feedback\nloop until a contradictory opinion surfaces and picks up steam.\n\n\n--------------------------------------------------------------------------------\n\nFor example, let's take an imaginary event.\n\nGovernment officer Mr. XYZ caught in $100 scam.\n\nSoon, posts circulate on social media about the incident and becomes viral.\nPeople write more posts, re-share existing ones, blame and abuse Mr. XYZ. Some\ngo as far as defaming him publicly, protesting on streets, etc.\n\n\n--------------------------------------------------------------------------------\n\nBy the time, the truth is known, either the topic loses its traction or the\nsuspect is prejudiced under public opinion. If public opinion is the truth, it\nmeans either justice was given hastily under the public influence or justice was\nsurely delivered correctly on time (kudos to the judicial authorities!). Former\ncan be hazardous in case the public opinion wasn't the truth. It may end up\nruining the life of the innocent or even death by punishment. If the public\nopinion is not the truth, then it would set a negative mindset about the suspect\namong people for some time until truth reaches out to everyone. Then you would\nsee sympathizers spawning up.\n\n\n--------------------------------------------------------------------------------\n\nMr. XYZ  has been suspended from his office. His family faces a bad time.\nEventually, he moves to a different place to start a new living.\n\nSocial media is filled with posts like \"Justice has been served.\", \"Rightly\npunished. #FaithInJusticeRegained\".\n\nHowever, one fine day, some other officer, Mr. ABC, is caught in a similar scam.\nFurther investigation leads to the conclusion that indeed Mr. ABC  was the\nculprit in the previous scam, not Mr. XYZ.\n\nFollowing this event, social media cries out in favour of Mr. XYZ. \"We are\nashamed. Forgive us, Mr. XYZ. #JusticeNotSoRight #ShameOnJudiciary\". However,\ndamage was already inflicted.\n\nThe entire example was imaginary and exaggerated. But, then, you got the point,\nright?\n\n\n--------------------------------------------------------------------------------\n\nThis can be corrected only if the opinion isn't biased in first place. Only if\npeople think about the order side of the coin early and raise their\ncontradictory opinions, a wrong judgment can averted.\n\nConclusion\nWhenever you get to know about an event that goes viral, first, try to\nunderstand both the sides of the opinion. If the other side is definitely the\ntruth, your opinion can actually save an innocent.\n\nThough, this topic is not restricted to social media, it can be extended to\npersonal level. Maybe we can stop judging people based on others' opinions and\nconclude our own opinion only after an honest open-minded meeting with that\nperson. We may just make a new friend, but that person would surely get a hope.","feature_image":"/content/images/2018/12/ryan-thomas-ang-512136-unsplash.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-04-23 15:22:41","updated_at":"2018-12-08 19:55:35","published_at":"2016-04-30 20:45:29","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5c0c1e7aabc169173fada4c6","uuid":"a608922e-a922-471a-971f-e57aab6ddfcb","title":"Similarities between One Piece (Alabasta Arc) and The Dark Knight Rises","slug":"similarities-between-one-piece-alabasta-arc-and-the-dark-knight-rises","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I recently came across [a thread](http://www.arlongpark.net/showthread.php?t=38320) stating the similarity between [One Piece (anime and manga)](https://en.wikipedia.org/wiki/One_Piece) by Eiichiro Oda and [The Dark Knight Rises movie](https://en.wikipedia.org/wiki/The_Dark_Knight_Rises) by Christopher Nolan.\\n\\n![One Piece and The Dark Knight Rises Similarities](/content/images/2018/12/one-piece-dark-knight.jpg)\\n\\n### Textual Representation\\n\\n| Incident | One Piece | The Dark Knight Rises |\\n| --- | --- | --- |\\n| Anti-hero protagonist | Luffy | Batman |\\n| Mastermind behind chaos | Crocodile | Bane |\\n| City that is nearing destruction | Alabasta | Gotham |\\n| City forces try to defend | Alabasta Royal Army | Gotham Police Force |\\n| Rebels try to take over | Koza and his army | All prisoners set free by Bane |\\n| Protagonist at the brink of death on first fight | Crocodile nearly impales Luffy and casts him into sand pit | Bane utterly breaks Batman and puts him in the pit |\\n| The next encounter is between the chaos | Luffy fights with Crocodile second time while rebels and royal army are fighting outside | Batman fights with Bane in midst of the fight between police and rebels |\\n| Protagonist has hidden a round shaped bomb somewhere in the city | Timed bomb hidden in the clock tower | Timed nuclear bomb hidden inside a moving truck |\\n| Protagonist's allies try to find the location of the bomb | Luffy's crew and Vivi | Gordon and his team |\\n| Bomb is airlifted far away from the city | Pel flies away carrying the bomb high into the sky | Batman uses the Bat to carry the bomb into the bay |\\n| **Extra**\\nBoth of them survive at the end | Pel is found alive in the subsequent episodes | Bruce Wayne is seen enjoying his vacation |\\n\\n#### Holy mother of Nolan!\"}]],\"markups\":[],\"sections\":[[10,0]]}","html":"<p>I recently came across <a href=\"http://www.arlongpark.net/showthread.php?t=38320\">a thread</a> stating the similarity between <a href=\"https://en.wikipedia.org/wiki/One_Piece\">One Piece (anime and manga)</a> by Eiichiro Oda and <a href=\"https://en.wikipedia.org/wiki/The_Dark_Knight_Rises\">The Dark Knight Rises movie</a> by Christopher Nolan.</p>\n<p><img src=\"/content/images/2018/12/one-piece-dark-knight.jpg\" alt=\"One Piece and The Dark Knight Rises Similarities\"></p>\n<h3 id=\"textualrepresentation\">Textual Representation</h3>\n<table>\n<thead>\n<tr>\n<th>Incident</th>\n<th>One Piece</th>\n<th>The Dark Knight Rises</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Anti-hero protagonist</td>\n<td>Luffy</td>\n<td>Batman</td>\n</tr>\n<tr>\n<td>Mastermind behind chaos</td>\n<td>Crocodile</td>\n<td>Bane</td>\n</tr>\n<tr>\n<td>City that is nearing destruction</td>\n<td>Alabasta</td>\n<td>Gotham</td>\n</tr>\n<tr>\n<td>City forces try to defend</td>\n<td>Alabasta Royal Army</td>\n<td>Gotham Police Force</td>\n</tr>\n<tr>\n<td>Rebels try to take over</td>\n<td>Koza and his army</td>\n<td>All prisoners set free by Bane</td>\n</tr>\n<tr>\n<td>Protagonist at the brink of death on first fight</td>\n<td>Crocodile nearly impales Luffy and casts him into sand pit</td>\n<td>Bane utterly breaks Batman and puts him in the pit</td>\n</tr>\n<tr>\n<td>The next encounter is between the chaos</td>\n<td>Luffy fights with Crocodile second time while rebels and royal army are fighting outside</td>\n<td>Batman fights with Bane in midst of the fight between police and rebels</td>\n</tr>\n<tr>\n<td>Protagonist has hidden a round shaped bomb somewhere in the city</td>\n<td>Timed bomb hidden in the clock tower</td>\n<td>Timed nuclear bomb hidden inside a moving truck</td>\n</tr>\n<tr>\n<td>Protagonist's allies try to find the location of the bomb</td>\n<td>Luffy's crew and Vivi</td>\n<td>Gordon and his team</td>\n</tr>\n<tr>\n<td>Bomb is airlifted far away from the city</td>\n<td>Pel flies away carrying the bomb high into the sky</td>\n<td>Batman uses the Bat to carry the bomb into the bay</td>\n</tr>\n<tr>\n<td><strong>Extra</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Both of them survive at the end</td>\n<td>Pel is found alive in the subsequent episodes</td>\n<td>Bruce Wayne is seen enjoying his vacation</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"holymotherofnolan\">Holy mother of Nolan!</h4>\n","comment_id":"6","plaintext":"I recently came across a thread\n[http://www.arlongpark.net/showthread.php?t=38320]  stating the similarity\nbetween One Piece (anime and manga) [https://en.wikipedia.org/wiki/One_Piece] \nby Eiichiro Oda and The Dark Knight Rises movie\n[https://en.wikipedia.org/wiki/The_Dark_Knight_Rises]  by Christopher Nolan.\n\n\n\nTextual Representation\nIncidentOne PieceThe Dark Knight RisesAnti-hero protagonistLuffyBatmanMastermind\nbehind chaosCrocodileBaneCity that is nearing destructionAlabastaGothamCity\nforces try to defendAlabasta Royal ArmyGotham Police ForceRebels try to take\noverKoza and his armyAll prisoners set free by BaneProtagonist at the brink of\ndeath on first fightCrocodile nearly impales Luffy and casts him into sand pit\nBane utterly breaks Batman and puts him in the pitThe next encounter is between\nthe chaosLuffy fights with Crocodile second time while rebels and royal army are\nfighting outsideBatman fights with Bane in midst of the fight between police and\nrebelsProtagonist has hidden a round shaped bomb somewhere in the cityTimed bomb\nhidden in the clock towerTimed nuclear bomb hidden inside a moving truck\nProtagonist's allies try to find the location of the bombLuffy's crew and Vivi\nGordon and his teamBomb is airlifted far away from the cityPel flies away\ncarrying the bomb high into the skyBatman uses the Bat to carry the bomb into\nthe bayExtraBoth of them survive at the endPel is found alive in the subsequent\nepisodesBruce Wayne is seen enjoying his vacationHoly mother of Nolan!","feature_image":"/content/images/2018/12/Luffy_1680x1050.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-08-28 13:48:59","updated_at":"2018-12-08 19:54:34","published_at":"2016-08-28 14:10:30","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5c0c1e7aabc169173fada4c7","uuid":"fb31de9a-d89f-43c9-9f73-9990d4c047a9","title":"Heliocentrism vs. Geocentrism","slug":"heliocentrism-vs-geocentrism","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Just re-sharing a GIF I saw on Google+ on Heliocentrism vs. Geocentrism.\\n![Heliocentrism vs. Geocentrism](/content/images/2018/12/heliocentric-vs-geocentric.gif)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<p>Just re-sharing a GIF I saw on Google+ on Heliocentrism vs. Geocentrism.<br>\n<img src=\"/content/images/2018/12/heliocentric-vs-geocentric.gif\" alt=\"Heliocentrism vs. Geocentrism\"></p>\n","comment_id":"3","plaintext":"Just re-sharing a GIF I saw on Google+ on Heliocentrism vs. Geocentrism.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-04-23 14:46:10","updated_at":"2018-12-08 19:56:28","published_at":"2016-04-23 14:57:03","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5c0c1e7aabc169173fada4c8","uuid":"acc5d57d-e9db-4c54-b753-cc8136627908","title":"Importing Mi Notebook Air: A nightmare and an episode with the customs","slug":"importing-mi-notebook-air-a-nightmare","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I love [Xiaomi](http://mi.com). Not only their products are a bang for the buck, the company also cares about product quality and looks. I already have a [Mi 5](http://www.mi.com/in/mi5/), a [Mi Pad](http://www.mi.com/in/mipad/) and [Mi In-ear Pro HD headphones](http://www.mi.com/in/headphonesprohd/) and pretty satisfied for what I've spent. Then Xiaomi unveiled its first laptop, [Mi Notebook Air 13.3\\\"](http://www.mi.com/en/mibookair/). \\n\\n# Act I: The Excitement\\nI was in love with this device the moment I saw the first hands-on videos. But sadly, Xiaomi didn't launch it in India. For the love of Xiaomi products, I did a gamble and ordered it from [Aliexpress](https://aliexpress.com). Guess what? I was getting a really sweet deal too. For ₹46000, it was the cheapest quotation for that laptop. I ordered it. The payment was made. Seller processed and dispatched the order through DHL. It got shipped within 2 days from Hong Kong to New Delhi. I was excited. I had a prescience of how things usually get slowed down at the customs, so I didn't worry much and I was ready to pay the customs duty which I expected to be around 14% as calculated on [Duty Calculator](https://www.dutycalculator.com/). \\n# Act II: The Horror\\nA day after it arrived at the customs, I received an email from a DHL representative and then the horror started. _\\\"Customs has held your shipment for value assessment\\\"_ it said. I asked for an invoice from the seller and then I got the biggest shock. The stupid guy undervalued the product from **$719** to **$189** and labelled it as **Tablet01**, and he had put the exact same invoice on the package. **HE DID ALL OF THIS WITHOUT ME TELLING HIM TO!** Somewhere back on my head I knew things will not go smooth hereafter but I remained optimistic. But, when the DHL guy asked for the proof of the value, I was dumbfounded and I really didn't know what to do. The only proof I had was the screenshot of the order page and the bank record of the transaction with Aliexpress.\\n\\nAfter forwarding those screenshots to the DHL guy, soon I got a call from him and, let me tell you clearly, it wasn't good at all. At first, he asked what the package was and for how much did I bought it. I replied honestly. He was flustered and stunned after looking at the difference between the valuation. It was too much. I begged and pleaded him as this was the very first time I was importing a high value product and I knew nothing about what the seller did until I got the email from DHL. He asked me to write a letter to the customs office stating that the value assessment should be done by the customs officer and also asked me to state the purpose of the product. \\n\\n> **Value Assessment:** What value assessment means is, the customs officer will check the product and look for the market price and value it accordingly.\\n\\nI was also told that this is a legal offence and can attract a nominal fine.\\n\\n# Act III: The Realization\\nI was battling at two fronts: DHL and customs at one side and seller and Aliexpress on the other. In the anger and frustration, I lambasted the seller for doing such a stupid act without my consent. I was persistently pushing Aliexpress to look into this sticky situation for which they insisted to open a **Dispute**.\\n\\n> **Buyer Protection Period:** When a customer makes a purchase, he/she is entitled for a Buyer Protection Period usually lasting 60 days from the time seller processes the order. When a purchase is made, the amount is still with Aliexpress. This period can end prematurely if the customer cancels or receives the order. Once this period ends, Aliexpress forwards the payment (if the order is not cancelled) to the seller and the order is completed. Thus, all refunds and returns should be initiated within this period.\\n>\\n> **Dispute:** On Aliexpress, when there are some disagreements or dissatisfaction over a deal, the buyer has the right to open a Dispute with the seller. **Buyer can open a Dispute only during the Buyer Protection Period.** It's a two way process involving the buyer and seller wherein each party puts forward a proposal on the order. Proposal can either be a _Return of Goods_ or _Refund (partial or full)_. Either party can accept or reject a proposal. If no conclusion is reached, Aliexpress intervenes. \\n\\nApparently, Aliexpress puts the customer before anything else which puts the sellers' reputation and sales at the mercy of the customer. Just when I felt that the situation was in control, I underestimated our own legal system. Hell was going to break loose. The DHL guy called me up to give me another round of horror. Since I was importing this product for personal use (and I didn't do my homework properly), I was charged with a **41.49%** duty! It doesn't end here. The customs officer did his homework and valued the product to **₹60000** and applied a **41.49%** duty on that amount. If this wasn't enough, I was eligible for a penalty for undervaluation, which the DHL guy said, is up to the officer to decide the amount which usually is around **₹5000**.\\n\\nI was seriously done now. According to my homework, the duty was supposed to be 14%. But, f\\\\*ck my luck. Just a few months back, the customs had changed the duty tariff for products intended for personal use to a fixed **41.49%**. \\n\\n**F\\\\*ck [Duty Calculator](https://dutycalculator.com)!**\\n\\nI can't pay this much duty. I was prepared for 14% not 42%. It would be a wiser choice to return it and cancel the order. In another desperate effort, I asked the DHL guy how viable returning the goods was. Not an encouraging reply though. I would still have to pay the penalty and shipping fees which would come at around ₹10000. I had two options - send the laptop back and get a _probably_ full refund (\\\"probably\\\" is more important as refund amount is determined by the seller depending upon the condition of the product when it reaches to him) but lose ₹10000 for no reason or rather ask the seller to pay for the extra customs duty and the penalty as this entire shambolic muss was a result of his stupidity. The latter option got my vote as somewhere deep down inside, I was still longing for that laptop. So, it was decided.\\n\\nI was told to write a letter stating that I would like to clear the shipment and duty and penalty should be charged accordingly. Despite [SpeedPost<sup>TM</sup>](https://www.indiapost.gov.in/mbe/pages/content/speed-post.aspx), it took almost 2 days for the letter to reach the customs office in Delhi (I stay in Mumbai, by the way). Patiently, I waited for the clearance.\\n\\n# Act IV: The Second Horror\\n\\nI got an email from the DHL guy and it read something like this,\\n> **Duty charges:** ₹24895\\n> **Redemption Fine:** ₹10000\\n> **Personal Penalty:** ₹10000\\n> **Total duty:** ₹42895\\n\\nI was shaken.\\n\\nThis was going way out of control. I chastised the DHL guy on the email as he had given me an estimate of ₹5000 for the penalty earlier. I bashed the DHL customer service on phone. I loathed the seller for his dickhead undervaluation move which he did without even asking me and without which this wouldn't have happened and I would be comfortably using my laptop by now. I simply couldn't be mollified. I was frustrated beyond anything. So much trouble just to get this one laptop delivered home and yet it hits me back everytime. I asked for a proof for these extravagant charges. Again I was reminded that you should never **EVER** underestimate the legal system. I was given an official letter stating the places where this shipment broke the law. **THAT WAS IN MY FACE!**\\n\\n> There were two different penalties involved here under the **Customs Act of 1962**. \\n> \\n> **Section 112A:** Incorrect valuation of the shipment in an attempt to evade the customs which amounted to ₹10000\\n>\\n> **Section 114AA:** False declaration of the product  attracting a fine of ₹10000.\\n\\nI was quick enough to open the dispute and raise the refund amount to **$385** (Rs. 20000 penalty and Rs. 5895 difference in the customs duty because of overvaluation). Meanwhile, I asked the DHL guy to proceed with the clearance procedure as nothing could be done on my side and I didn't want any further delays on this already messed up order. \\n\\nI had my mind fixed now. Either I am losing my **₹46000** if the refund doesn't happen, or I am getting this laptop for **₹65000**.\\n\\n# Act V: The Finale\\n\\nWith no options left, I decided to contact seller and asked for a partial refund of **$385**. The next morning, I woke up and saw a notification on my phone. I received a message from the seller. _Okay, fine_, it said. The dispute was resolved and seller accepted my proposal of refunding the penalty and extra duty. I couldn't believe my eyes! It happened, finally!\\n\\nThree days later, the package got cleared by the customs and it finally received at my doorstep within a day. DHL charged ₹1800 as clearance charge and demurrage, which, at this point, I was not in a state to question and just let it through. The laptop was in the perfect condition. Packaging was opened and the seal was broken with a _Opened and cleared by customs_ sticker on it. The same day, I got my **₹25436** refunded in the account.\\n\\nI'm finishing this article on my **Mi Notebook Air**.\\n\\n# Conclusion\\n\\nYes, it was a pretty dramatic episode which gave me more headaches than I would even imagine. The excitement faded by the time the laptop got delivered. During those 3 weeks of the clearance battle, I hardly slept peacefully. But, it was an experience worth having. In future, if I would get into any such situation, atleast now I know the tricks of the trade. Some important things which are worth noting,\\n\\n* **ALWAYS GET THE CORRECT INVOICE WITH THE PACKAGE!** I cannot stress enough on this single point. It's risky and against the law and you might end up in a legal mess if it goes out of hand.\\n* **Do your homework.** Perhaps, the biggest shock for me was the **41.49%** duty that I was charged with. Always, check with the latest duty prices for your product and use.\\n* **Make a commercial order instead.** If I would have ordered it on behalf of my company for commercial uses, perhaps the duty would not have been so harsh. Usually, import duties are higher for products meant for personal consumption than for commercial.\\n* **Be honest.** Don't assume that the people at the customs are fools. They know everything. If I would not have been honest at the time of clearance, it would have exacerbated the entire process, and perhaps would have even lead to confiscation and a much hefty penalty. The customs officer **did** open the package to check the product inside.\\n* **Prefer local purchases.** If the product you want to buy is available locally, then I would recommend that you don't go for overseas options (unless it costs less even after levying customs duty).\\n* **Be communicative and polite.** It turned out that the seller was a pretty nice person and was quite polite. In fact, in the last few days, I felt pretty bad for him as he was refunding his precious **$385**. But, it would not have happened if I would have just bashed him left, right and center. Same goes for the DHL guy. We need to understand that, at times, getting angry and tossing your frustration over the other person makes things worse. People are already troubled with their daily problems and they too are humans after all. Be polite and nice. Put yourself into their shoes and question yourself, _whom would you prefer to deal with - a bad tempered, foul mouthed person or an understanding and polite one_. \\n\\n> With this purchase, I completed my Xiaomi collection - Mi 5, Mi Pad, Mi In-ear Pro HD and, the newest addition, Mi Notebook Air 13.3.\\n\\n**Post image source:** *[laptopmain.com](https://www.laptopmain.com/wp-content/uploads/2017/09/Xiaomi-Mi-Notebook-Pro-1-2.jpg)*\"}]],\"sections\":[[10,0]]}","html":"<p>I love <a href=\"http://mi.com\">Xiaomi</a>. Not only their products are a bang for the buck, the company also cares about product quality and looks. I already have a <a href=\"http://www.mi.com/in/mi5/\">Mi 5</a>, a <a href=\"http://www.mi.com/in/mipad/\">Mi Pad</a> and <a href=\"http://www.mi.com/in/headphonesprohd/\">Mi In-ear Pro HD headphones</a> and pretty satisfied for what I've spent. Then Xiaomi unveiled its first laptop, <a href=\"http://www.mi.com/en/mibookair/\">Mi Notebook Air 13.3&quot;</a>.</p>\n<h1 id=\"actitheexcitement\">Act I: The Excitement</h1>\n<p>I was in love with this device the moment I saw the first hands-on videos. But sadly, Xiaomi didn't launch it in India. For the love of Xiaomi products, I did a gamble and ordered it from <a href=\"https://aliexpress.com\">Aliexpress</a>. Guess what? I was getting a really sweet deal too. For ₹46000, it was the cheapest quotation for that laptop. I ordered it. The payment was made. Seller processed and dispatched the order through DHL. It got shipped within 2 days from Hong Kong to New Delhi. I was excited. I had a prescience of how things usually get slowed down at the customs, so I didn't worry much and I was ready to pay the customs duty which I expected to be around 14% as calculated on <a href=\"https://www.dutycalculator.com/\">Duty Calculator</a>.</p>\n<h1 id=\"actiithehorror\">Act II: The Horror</h1>\n<p>A day after it arrived at the customs, I received an email from a DHL representative and then the horror started. <em>&quot;Customs has held your shipment for value assessment&quot;</em> it said. I asked for an invoice from the seller and then I got the biggest shock. The stupid guy undervalued the product from <strong>$719</strong> to <strong>$189</strong> and labelled it as <strong>Tablet01</strong>, and he had put the exact same invoice on the package. <strong>HE DID ALL OF THIS WITHOUT ME TELLING HIM TO!</strong> Somewhere back on my head I knew things will not go smooth hereafter but I remained optimistic. But, when the DHL guy asked for the proof of the value, I was dumbfounded and I really didn't know what to do. The only proof I had was the screenshot of the order page and the bank record of the transaction with Aliexpress.</p>\n<p>After forwarding those screenshots to the DHL guy, soon I got a call from him and, let me tell you clearly, it wasn't good at all. At first, he asked what the package was and for how much did I bought it. I replied honestly. He was flustered and stunned after looking at the difference between the valuation. It was too much. I begged and pleaded him as this was the very first time I was importing a high value product and I knew nothing about what the seller did until I got the email from DHL. He asked me to write a letter to the customs office stating that the value assessment should be done by the customs officer and also asked me to state the purpose of the product.</p>\n<blockquote>\n<p><strong>Value Assessment:</strong> What value assessment means is, the customs officer will check the product and look for the market price and value it accordingly.</p>\n</blockquote>\n<p>I was also told that this is a legal offence and can attract a nominal fine.</p>\n<h1 id=\"actiiitherealization\">Act III: The Realization</h1>\n<p>I was battling at two fronts: DHL and customs at one side and seller and Aliexpress on the other. In the anger and frustration, I lambasted the seller for doing such a stupid act without my consent. I was persistently pushing Aliexpress to look into this sticky situation for which they insisted to open a <strong>Dispute</strong>.</p>\n<blockquote>\n<p><strong>Buyer Protection Period:</strong> When a customer makes a purchase, he/she is entitled for a Buyer Protection Period usually lasting 60 days from the time seller processes the order. When a purchase is made, the amount is still with Aliexpress. This period can end prematurely if the customer cancels or receives the order. Once this period ends, Aliexpress forwards the payment (if the order is not cancelled) to the seller and the order is completed. Thus, all refunds and returns should be initiated within this period.</p>\n<p><strong>Dispute:</strong> On Aliexpress, when there are some disagreements or dissatisfaction over a deal, the buyer has the right to open a Dispute with the seller. <strong>Buyer can open a Dispute only during the Buyer Protection Period.</strong> It's a two way process involving the buyer and seller wherein each party puts forward a proposal on the order. Proposal can either be a <em>Return of Goods</em> or <em>Refund (partial or full)</em>. Either party can accept or reject a proposal. If no conclusion is reached, Aliexpress intervenes.</p>\n</blockquote>\n<p>Apparently, Aliexpress puts the customer before anything else which puts the sellers' reputation and sales at the mercy of the customer. Just when I felt that the situation was in control, I underestimated our own legal system. Hell was going to break loose. The DHL guy called me up to give me another round of horror. Since I was importing this product for personal use (and I didn't do my homework properly), I was charged with a <strong>41.49%</strong> duty! It doesn't end here. The customs officer did his homework and valued the product to <strong>₹60000</strong> and applied a <strong>41.49%</strong> duty on that amount. If this wasn't enough, I was eligible for a penalty for undervaluation, which the DHL guy said, is up to the officer to decide the amount which usually is around <strong>₹5000</strong>.</p>\n<p>I was seriously done now. According to my homework, the duty was supposed to be 14%. But, f*ck my luck. Just a few months back, the customs had changed the duty tariff for products intended for personal use to a fixed <strong>41.49%</strong>.</p>\n<p><strong>F*ck <a href=\"https://dutycalculator.com\">Duty Calculator</a>!</strong></p>\n<p>I can't pay this much duty. I was prepared for 14% not 42%. It would be a wiser choice to return it and cancel the order. In another desperate effort, I asked the DHL guy how viable returning the goods was. Not an encouraging reply though. I would still have to pay the penalty and shipping fees which would come at around ₹10000. I had two options - send the laptop back and get a <em>probably</em> full refund (&quot;probably&quot; is more important as refund amount is determined by the seller depending upon the condition of the product when it reaches to him) but lose ₹10000 for no reason or rather ask the seller to pay for the extra customs duty and the penalty as this entire shambolic muss was a result of his stupidity. The latter option got my vote as somewhere deep down inside, I was still longing for that laptop. So, it was decided.</p>\n<p>I was told to write a letter stating that I would like to clear the shipment and duty and penalty should be charged accordingly. Despite <a href=\"https://www.indiapost.gov.in/mbe/pages/content/speed-post.aspx\">SpeedPost<sup>TM</sup></a>, it took almost 2 days for the letter to reach the customs office in Delhi (I stay in Mumbai, by the way). Patiently, I waited for the clearance.</p>\n<h1 id=\"activthesecondhorror\">Act IV: The Second Horror</h1>\n<p>I got an email from the DHL guy and it read something like this,</p>\n<blockquote>\n<p><strong>Duty charges:</strong> ₹24895<br>\n<strong>Redemption Fine:</strong> ₹10000<br>\n<strong>Personal Penalty:</strong> ₹10000<br>\n<strong>Total duty:</strong> ₹42895</p>\n</blockquote>\n<p>I was shaken.</p>\n<p>This was going way out of control. I chastised the DHL guy on the email as he had given me an estimate of ₹5000 for the penalty earlier. I bashed the DHL customer service on phone. I loathed the seller for his dickhead undervaluation move which he did without even asking me and without which this wouldn't have happened and I would be comfortably using my laptop by now. I simply couldn't be mollified. I was frustrated beyond anything. So much trouble just to get this one laptop delivered home and yet it hits me back everytime. I asked for a proof for these extravagant charges. Again I was reminded that you should never <strong>EVER</strong> underestimate the legal system. I was given an official letter stating the places where this shipment broke the law. <strong>THAT WAS IN MY FACE!</strong></p>\n<blockquote>\n<p>There were two different penalties involved here under the <strong>Customs Act of 1962</strong>.</p>\n<p><strong>Section 112A:</strong> Incorrect valuation of the shipment in an attempt to evade the customs which amounted to ₹10000</p>\n<p><strong>Section 114AA:</strong> False declaration of the product  attracting a fine of ₹10000.</p>\n</blockquote>\n<p>I was quick enough to open the dispute and raise the refund amount to <strong>$385</strong> (Rs. 20000 penalty and Rs. 5895 difference in the customs duty because of overvaluation). Meanwhile, I asked the DHL guy to proceed with the clearance procedure as nothing could be done on my side and I didn't want any further delays on this already messed up order.</p>\n<p>I had my mind fixed now. Either I am losing my <strong>₹46000</strong> if the refund doesn't happen, or I am getting this laptop for <strong>₹65000</strong>.</p>\n<h1 id=\"actvthefinale\">Act V: The Finale</h1>\n<p>With no options left, I decided to contact seller and asked for a partial refund of <strong>$385</strong>. The next morning, I woke up and saw a notification on my phone. I received a message from the seller. <em>Okay, fine</em>, it said. The dispute was resolved and seller accepted my proposal of refunding the penalty and extra duty. I couldn't believe my eyes! It happened, finally!</p>\n<p>Three days later, the package got cleared by the customs and it finally received at my doorstep within a day. DHL charged ₹1800 as clearance charge and demurrage, which, at this point, I was not in a state to question and just let it through. The laptop was in the perfect condition. Packaging was opened and the seal was broken with a <em>Opened and cleared by customs</em> sticker on it. The same day, I got my <strong>₹25436</strong> refunded in the account.</p>\n<p>I'm finishing this article on my <strong>Mi Notebook Air</strong>.</p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>Yes, it was a pretty dramatic episode which gave me more headaches than I would even imagine. The excitement faded by the time the laptop got delivered. During those 3 weeks of the clearance battle, I hardly slept peacefully. But, it was an experience worth having. In future, if I would get into any such situation, atleast now I know the tricks of the trade. Some important things which are worth noting,</p>\n<ul>\n<li><strong>ALWAYS GET THE CORRECT INVOICE WITH THE PACKAGE!</strong> I cannot stress enough on this single point. It's risky and against the law and you might end up in a legal mess if it goes out of hand.</li>\n<li><strong>Do your homework.</strong> Perhaps, the biggest shock for me was the <strong>41.49%</strong> duty that I was charged with. Always, check with the latest duty prices for your product and use.</li>\n<li><strong>Make a commercial order instead.</strong> If I would have ordered it on behalf of my company for commercial uses, perhaps the duty would not have been so harsh. Usually, import duties are higher for products meant for personal consumption than for commercial.</li>\n<li><strong>Be honest.</strong> Don't assume that the people at the customs are fools. They know everything. If I would not have been honest at the time of clearance, it would have exacerbated the entire process, and perhaps would have even lead to confiscation and a much hefty penalty. The customs officer <strong>did</strong> open the package to check the product inside.</li>\n<li><strong>Prefer local purchases.</strong> If the product you want to buy is available locally, then I would recommend that you don't go for overseas options (unless it costs less even after levying customs duty).</li>\n<li><strong>Be communicative and polite.</strong> It turned out that the seller was a pretty nice person and was quite polite. In fact, in the last few days, I felt pretty bad for him as he was refunding his precious <strong>$385</strong>. But, it would not have happened if I would have just bashed him left, right and center. Same goes for the DHL guy. We need to understand that, at times, getting angry and tossing your frustration over the other person makes things worse. People are already troubled with their daily problems and they too are humans after all. Be polite and nice. Put yourself into their shoes and question yourself, <em>whom would you prefer to deal with - a bad tempered, foul mouthed person or an understanding and polite one</em>.</li>\n</ul>\n<blockquote>\n<p>With this purchase, I completed my Xiaomi collection - Mi 5, Mi Pad, Mi In-ear Pro HD and, the newest addition, Mi Notebook Air 13.3.</p>\n</blockquote>\n<p><strong>Post image source:</strong> <em><a href=\"https://www.laptopmain.com/wp-content/uploads/2017/09/Xiaomi-Mi-Notebook-Pro-1-2.jpg\">laptopmain.com</a></em></p>\n","comment_id":"7","plaintext":"I love Xiaomi [http://mi.com]. Not only their products are a bang for the buck,\nthe company also cares about product quality and looks. I already have a Mi 5\n[http://www.mi.com/in/mi5/], a Mi Pad [http://www.mi.com/in/mipad/]  and Mi\nIn-ear Pro HD headphones [http://www.mi.com/in/headphonesprohd/]  and pretty\nsatisfied for what I've spent. Then Xiaomi unveiled its first laptop, Mi\nNotebook Air 13.3\" [http://www.mi.com/en/mibookair/].\n\nAct I: The Excitement\nI was in love with this device the moment I saw the first hands-on videos. But\nsadly, Xiaomi didn't launch it in India. For the love of Xiaomi products, I did\na gamble and ordered it from Aliexpress [https://aliexpress.com]. Guess what? I\nwas getting a really sweet deal too. For ₹46000, it was the cheapest quotation\nfor that laptop. I ordered it. The payment was made. Seller processed and\ndispatched the order through DHL. It got shipped within 2 days from Hong Kong to\nNew Delhi. I was excited. I had a prescience of how things usually get slowed\ndown at the customs, so I didn't worry much and I was ready to pay the customs\nduty which I expected to be around 14% as calculated on Duty Calculator\n[https://www.dutycalculator.com/].\n\nAct II: The Horror\nA day after it arrived at the customs, I received an email from a DHL\nrepresentative and then the horror started. \"Customs has held your shipment for\nvalue assessment\"  it said. I asked for an invoice from the seller and then I\ngot the biggest shock. The stupid guy undervalued the product from $719  to $189 \n and labelled it as Tablet01, and he had put the exact same invoice on the\npackage. HE DID ALL OF THIS WITHOUT ME TELLING HIM TO!  Somewhere back on my\nhead I knew things will not go smooth hereafter but I remained optimistic. But,\nwhen the DHL guy asked for the proof of the value, I was dumbfounded and I\nreally didn't know what to do. The only proof I had was the screenshot of the\norder page and the bank record of the transaction with Aliexpress.\n\nAfter forwarding those screenshots to the DHL guy, soon I got a call from him\nand, let me tell you clearly, it wasn't good at all. At first, he asked what the\npackage was and for how much did I bought it. I replied honestly. He was\nflustered and stunned after looking at the difference between the valuation. It\nwas too much. I begged and pleaded him as this was the very first time I was\nimporting a high value product and I knew nothing about what the seller did\nuntil I got the email from DHL. He asked me to write a letter to the customs\noffice stating that the value assessment should be done by the customs officer\nand also asked me to state the purpose of the product.\n\nValue Assessment:  What value assessment means is, the customs officer will\ncheck the product and look for the market price and value it accordingly.\n\nI was also told that this is a legal offence and can attract a nominal fine.\n\nAct III: The Realization\nI was battling at two fronts: DHL and customs at one side and seller and\nAliexpress on the other. In the anger and frustration, I lambasted the seller\nfor doing such a stupid act without my consent. I was persistently pushing\nAliexpress to look into this sticky situation for which they insisted to open a \nDispute.\n\nBuyer Protection Period:  When a customer makes a purchase, he/she is entitled\nfor a Buyer Protection Period usually lasting 60 days from the time seller\nprocesses the order. When a purchase is made, the amount is still with\nAliexpress. This period can end prematurely if the customer cancels or receives\nthe order. Once this period ends, Aliexpress forwards the payment (if the order\nis not cancelled) to the seller and the order is completed. Thus, all refunds\nand returns should be initiated within this period.\n\nDispute:  On Aliexpress, when there are some disagreements or dissatisfaction\nover a deal, the buyer has the right to open a Dispute with the seller. Buyer\ncan open a Dispute only during the Buyer Protection Period.  It's a two way\nprocess involving the buyer and seller wherein each party puts forward a\nproposal on the order. Proposal can either be a Return of Goods  or Refund\n(partial or full). Either party can accept or reject a proposal. If no\nconclusion is reached, Aliexpress intervenes.\n\nApparently, Aliexpress puts the customer before anything else which puts the\nsellers' reputation and sales at the mercy of the customer. Just when I felt\nthat the situation was in control, I underestimated our own legal system. Hell\nwas going to break loose. The DHL guy called me up to give me another round of\nhorror. Since I was importing this product for personal use (and I didn't do my\nhomework properly), I was charged with a 41.49%  duty! It doesn't end here. The\ncustoms officer did his homework and valued the product to ₹60000  and applied a\n 41.49%  duty on that amount. If this wasn't enough, I was eligible for a\npenalty for undervaluation, which the DHL guy said, is up to the officer to\ndecide the amount which usually is around ₹5000.\n\nI was seriously done now. According to my homework, the duty was supposed to be\n14%. But, f*ck my luck. Just a few months back, the customs had changed the duty\ntariff for products intended for personal use to a fixed 41.49%.\n\nF*ck Duty Calculator [https://dutycalculator.com]!\n\nI can't pay this much duty. I was prepared for 14% not 42%. It would be a wiser\nchoice to return it and cancel the order. In another desperate effort, I asked\nthe DHL guy how viable returning the goods was. Not an encouraging reply though.\nI would still have to pay the penalty and shipping fees which would come at\naround ₹10000. I had two options - send the laptop back and get a probably  full\nrefund (\"probably\" is more important as refund amount is determined by the\nseller depending upon the condition of the product when it reaches to him) but\nlose ₹10000 for no reason or rather ask the seller to pay for the extra customs\nduty and the penalty as this entire shambolic muss was a result of his\nstupidity. The latter option got my vote as somewhere deep down inside, I was\nstill longing for that laptop. So, it was decided.\n\nI was told to write a letter stating that I would like to clear the shipment and\nduty and penalty should be charged accordingly. Despite SpeedPostTM\n[https://www.indiapost.gov.in/mbe/pages/content/speed-post.aspx], it took almost\n2 days for the letter to reach the customs office in Delhi (I stay in Mumbai, by\nthe way). Patiently, I waited for the clearance.\n\nAct IV: The Second Horror\nI got an email from the DHL guy and it read something like this,\n\nDuty charges:  ₹24895\nRedemption Fine:  ₹10000\nPersonal Penalty:  ₹10000\nTotal duty:  ₹42895\n\nI was shaken.\n\nThis was going way out of control. I chastised the DHL guy on the email as he\nhad given me an estimate of ₹5000 for the penalty earlier. I bashed the DHL\ncustomer service on phone. I loathed the seller for his dickhead undervaluation\nmove which he did without even asking me and without which this wouldn't have\nhappened and I would be comfortably using my laptop by now. I simply couldn't be\nmollified. I was frustrated beyond anything. So much trouble just to get this\none laptop delivered home and yet it hits me back everytime. I asked for a proof\nfor these extravagant charges. Again I was reminded that you should never EVER \nunderestimate the legal system. I was given an official letter stating the\nplaces where this shipment broke the law. THAT WAS IN MY FACE!\n\nThere were two different penalties involved here under the Customs Act of 1962.\n\nSection 112A:  Incorrect valuation of the shipment in an attempt to evade the\ncustoms which amounted to ₹10000\n\nSection 114AA:  False declaration of the product attracting a fine of ₹10000.\n\nI was quick enough to open the dispute and raise the refund amount to $385  (Rs.\n20000 penalty and Rs. 5895 difference in the customs duty because of\novervaluation). Meanwhile, I asked the DHL guy to proceed with the clearance\nprocedure as nothing could be done on my side and I didn't want any further\ndelays on this already messed up order.\n\nI had my mind fixed now. Either I am losing my ₹46000  if the refund doesn't\nhappen, or I am getting this laptop for ₹65000.\n\nAct V: The Finale\nWith no options left, I decided to contact seller and asked for a partial refund\nof $385. The next morning, I woke up and saw a notification on my phone. I\nreceived a message from the seller. Okay, fine, it said. The dispute was\nresolved and seller accepted my proposal of refunding the penalty and extra\nduty. I couldn't believe my eyes! It happened, finally!\n\nThree days later, the package got cleared by the customs and it finally received\nat my doorstep within a day. DHL charged ₹1800 as clearance charge and\ndemurrage, which, at this point, I was not in a state to question and just let\nit through. The laptop was in the perfect condition. Packaging was opened and\nthe seal was broken with a Opened and cleared by customs  sticker on it. The\nsame day, I got my ₹25436  refunded in the account.\n\nI'm finishing this article on my Mi Notebook Air.\n\nConclusion\nYes, it was a pretty dramatic episode which gave me more headaches than I would\neven imagine. The excitement faded by the time the laptop got delivered. During\nthose 3 weeks of the clearance battle, I hardly slept peacefully. But, it was an\nexperience worth having. In future, if I would get into any such situation,\natleast now I know the tricks of the trade. Some important things which are\nworth noting,\n\n * ALWAYS GET THE CORRECT INVOICE WITH THE PACKAGE!  I cannot stress enough on\n   this single point. It's risky and against the law and you might end up in a\n   legal mess if it goes out of hand.\n * Do your homework.  Perhaps, the biggest shock for me was the 41.49%  duty\n   that I was charged with. Always, check with the latest duty prices for your\n   product and use.\n * Make a commercial order instead.  If I would have ordered it on behalf of my\n   company for commercial uses, perhaps the duty would not have been so harsh.\n   Usually, import duties are higher for products meant for personal consumption\n   than for commercial.\n * Be honest.  Don't assume that the people at the customs are fools. They know\n   everything. If I would not have been honest at the time of clearance, it\n   would have exacerbated the entire process, and perhaps would have even lead\n   to confiscation and a much hefty penalty. The customs officer did  open the\n   package to check the product inside.\n * Prefer local purchases.  If the product you want to buy is available locally,\n   then I would recommend that you don't go for overseas options (unless it\n   costs less even after levying customs duty).\n * Be communicative and polite.  It turned out that the seller was a pretty nice\n   person and was quite polite. In fact, in the last few days, I felt pretty bad\n   for him as he was refunding his precious $385. But, it would not have\n   happened if I would have just bashed him left, right and center. Same goes\n   for the DHL guy. We need to understand that, at times, getting angry and\n   tossing your frustration over the other person makes things worse. People are\n   already troubled with their daily problems and they too are humans after all.\n   Be polite and nice. Put yourself into their shoes and question yourself, whom\n   would you prefer to deal with - a bad tempered, foul mouthed person or an\n   understanding and polite one.\n\nWith this purchase, I completed my Xiaomi collection - Mi 5, Mi Pad, Mi In-ear\nPro HD and, the newest addition, Mi Notebook Air 13.3.\n\nPost image source:  laptopmain.com\n[https://www.laptopmain.com/wp-content/uploads/2017/09/Xiaomi-Mi-Notebook-Pro-1-2.jpg]","feature_image":"/content/images/2018/12/Xiaomi-Mi-Notebook-Pro-1-2.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2017-06-15 14:25:56","updated_at":"2018-12-08 19:50:16","published_at":"2017-06-15 19:08:22","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5c0c1e7aabc169173fada4c9","uuid":"43b2824e-4477-4d9e-82ad-2cd6b3c75c9c","title":"Introducing: Scheduler","slug":"introducing-django-task-scheduler","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Scheduler is a small task scheduling utility built for Django using Celery.\\n\\nA lot of interesting projects start by solving a simple but essential problems of some other major problem. So was the case with [Scheduler](https://github.com/tejasjadhav/django-scheduler). At [m.Paani](https://mpaani.com), I had similar such problem. \\n\\n# Problem statement\\nI had to execute a task at specific intervals. At first, I tried the one and only, fan-favorite, _cronjob_. Luckily, Celery has something which does the exact same thing - `@periodic_task`. Just enter your cron rule and your job is done. Voila! Problem solved. Celebrations were too early and I just discovered a few scenarios which could not be done with cron jobs alone.\\n\\nTo understand this, let's see how a complicated rule of our old, faithful cron looks like.\\n```cron\\n5-30/3 */2 * 1,5,9 2\\n```\\nThe above rule translates to,\\n> At every 3rd minute from 5 through 30 past every 2nd hour on Tuesday in January, May, and September. <small>[crontab.guru](https://crontab.guru/). You can check the interpretation of the above rule [here](https://crontab.guru/#5-30/3_*/2_*_1,5,9_2_).</small>\\n\\nThis seems all nice and fair. However, I had some bizaare use cases.\\n1. Task should execute every 2nd Friday\\n2. Task should execute on second last day on every month\\n3. Task should execute on every even day\\n\\nCron rule for first is still manageable in some cases. For second, it is impossible. And for 3rd, it fails after every month with odd number of days (though the non-standard way of doing it is `0 0 2/2 * *`). After head banging for a day and countless Google searches, I just glanced at my [calendar app](https://play.google.com/store/apps/details?id=com.google.android.calendar&hl=en) and saw some recurring events, like weekly sprints, month-end discussions, etc. When I tried to create one with a repetition pattern, I saw half a dozen of configurations. Initially, it seemed like some Google kinda stuff (of course, you can only expect such sophistications from a Google-like company). But, then I saw similar settings on [Evolution](https://wiki.gnome.org/Apps/Evolution). To my utter surprise, I could edit the reccurence rules set for the event on Google Calendar, and then on the app, those changes got sync'd up. This commonality means that there's some practice or convention followed by both. After digging about it for some time, I hit the jackpot. It's called _Recurrence Rules_ which is an actual [standard set by the IEFT](https://tools.ietf.org/html/rfc2445) (the gods behind everything related to internet including HTTP, LDAP, sockets, etc. You can check the list of standards they have in place [here](https://www.rfc-editor.org/rfc-index.html).)\\n\\n# Recurrence rules _(RRULE)_\\nThey are similar to cron jobs. Like cron, they solve the problem of defining rules for programming date and time patterns. Unlike cron, RRULE is a complete [DSL](https://blog.tejasjadhav.xyz/2016/06/06/domain-specific-languages-using-python-part-1/) with limited grammar. You can stack multiple RRULEs to create an inclusion-exclusion pattern. Look at this example below,\\n```rrule\\nRRULE:FREQ=DAILY;COUNT=5\\n```\\nThe above rule executes every day for the next 5 days. Not amused, take another example,\\n```rrule\\nRRULE:FREQ=MONTHLY;COUNT=3;BYDAY=-2MO\\n```\\nThis rule executes every second last day of the month for the next 3 months. Sounds familiar? Yes, this solves my second use case too.\\n```rrule\\nRRULE:FREQ=DAILY;INTERVAL=2;BYSETPOS=2\\n```\\n\\n# Implementation\\nOne by one, all my usecases were handled by RRULEs. But building a complete RRULE parser in Python is a prodigious chore. I had written an article about writing DSLs in Python a while back which you may refer to understand how much does it take to build a basic DSL. This was just too much for me to do. I almost settled for cronjobs again when I realised that the [`python-dateutil`](https://pypi.python.org/pypi/python-dateutil) library has something already built related to RRULEs. Oh yes! They had built an RRULE parser ([`dateutil.rrule`](https://dateutil.readthedocs.io/en/stable/rrule.html)) which, in fact, also has a Python API giving an even greater control of the individual elements of the RRULE. Such a sweet delight!\\n\\nThe library has a function `dateutil.rrule.rrulestr` which converts a raw RRULE string into a `rrule` object. The best part about this object is, some parameters of the RRULE can be changed directly by modifying the object properties, like the `dtstart` parameter. Also, the best part is, the `rrule` object is a generator, which means I can iterate over it and it will give me the next timestamp in the sequence. Overall, this utility provided the perfect suite for managing RRULEs.\\n\\nTh initial idea for flow was,\\n1. Get the RRULEs from the database defined by the user\\n2. Build the `rrule` object\\n3. Get the next timestamp in the sequence\\n4. Pickle the `rrule` object and store it in the database and execute the function at the specified timestamp using the `eta` argument in Celery's `apply_async` function. \\n5. When the function gets executed, unpickle the `rrule` object, get the next timestamp and then repeat step 4.\\n6. Repeat until `rrule` no longer returns a timestamp.\\n\\nHowever, there was one major issue. The `rrule` object was [unpickable](https://docs.python.org/3.7/library/pickle.html#pickle-picklable). Further I realised, the `rrule` object was not a generator but an iterator instead. A workaround for this (a hack!) was to get the time when the function last executed and keep fetching the next timestamp from the `rrule` iterator until the next timestamp was greater than the current one. Since I no longer had to pickle the `rrule` object, I just stored the last executed timestamp in the database which, in my opinion, is a much cleaner solution and much more library agnostic. \\n\\nAlso, I didn't want to interfere with the usual way Celery works and wanted this flow to be introduced with as little custom code as possible. So, instead of creating a new task decorator, I preferred [Celery's task inheritence](http://docs.celeryproject.org/en/latest/userguide/tasks.html#task-inheritance) and created a base task class called `RepeatTask` which contained the entire logic for fetching the function, fetching the arguments and keyword arguments, executing the function, getting the next timestamp and then scheduling the task for next execution.\\n\\nI've added the installation and usage details in the [README](https://github.com/tejasjadhav/django-scheduler/blob/master/README.md) of the [repository](https://github.com/tejasjadhav/django-scheduler/). Please check it out. The library is still in alpha and yet to be published on PyPI.\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<p>Scheduler is a small task scheduling utility built for Django using Celery.</p>\n<p>A lot of interesting projects start by solving a simple but essential problems of some other major problem. So was the case with <a href=\"https://github.com/tejasjadhav/django-scheduler\">Scheduler</a>. At <a href=\"https://mpaani.com\">m.Paani</a>, I had similar such problem.</p>\n<h1 id=\"problemstatement\">Problem statement</h1>\n<p>I had to execute a task at specific intervals. At first, I tried the one and only, fan-favorite, <em>cronjob</em>. Luckily, Celery has something which does the exact same thing - <code>@periodic_task</code>. Just enter your cron rule and your job is done. Voila! Problem solved. Celebrations were too early and I just discovered a few scenarios which could not be done with cron jobs alone.</p>\n<p>To understand this, let's see how a complicated rule of our old, faithful cron looks like.</p>\n<pre><code class=\"language-cron\">5-30/3 */2 * 1,5,9 2\n</code></pre>\n<p>The above rule translates to,</p>\n<blockquote>\n<p>At every 3rd minute from 5 through 30 past every 2nd hour on Tuesday in January, May, and September. <small><a href=\"https://crontab.guru/\">crontab.guru</a>. You can check the interpretation of the above rule <a href=\"https://crontab.guru/#5-30/3_*/2_*_1,5,9_2_\">here</a>.</small></p>\n</blockquote>\n<p>This seems all nice and fair. However, I had some bizaare use cases.</p>\n<ol>\n<li>Task should execute every 2nd Friday</li>\n<li>Task should execute on second last day on every month</li>\n<li>Task should execute on every even day</li>\n</ol>\n<p>Cron rule for first is still manageable in some cases. For second, it is impossible. And for 3rd, it fails after every month with odd number of days (though the non-standard way of doing it is <code>0 0 2/2 * *</code>). After head banging for a day and countless Google searches, I just glanced at my <a href=\"https://play.google.com/store/apps/details?id=com.google.android.calendar&amp;hl=en\">calendar app</a> and saw some recurring events, like weekly sprints, month-end discussions, etc. When I tried to create one with a repetition pattern, I saw half a dozen of configurations. Initially, it seemed like some Google kinda stuff (of course, you can only expect such sophistications from a Google-like company). But, then I saw similar settings on <a href=\"https://wiki.gnome.org/Apps/Evolution\">Evolution</a>. To my utter surprise, I could edit the reccurence rules set for the event on Google Calendar, and then on the app, those changes got sync'd up. This commonality means that there's some practice or convention followed by both. After digging about it for some time, I hit the jackpot. It's called <em>Recurrence Rules</em> which is an actual <a href=\"https://tools.ietf.org/html/rfc2445\">standard set by the IEFT</a> (the gods behind everything related to internet including HTTP, LDAP, sockets, etc. You can check the list of standards they have in place <a href=\"https://www.rfc-editor.org/rfc-index.html\">here</a>.)</p>\n<h1 id=\"recurrencerulesrrule\">Recurrence rules <em>(RRULE)</em></h1>\n<p>They are similar to cron jobs. Like cron, they solve the problem of defining rules for programming date and time patterns. Unlike cron, RRULE is a complete <a href=\"https://blog.tejasjadhav.xyz/2016/06/06/domain-specific-languages-using-python-part-1/\">DSL</a> with limited grammar. You can stack multiple RRULEs to create an inclusion-exclusion pattern. Look at this example below,</p>\n<pre><code class=\"language-rrule\">RRULE:FREQ=DAILY;COUNT=5\n</code></pre>\n<p>The above rule executes every day for the next 5 days. Not amused, take another example,</p>\n<pre><code class=\"language-rrule\">RRULE:FREQ=MONTHLY;COUNT=3;BYDAY=-2MO\n</code></pre>\n<p>This rule executes every second last day of the month for the next 3 months. Sounds familiar? Yes, this solves my second use case too.</p>\n<pre><code class=\"language-rrule\">RRULE:FREQ=DAILY;INTERVAL=2;BYSETPOS=2\n</code></pre>\n<h1 id=\"implementation\">Implementation</h1>\n<p>One by one, all my usecases were handled by RRULEs. But building a complete RRULE parser in Python is a prodigious chore. I had written an article about writing DSLs in Python a while back which you may refer to understand how much does it take to build a basic DSL. This was just too much for me to do. I almost settled for cronjobs again when I realised that the <a href=\"https://pypi.python.org/pypi/python-dateutil\"><code>python-dateutil</code></a> library has something already built related to RRULEs. Oh yes! They had built an RRULE parser (<a href=\"https://dateutil.readthedocs.io/en/stable/rrule.html\"><code>dateutil.rrule</code></a>) which, in fact, also has a Python API giving an even greater control of the individual elements of the RRULE. Such a sweet delight!</p>\n<p>The library has a function <code>dateutil.rrule.rrulestr</code> which converts a raw RRULE string into a <code>rrule</code> object. The best part about this object is, some parameters of the RRULE can be changed directly by modifying the object properties, like the <code>dtstart</code> parameter. Also, the best part is, the <code>rrule</code> object is a generator, which means I can iterate over it and it will give me the next timestamp in the sequence. Overall, this utility provided the perfect suite for managing RRULEs.</p>\n<p>Th initial idea for flow was,</p>\n<ol>\n<li>Get the RRULEs from the database defined by the user</li>\n<li>Build the <code>rrule</code> object</li>\n<li>Get the next timestamp in the sequence</li>\n<li>Pickle the <code>rrule</code> object and store it in the database and execute the function at the specified timestamp using the <code>eta</code> argument in Celery's <code>apply_async</code> function.</li>\n<li>When the function gets executed, unpickle the <code>rrule</code> object, get the next timestamp and then repeat step 4.</li>\n<li>Repeat until <code>rrule</code> no longer returns a timestamp.</li>\n</ol>\n<p>However, there was one major issue. The <code>rrule</code> object was <a href=\"https://docs.python.org/3.7/library/pickle.html#pickle-picklable\">unpickable</a>. Further I realised, the <code>rrule</code> object was not a generator but an iterator instead. A workaround for this (a hack!) was to get the time when the function last executed and keep fetching the next timestamp from the <code>rrule</code> iterator until the next timestamp was greater than the current one. Since I no longer had to pickle the <code>rrule</code> object, I just stored the last executed timestamp in the database which, in my opinion, is a much cleaner solution and much more library agnostic.</p>\n<p>Also, I didn't want to interfere with the usual way Celery works and wanted this flow to be introduced with as little custom code as possible. So, instead of creating a new task decorator, I preferred <a href=\"http://docs.celeryproject.org/en/latest/userguide/tasks.html#task-inheritance\">Celery's task inheritence</a> and created a base task class called <code>RepeatTask</code> which contained the entire logic for fetching the function, fetching the arguments and keyword arguments, executing the function, getting the next timestamp and then scheduling the task for next execution.</p>\n<p>I've added the installation and usage details in the <a href=\"https://github.com/tejasjadhav/django-scheduler/blob/master/README.md\">README</a> of the <a href=\"https://github.com/tejasjadhav/django-scheduler/\">repository</a>. Please check it out. The library is still in alpha and yet to be published on PyPI.</p>\n","comment_id":"5a8062e16f29f30a92a88d2e","plaintext":"Scheduler is a small task scheduling utility built for Django using Celery.\n\nA lot of interesting projects start by solving a simple but essential problems\nof some other major problem. So was the case with Scheduler\n[https://github.com/tejasjadhav/django-scheduler]. At m.Paani\n[https://mpaani.com], I had similar such problem.\n\nProblem statement\nI had to execute a task at specific intervals. At first, I tried the one and\nonly, fan-favorite, cronjob. Luckily, Celery has something which does the exact\nsame thing - @periodic_task. Just enter your cron rule and your job is done.\nVoila! Problem solved. Celebrations were too early and I just discovered a few\nscenarios which could not be done with cron jobs alone.\n\nTo understand this, let's see how a complicated rule of our old, faithful cron\nlooks like.\n\n5-30/3 */2 * 1,5,9 2\n\n\nThe above rule translates to,\n\nAt every 3rd minute from 5 through 30 past every 2nd hour on Tuesday in January,\nMay, and September. crontab.guru [https://crontab.guru/]. You can check the\ninterpretation of the above rule here.\n\nThis seems all nice and fair. However, I had some bizaare use cases.\n\n 1. Task should execute every 2nd Friday\n 2. Task should execute on second last day on every month\n 3. Task should execute on every even day\n\nCron rule for first is still manageable in some cases. For second, it is\nimpossible. And for 3rd, it fails after every month with odd number of days\n(though the non-standard way of doing it is 0 0 2/2 * *). After head banging for\na day and countless Google searches, I just glanced at my calendar app\n[https://play.google.com/store/apps/details?id=com.google.android.calendar&hl=en] \n and saw some recurring events, like weekly sprints, month-end discussions, etc.\nWhen I tried to create one with a repetition pattern, I saw half a dozen of\nconfigurations. Initially, it seemed like some Google kinda stuff (of course,\nyou can only expect such sophistications from a Google-like company). But, then\nI saw similar settings on Evolution [https://wiki.gnome.org/Apps/Evolution]. To\nmy utter surprise, I could edit the reccurence rules set for the event on Google\nCalendar, and then on the app, those changes got sync'd up. This commonality\nmeans that there's some practice or convention followed by both. After digging\nabout it for some time, I hit the jackpot. It's called Recurrence Rules  which\nis an actual standard set by the IEFT [https://tools.ietf.org/html/rfc2445] \n(the gods behind everything related to internet including HTTP, LDAP, sockets,\netc. You can check the list of standards they have in place here\n[https://www.rfc-editor.org/rfc-index.html].)\n\nRecurrence rules (RRULE)\nThey are similar to cron jobs. Like cron, they solve the problem of defining\nrules for programming date and time patterns. Unlike cron, RRULE is a complete \nDSL\n[https://blog.tejasjadhav.xyz/2016/06/06/domain-specific-languages-using-python-part-1/] \n with limited grammar. You can stack multiple RRULEs to create an\ninclusion-exclusion pattern. Look at this example below,\n\nRRULE:FREQ=DAILY;COUNT=5\n\n\nThe above rule executes every day for the next 5 days. Not amused, take another\nexample,\n\nRRULE:FREQ=MONTHLY;COUNT=3;BYDAY=-2MO\n\n\nThis rule executes every second last day of the month for the next 3 months.\nSounds familiar? Yes, this solves my second use case too.\n\nRRULE:FREQ=DAILY;INTERVAL=2;BYSETPOS=2\n\n\nImplementation\nOne by one, all my usecases were handled by RRULEs. But building a complete\nRRULE parser in Python is a prodigious chore. I had written an article about\nwriting DSLs in Python a while back which you may refer to understand how much\ndoes it take to build a basic DSL. This was just too much for me to do. I almost\nsettled for cronjobs again when I realised that the python-dateutil\n[https://pypi.python.org/pypi/python-dateutil]  library has something already\nbuilt related to RRULEs. Oh yes! They had built an RRULE parser (dateutil.rrule\n[https://dateutil.readthedocs.io/en/stable/rrule.html]) which, in fact, also has\na Python API giving an even greater control of the individual elements of the\nRRULE. Such a sweet delight!\n\nThe library has a function dateutil.rrule.rrulestr  which converts a raw RRULE\nstring into a rrule  object. The best part about this object is, some parameters\nof the RRULE can be changed directly by modifying the object properties, like\nthe dtstart  parameter. Also, the best part is, the rrule  object is a\ngenerator, which means I can iterate over it and it will give me the next\ntimestamp in the sequence. Overall, this utility provided the perfect suite for\nmanaging RRULEs.\n\nTh initial idea for flow was,\n\n 1. Get the RRULEs from the database defined by the user\n 2. Build the rrule  object\n 3. Get the next timestamp in the sequence\n 4. Pickle the rrule  object and store it in the database and execute the\n    function at the specified timestamp using the eta  argument in Celery's \n    apply_async  function.\n 5. When the function gets executed, unpickle the rrule  object, get the next\n    timestamp and then repeat step 4.\n 6. Repeat until rrule  no longer returns a timestamp.\n\nHowever, there was one major issue. The rrule  object was unpickable. Further I\nrealised, the rrule  object was not a generator but an iterator instead. A\nworkaround for this (a hack!) was to get the time when the function last\nexecuted and keep fetching the next timestamp from the rrule  iterator until the\nnext timestamp was greater than the current one. Since I no longer had to pickle\nthe rrule  object, I just stored the last executed timestamp in the database\nwhich, in my opinion, is a much cleaner solution and much more library agnostic.\n\nAlso, I didn't want to interfere with the usual way Celery works and wanted this\nflow to be introduced with as little custom code as possible. So, instead of\ncreating a new task decorator, I preferred Celery's task inheritence  and\ncreated a base task class called RepeatTask  which contained the entire logic\nfor fetching the function, fetching the arguments and keyword arguments,\nexecuting the function, getting the next timestamp and then scheduling the task\nfor next execution.\n\nI've added the installation and usage details in the README\n[https://github.com/tejasjadhav/django-scheduler/blob/master/README.md]  of the \nrepository [https://github.com/tejasjadhav/django-scheduler/]. Please check it\nout. The library is still in alpha and yet to be published on PyPI.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-02-11 15:36:01","updated_at":"2018-11-25 08:25:41","published_at":"2018-11-25 08:24:52","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5c0c1e7aabc169173fada4ca","uuid":"872a330c-ab94-4253-bf66-23c1a4d38d08","title":"Skypiea: The epitome of adventure","slug":"skypiea-the-epitome-of-adventure","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=2sdORk7V-Do\",\"html\":\"<iframe width=\\\"480\\\" height=\\\"270\\\" src=\\\"https://www.youtube.com/embed/2sdORk7V-Do?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\",\"type\":\"video\",\"caption\":\"Craftsdwarf's video highlights one the core reasons why Skypiea is so amazing\"}],[\"hr\",{}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.youtube.com/channel/UCMG_DhlUf6UXgSaFfS6JD1g\"]],[\"a\",[\"href\",\"https://www.youtube.com/watch?v=2sdORk7V-Do\"]],[\"strong\"],[\"em\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Have you ever read a fantasy story which was so amazing that you regretted not being a part of? For me, it's Skypiea from One Piece.\"]]],[1,\"p\",[[0,[],0,\"I am fan of J. R. R. Tolkien and his world building prowess. If you thought Lord of the Rings was detailed enough, wait until you read Silmarillion which talks about creation of Arda (the world of LOTR), its mythology, revelations of mighty characters and their lineages (House of Beor, Noldorian elves, Numenors, etc.), history of all evil (Morgoth, Balrogs, Dragons, etc.) and the consequential story of the Silmarils. I was always in awe with the depth as well as the breadth of Tolkien's work. Then, around 3 years back, I started watching One Piece by Eiichiro Oda. I wasn't impressed at first but, after the Arlong Park arc, I began to acknowledge the character building and story telling in One Piece.\"]]],[1,\"p\",[[0,[],0,\"Then came Skypiea. I still consider it as Oda's finest work in terms of world building. You can check out \"],[0,[0],1,\"Craftsdwarf\"],[0,[],0,\"'s \"],[0,[1],1,\"video\"],[0,[],0,\" which delineates how impressively Skypiea was constructed.\"]]],[10,0],[1,\"p\",[[0,[],0,\"I will discuss this in two parts. First I will explain what makes this one so special and second, I will highlight a few amazing moments from the arcs.\"]]],[10,1],[1,\"blockquote\",[[0,[2],1,\"SPOILER ALERT:\"],[0,[],0,\" I will be exploring a lot of One Piece content. If you have never watched One Piece before, I would strongly suggest at least finishing till the Skypiea arc before reading on. You can continue at your own risk, if you want to.\"]]],[10,2],[1,\"h1\",[[0,[],0,\"What made Skypiea special\"]]],[1,\"h2\",[[0,[],0,\"The build up gives us mysteries to ponder over\"]]],[1,\"p\",[[0,[],0,\"The Sky Island saga is build up of two arcs - Jaya arc and Skypiea arc. Though Skypiea is where all the thrill happens, it is the Jaya arc which I appreciate the most. I will just highlight a few points here,\"]]],[1,\"h3\",[[0,[],0,\"Lot of major character introductions \"]]],[1,\"p\",[[0,[],0,\"First comes Robin aka \"],[0,[3],1,\"Miss All Sunday\"],[0,[],0,\", the villain from the Alabasta arc and Crocodile's second in command (I guess). For the first time, we see an antagonist willingly switching sides and getting into the main crew. Though her introduction and initial interaction with the crew members is hilarious, there's still an air of mystery around her. An archeologist and an assassin with a bounty of 79 million berries at a mere age of eight, she's definitely one of the most powerful crew members whose true strength is yet to be revealed.\"]]],[1,\"p\",[[0,[],0,\"Then comes the revelations of the most interesting pirate group in the entire One Piece universe. An amazing sniper who manages to shoot down a bird not even visible to human eye, a mad wrestler who plummets even the most hardened pirates on the island, an old sick man who offers explosive apples to people, and a big fat guy who talks about fate and shares Luffy's idea of pursuing dreams and not giving up. Who would know these guys would dramatically change the entire course of the One Piece world in future?\"]]],[1,\"p\",[[0,[],0,\"We further get to know about a guy named Montblanc Noland. He was a botanist and an adventurer who had explored the whole world. His adventures were so thrilling and captivating that it was difficult to tell apart whether he was lying or not. His death is also one of the most tragic ones wherein he gets executed by his king for lying about the gold treasure on Jaya island. Montblanc Noland would eventually become one of the most referenced characters in the story.\"]]],[1,\"h3\",[[0,[],0,\"Geographical phenomena\"]]],[1,\"p\",[[0,[],0,\"In the entire series so far, no arc has ever explored so much about the geographical aspects of the One Piece world than this one. Let's talk about a few of these concepts.\"]]],[3,\"ul\",[[[0,[2],1,\"Knock-up streams:\"],[0,[],0,\" When water pockets trapped under sea heat up due to geothermal heat, it boils and once enough pressure accumulates, it causes a violent undersea explosion. The impact can propagate to the surface and shoot huge water column into the sky. I loved this simple explanation for such a fictional phenomenon and it looks plausible.\"]],[[0,[2],1,\"Island clouds:\"],[0,[],0,\" When a sea stone element is trapped inside water vapor, it forms island cloud. Depending on its density, it either forms an island cloud or a sea cloud. The fact that it contains sea stone element makes up a good explanation why these clouds are sturdy enough to bear the weight of the sky islands and also why devil fruit users feel powerless when they \\\"drown\\\" in the sea cloud.\"]],[[0,[2],1,\"Sky island biology:\"],[0,[],0,\" Owing to far lesser air pressure, any being coming from the ground experiences initial difficulties especially adjusting to this new environment. Also, beings on Jaya which landed on Sky Island four hundred years back got adapted to this new and thinner atmosphere and instead got inflated - birds, fish, trees (though I wonder why the Shandians didn't get big).\"]],[]]],[1,\"h3\",[[0,[],0,\"Lots of areas are left open to be explored afterwards\"]]],[1,\"p\",[[0,[],0,\"Jaya\"],[1,[],0,0],[0,[],0,\"Getting into the clouds\"],[1,[],0,1],[0,[],0,\"Exploration\"]]]]}","html":"<p>Have you ever read a fantasy story which was so amazing that you regretted not being a part of? For me, it's Skypiea from One Piece.</p><p>I am fan of J. R. R. Tolkien and his world building prowess. If you thought Lord of the Rings was detailed enough, wait until you read Silmarillion which talks about creation of Arda (the world of LOTR), its mythology, revelations of mighty characters and their lineages (House of Beor, Noldorian elves, Numenors, etc.), history of all evil (Morgoth, Balrogs, Dragons, etc.) and the consequential story of the Silmarils. I was always in awe with the depth as well as the breadth of Tolkien's work. Then, around 3 years back, I started watching One Piece by Eiichiro Oda. I wasn't impressed at first but, after the Arlong Park arc, I began to acknowledge the character building and story telling in One Piece.</p><p>Then came Skypiea. I still consider it as Oda's finest work in terms of world building. You can check out <a href=\"https://www.youtube.com/channel/UCMG_DhlUf6UXgSaFfS6JD1g\">Craftsdwarf</a>'s <a href=\"https://www.youtube.com/watch?v=2sdORk7V-Do\">video</a> which delineates how impressively Skypiea was constructed.</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card kg-card-hascaption\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/2sdORk7V-Do?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe><figcaption>Craftsdwarf's video highlights one the core reasons why Skypiea is so amazing</figcaption></figure><!--kg-card-end: embed--><p>I will discuss this in two parts. First I will explain what makes this one so special and second, I will highlight a few amazing moments from the arcs.</p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><blockquote><strong>SPOILER ALERT:</strong> I will be exploring a lot of One Piece content. If you have never watched One Piece before, I would strongly suggest at least finishing till the Skypiea arc before reading on. You can continue at your own risk, if you want to.</blockquote><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><h1 id=\"what-made-skypiea-special\">What made Skypiea special</h1><h2 id=\"the-build-up-gives-us-mysteries-to-ponder-over\">The build up gives us mysteries to ponder over</h2><p>The Sky Island saga is build up of two arcs - Jaya arc and Skypiea arc. Though Skypiea is where all the thrill happens, it is the Jaya arc which I appreciate the most. I will just highlight a few points here,</p><h3 id=\"lot-of-major-character-introductions\">Lot of major character introductions </h3><p>First comes Robin aka <em>Miss All Sunday</em>, the villain from the Alabasta arc and Crocodile's second in command (I guess). For the first time, we see an antagonist willingly switching sides and getting into the main crew. Though her introduction and initial interaction with the crew members is hilarious, there's still an air of mystery around her. An archeologist and an assassin with a bounty of 79 million berries at a mere age of eight, she's definitely one of the most powerful crew members whose true strength is yet to be revealed.</p><p>Then comes the revelations of the most interesting pirate group in the entire One Piece universe. An amazing sniper who manages to shoot down a bird not even visible to human eye, a mad wrestler who plummets even the most hardened pirates on the island, an old sick man who offers explosive apples to people, and a big fat guy who talks about fate and shares Luffy's idea of pursuing dreams and not giving up. Who would know these guys would dramatically change the entire course of the One Piece world in future?</p><p>We further get to know about a guy named Montblanc Noland. He was a botanist and an adventurer who had explored the whole world. His adventures were so thrilling and captivating that it was difficult to tell apart whether he was lying or not. His death is also one of the most tragic ones wherein he gets executed by his king for lying about the gold treasure on Jaya island. Montblanc Noland would eventually become one of the most referenced characters in the story.</p><h3 id=\"geographical-phenomena\">Geographical phenomena</h3><p>In the entire series so far, no arc has ever explored so much about the geographical aspects of the One Piece world than this one. Let's talk about a few of these concepts.</p><ul><li><strong>Knock-up streams:</strong> When water pockets trapped under sea heat up due to geothermal heat, it boils and once enough pressure accumulates, it causes a violent undersea explosion. The impact can propagate to the surface and shoot huge water column into the sky. I loved this simple explanation for such a fictional phenomenon and it looks plausible.</li><li><strong>Island clouds:</strong> When a sea stone element is trapped inside water vapor, it forms island cloud. Depending on its density, it either forms an island cloud or a sea cloud. The fact that it contains sea stone element makes up a good explanation why these clouds are sturdy enough to bear the weight of the sky islands and also why devil fruit users feel powerless when they \"drown\" in the sea cloud.</li><li><strong>Sky island biology:</strong> Owing to far lesser air pressure, any being coming from the ground experiences initial difficulties especially adjusting to this new environment. Also, beings on Jaya which landed on Sky Island four hundred years back got adapted to this new and thinner atmosphere and instead got inflated - birds, fish, trees (though I wonder why the Shandians didn't get big).</li><li></li></ul><h3 id=\"lots-of-areas-are-left-open-to-be-explored-afterwards\">Lots of areas are left open to be explored afterwards</h3><p>Jaya<br>Getting into the clouds<br>Exploration</p>","comment_id":"5ae5d4b437e4922b800f119b","plaintext":"Have you ever read a fantasy story which was so amazing that you regretted not\nbeing a part of? For me, it's Skypiea from One Piece.\n\nI am fan of J. R. R. Tolkien and his world building prowess. If you thought Lord\nof the Rings was detailed enough, wait until you read Silmarillion which talks\nabout creation of Arda (the world of LOTR), its mythology, revelations of mighty\ncharacters and their lineages (House of Beor, Noldorian elves, Numenors, etc.),\nhistory of all evil (Morgoth, Balrogs, Dragons, etc.) and the consequential\nstory of the Silmarils. I was always in awe with the depth as well as the\nbreadth of Tolkien's work. Then, around 3 years back, I started watching One\nPiece by Eiichiro Oda. I wasn't impressed at first but, after the Arlong Park\narc, I began to acknowledge the character building and story telling in One\nPiece.\n\nThen came Skypiea. I still consider it as Oda's finest work in terms of world\nbuilding. You can check out Craftsdwarf\n[https://www.youtube.com/channel/UCMG_DhlUf6UXgSaFfS6JD1g]'s video\n[https://www.youtube.com/watch?v=2sdORk7V-Do]  which delineates how impressively\nSkypiea was constructed.\n\nCraftsdwarf's video highlights one the core reasons why Skypiea is so amazingI\nwill discuss this in two parts. First I will explain what makes this one so\nspecial and second, I will highlight a few amazing moments from the arcs.\n\n\n--------------------------------------------------------------------------------\n\n> SPOILER ALERT:  I will be exploring a lot of One Piece content. If you have\nnever watched One Piece before, I would strongly suggest at least finishing till\nthe Skypiea arc before reading on. You can continue at your own risk, if you\nwant to.\n\n--------------------------------------------------------------------------------\n\nWhat made Skypiea special\nThe build up gives us mysteries to ponder over\nThe Sky Island saga is build up of two arcs - Jaya arc and Skypiea arc. Though\nSkypiea is where all the thrill happens, it is the Jaya arc which I appreciate\nthe most. I will just highlight a few points here,\n\nLot of major character introductions \nFirst comes Robin aka Miss All Sunday, the villain from the Alabasta arc and\nCrocodile's second in command (I guess). For the first time, we see an\nantagonist willingly switching sides and getting into the main crew. Though her\nintroduction and initial interaction with the crew members is hilarious, there's\nstill an air of mystery around her. An archeologist and an assassin with a\nbounty of 79 million berries at a mere age of eight, she's definitely one of the\nmost powerful crew members whose true strength is yet to be revealed.\n\nThen comes the revelations of the most interesting pirate group in the entire\nOne Piece universe. An amazing sniper who manages to shoot down a bird not even\nvisible to human eye, a mad wrestler who plummets even the most hardened pirates\non the island, an old sick man who offers explosive apples to people, and a big\nfat guy who talks about fate and shares Luffy's idea of pursuing dreams and not\ngiving up. Who would know these guys would dramatically change the entire course\nof the One Piece world in future?\n\nWe further get to know about a guy named Montblanc Noland. He was a botanist and\nan adventurer who had explored the whole world. His adventures were so thrilling\nand captivating that it was difficult to tell apart whether he was lying or not.\nHis death is also one of the most tragic ones wherein he gets executed by his\nking for lying about the gold treasure on Jaya island. Montblanc Noland would\neventually become one of the most referenced characters in the story.\n\nGeographical phenomena\nIn the entire series so far, no arc has ever explored so much about the\ngeographical aspects of the One Piece world than this one. Let's talk about a\nfew of these concepts.\n\n * Knock-up streams:  When water pockets trapped under sea heat up due to\n   geothermal heat, it boils and once enough pressure accumulates, it causes a\n   violent undersea explosion. The impact can propagate to the surface and shoot\n   huge water column into the sky. I loved this simple explanation for such a\n   fictional phenomenon and it looks plausible.\n * Island clouds:  When a sea stone element is trapped inside water vapor, it\n   forms island cloud. Depending on its density, it either forms an island cloud\n   or a sea cloud. The fact that it contains sea stone element makes up a good\n   explanation why these clouds are sturdy enough to bear the weight of the sky\n   islands and also why devil fruit users feel powerless when they \"drown\" in\n   the sea cloud.\n * Sky island biology:  Owing to far lesser air pressure, any being coming from\n   the ground experiences initial difficulties especially adjusting to this new\n   environment. Also, beings on Jaya which landed on Sky Island four hundred\n   years back got adapted to this new and thinner atmosphere and instead got\n   inflated - birds, fish, trees (though I wonder why the Shandians didn't get\n   big).\n * \n\nLots of areas are left open to be explored afterwards\nJaya\nGetting into the clouds\nExploration","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-04-29 14:20:36","updated_at":"2019-06-05 16:58:12","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5c0c1e7aabc169173fada4cb","uuid":"7277a5ae-cacc-4bc6-a6ae-3d2a2715543d","title":"Squashing bugs: When datetime comparisons go wrong","slug":"squashing-bugs-when-datetime-comparisons-go-wrong","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{}],[\"hr\",{}],[\"html\",{\"html\":\"<pre><code class=\\\"language-python line-numbers\\\">from datetime import datetime, time, date\\n\\nfrom dateutil.relativedelta import relativedelta\\n\\ndef get_next_slot(work_timings, duration):\\n    start_hour, end_hour = map(int, work_timings.split('-'))\\n    start_datetime = datetime.combine(date.today(), time(hour=start_hour))\\n    end_datetime = datetime.combine(date.today(), time(hour=end_hour))\\n    slot = relativedelta(minutes=duration)\\n\\n    while start_datetime.time() <= end_datetime.time():\\n        end_slot = start_datetime + relativedelta(minutes=duration)\\n\\n        yield start_datetime.time(), end_slot.time()\\n        start_datetime = end_slot</code></pre>\\n<p>\\n    <small><strong>NOTE:</strong> The above snippet is not the exact piece of code that was causing the issue. This is a workable example written from the memory I had of that incident.</small>\\n</p>\"}],[\"markdown\",{\"markdown\":\"```python\\n(datetime.time(9, 0), datetime.time(9, 30))\\n(datetime.time(9, 30), datetime.time(10, 0))\\n(datetime.time(10, 0), datetime.time(10, 30))\\n(datetime.time(10, 30), datetime.time(11, 0))\\n(datetime.time(11, 0), datetime.time(11, 30))\\n(datetime.time(11, 30), datetime.time(12, 0))\\n(datetime.time(12, 0), datetime.time(12, 30))\\n(datetime.time(12, 30), datetime.time(13, 0))\\n(datetime.time(13, 0), datetime.time(13, 30))\\n(datetime.time(13, 30), datetime.time(14, 0))\\n(datetime.time(14, 0), datetime.time(14, 30))\\n(datetime.time(14, 30), datetime.time(15, 0))\\n(datetime.time(15, 0), datetime.time(15, 30))\\n(datetime.time(15, 30), datetime.time(16, 0))\\n(datetime.time(16, 0), datetime.time(16, 30))\\n(datetime.time(16, 30), datetime.time(17, 0))\\n(datetime.time(17, 0), datetime.time(17, 30))\\n(datetime.time(17, 30), datetime.time(18, 0))\\n(datetime.time(18, 0), datetime.time(18, 30))\\n```\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.linkedin.com/company/localoye/\"]],[\"em\"],[\"a\",[\"href\",\"https://www.djangoproject.com/\"]],[\"a\",[\"href\",\"https://www.mysql.com/\"]],[\"a\",[\"href\",\"https://danielkummer.github.io/git-flow-cheatsheet/\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man1/top.1.html\"]],[\"code\"],[\"a\",[\"href\",\"https://fabric.io/kits/android/crashlytics\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"This is a debugging story at my first job at \"],[0,[0],1,\"LocalOye\"],[0,[],0,\", where we encountered a bug which I still consider to be one of the best I've ever encountered.\"]]],[10,0],[1,\"h1\",[[0,[],0,\"Background\"]]],[1,\"p\",[[0,[],0,\"LocalOye was a mass-market services aggregator startup (now shutdown). We connected the service providers (plumbers, electricians, carpenters, yoga trainers, etc.) to the consumers through our app. \"]]],[1,\"p\",[[0,[],0,\"Like all tech startups in their early booming days, ours too was on a feature spree. We had around half a dozen of major features rolling out in a single release. We used to call these as \"],[0,[1],1,\"big bang releases\"],[0,[],0,\". Our tech stack was \"],[0,[2],1,\"Django\"],[0,[],0,\" with \"],[0,[3],1,\"MySQL\"],[0,[],0,\" and the entire system was split into a bunch of microservices.\"]]],[1,\"p\",[[0,[],0,\"We were rolling out a bunch of features, but for sake brevity, let's just focus on the one that caused the issue. When booking for an appointment for a service, the customer has to answer a bunch of questions including the type of service, location, cost range, timing, etc. We introduced something called as variable time slots where providers can define their own time slots for the whole day, assign the time range they will be working in and the size of a time slot per customer.\"]]],[1,\"p\",[[0,[],0,\"There were around 19 \"],[0,[4],1,\"feature branches\"],[0,[],0,\" written by our team of 6 backend engineers, which were supposed to be merged and pushed on production and I was given this messy work. After fighting the nightmarish merge conflicts, last minute fixes, syntax errors (on staging!), cyclic dependencies and migration conflicts, I somehow managed to get it all in one branch. It was also my longest day at work (37 hours, though I'm no longer proud of this achievement). Yet we were on an ass-on-fire situation because the deployment was still not done.\"]]],[1,\"p\",[[0,[],0,\"Finally, the next day we got a green flag from QA and we're ready to deploy. Like all our major releases, this was gonna go on production at night. We still didn't have CI/CD in place, so all deployments were manual (login to the instance, pull the code, restart server). We decided the deployment to be done at around 4 AM since the load was minimal and if anything goes haywire, we had minimal loss. We had stayed back in the office including the backend team, frontend team, our backend lead (\"],[0,[1],1,\"Gauri\"],[0,[],0,\") and head of technology (\"],[0,[1],1,\"Vivek\"],[0,[],0,\"). \"]]],[1,\"p\",[[0,[],0,\"The deployment happened at around 6 AM and we did a basic test whether everything was working fine. It seemed the deployment was a success. We felt relieved! Everyone was almost half asleep at this point and were really happy that they finally got this release done and now they can cozily lay back on their beds and enjoy their well deserved sleep. I was particularly a zombie at this point since I just had a 7 hour sleep after that humongous 37 hour stint and I was up again for 16 hours now. Soon everyone packed their bags and left one by one. Me and Gauri stayed back. While she wrote the \"],[0,[1],1,\"\\\"Deployment successful\\\"\"],[0,[],0,\" email, marking our product managers, business teams and CEO, I was busy closing my code editors, terminals, ticking off points on the deployment checklist and, finally, shutting down my laptop.\"]]],[10,1],[1,\"h1\",[[0,[],0,\"One by one, things fell apart\"]]],[1,\"p\",[[0,[],0,\"Everything was nice and happy and we decided to step down for a quick breakfast. While coming back, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" got a nice good morning call from \"],[0,[1],1,\"Vivek\"],[0,[],0,\" informing that he was getting API timeout errors on web. All AJAX calls to the server waited for 30 seconds (default for HTTP requests) and would return with a timeout error. We quickly headed back to the office, turned on our laptops and started monitoring our servers using the all time reliable Linux's \"],[0,[5],1,\"top\"],[0,[],0,\"! One of the servers that hosted our microserivce, which is responsible for reading data from server and contained most of the business logic, shot to 100% CPU. We waited for sometime, but it still didn't seem to settle. Since it affected all other microservices, we spent minimal time investigating and \"],[0,[1],1,\"Gauri\"],[0,[],0,\" just \"],[0,[6],1,\"kill -9\"],[0,[],0,\"'d  the service processes and spawned them again. We again monitored for 15-20 minutes. Nothing went wrong now. All seemed fine.\"]]],[1,\"p\",[[0,[],0,\"We thought that was some random one-off error. Might be some edge case. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called back \"],[0,[1],1,\"Vivek\"],[0,[],0,\" and notified him that the server was all fine and he should test again. After a quick test, \"],[0,[1],1,\"Vivek\"],[0,[],0,\" gave a confirmation that it was all okay now. We were relieved but super confused. In the end, we said \"],[0,[1],1,\"\\\"chuck it\\\"\"],[0,[],0,\" and moved on. By this time, our operations team and customer support team started coming to office one by one, astonished to see both of us still in office. It was 8 AM now.\"]]],[1,\"p\",[[0,[],0,\"Just when I closed my terminal, one of the guys from the operations came to our desk and informed that all the dashboards are empty. Nothing was showing up, these guys couldn't even open up a single service request on the dashboard. I went with him to investigate (using our beloved Chome Developer Tools) and found the same error \"],[0,[1],1,\"Vivek\"],[0,[],0,\" was getting earlier. APIs were timing out. I quickly ran to \"],[0,[1],1,\"Gauri\"],[0,[],0,\" and asked her to monitor the servers and bam! The CPU was again on 100%. Now I almost started freaking out. As a software engineer, I feel disgraced when something I build doesn't work and the end user is affected. I started thinking of all possible places where I could have gone wrong - \"],[0,[1],1,\"\\\"Perhaps the merge didn't end well. What if there's a cyclic dependency which is causing the Python interpreter to freak out? Maybe I removed some essential piece of code in merge conflicts which is causing this issue? Did internet just go off on Digital Ocean servers?\\\"\"],[0,[],0,\". And there stood \"],[0,[1],1,\"Gauri\"],[0,[],0,\", as calm as the sea, steadfast, neatly monitoring any patterns in this behavior and without even the slightest bit of stress on her face, and comforting me that there's nothing to panic and I should stay calm. She found that, not only the CPU went 100%, even the RAM usage slowly went from 15% to 78%! She again killed the processes and started again and everything went back to normal.\"]]],[1,\"p\",[[0,[],0,\"I was puzzled beyond imagination. My first thought was to review the all the code that went on production. Yes, all of it! All code in those 19 feature branches, which would amount to around 10K lines. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me to add logs everywhere - start and end of function body, API endpoints, RPC calls, etc. I quickly managed to do it, at least in the new code that was deployed. But we were running out of time. It was 9AM and people from other teams were arriving one by one only to find an occasional service disruption. At this point, we didn't even bother checking the \"],[0,[7],1,\"Crashlytics\"],[0,[],0,\" dashboard because even the app was getting the same timeout errors. Our main website opened with an empty header since that's where we displayed the service categories we provided, since the API for that too was getting timed out. The frequency of this disruption exacerbated as the day progressed and more and more users started using the app. \"]]],[1,\"p\",[[0,[],0,\"The thing is, no one had any idea what caused it. Being amateur developers, we made one of the most common beginner mistakes - insufficient logging. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called up everyone in the team to come to office as soon as they can and it as a \"],[0,[1],1,\"P0\"],[0,[],0,\" situation. Most of them were in their deep sleep at this point and the few who answered also started panicking like crazy. While everyone was on their way, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me the last thing I wanted to hear - \"],[0,[1],1,\"\\\"Let's rollback the release.\\\"\"],[0,[],0,\". This was even more disgraceful. Something that you built was so bad that it had to be taken down. The release was already delayed by three days and I didn't want to get it delayed any further. I resisted and asked for a bit more time. Seeing that I hadn't given on this hopeless situation, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" also decided to give me another hour and if nothing happens, she would rollback the release at 11AM.\"]]],[1,\"h1\",[[0,[],0,\"Finally, a ray of hope\"]]],[1,\"p\",[[0,[],0,\"After mindlessly testing and hopelessly trying to reproduce the issue on my local environment, I decided to test all the frontend apps on my machine. The first one that I had already setup on my laptop was the main website. I started randomly opening all the pages, tried creating a service request. Just when I tried creating a service request for some random category, the network request stalled and, for the first time in life, I was happy to see an error in browser console - \"],[0,[8],1,\"504 Gateway Timeout\"],[0,[],0,\". I screamed out \"],[0,[1],1,\"\\\"Gauri! I could reproduce the issue on my machine!\\\"\"],[0,[],0,\". I killed the server process, spawned it again, created the same request and the server timed out again. My happiness had no bounds at that time! By this time the other guys in our team also came in one by one and started maniacally glaring into their laptops, browsing through the code they wrote, nervously thinking whether their code was the culprit. Meanwhile, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was on her newly acquired routine on the production server - monitor, kill, spawn again, repeat.\"]]],[1,\"p\",[[0,[],0,\"But, then came a sudden twist. My fellow teammate tried created a service request on his machine and it worked. Some guy created one on staging and it worked. Hell, someone created one on production too and it worked! In a second, all my happiness got flushed out and I was back to stage one. To my utter disgusting surprise, even I couldn't reproduce it on my machine now. I almost surrendered and gave in for the idea of rolling back the release, but then I checked why it went 100% CPU for that specific case. I furiously kept hitting the back button on the browser until I reached that page where I was able to reproduce the issue. And voila! It went 100% again.\"]]],[1,\"p\",[[0,[],0,\"It was for the plumber category that the issue got reproduced. I tried to replicate it on staging, couldn't reproduce. I tried it on my teammate's machine, couldn't replicate it. Tried on production, went 100% again. I wanted to double check whether this was because of my request and not someone else's, I reproduced it 10 times in a row. And yes, it was reproduced exactly when I opened the plumber category page. I knew it was not an environment specific issue for sure. Meanwhile I had isolated the code block where this was happening and that's where I got the breakthrough.\"]]],[1,\"h1\",[[0,[],0,\"Digging into the code\"]]],[1,\"p\",[[0,[],0,\"While our investigation was still going on, it was well past 11AM now. I could glance at the other side where the operations team was seated to find them browsing Facebook, playing games, some busy doing work not related to the dashboard, some falling back to trusted old Excel sheets. Overall, it was a very depressing scene wherein the operations team and customer support teams weren't able to do their work because of some fuck up on our end. I felt really ashamed of myself as I was still not able to debug the issue.\"]]],[1,\"p\",[[0,[],0,\"While reading the relevant code, the problematic part was a function which looked  like this,\"]]],[10,2],[1,\"p\",[[0,[],0,\"A \"],[0,[6],1,\"while\"],[0,[],0,\" loop with an unclear loop invariant. What could possibly go wrong! But actually, nothing in this code was incorrect. The conditions were correct it would give right output for a lot of cases which I had generated in my mind. Let's say, for work timings \"],[0,[6],1,\"9-18\"],[0,[],0,\" (9AM in the morning till 6PM in the evening) and duration of \"],[0,[6],1,\"30\"],[0,[],0,\" minutes per slot, the above function would generate the following output,\"]]],[10,3],[1,\"p\",[[0,[],0,\"Then I looked up why it was failing for the plumber category. I checked the database and got the entry timeslot definitions. The work timings were \"],[0,[6],1,\"9-23\"],[0,[],0,\" (9AM in the morning till 11PM at night) and duration was \"],[0,[6],1,\"60\"],[0,[],0,\" minutes. I mentally evaluated the code and I still couldn't get what was happening  here. Meanwhile, the guy who had written this code was pulling his hair out trying to understand what's happening here while staring at my screen. Then it clicked! It was the biggest WTF moment of my life. I figured out why it failed and I started laughing hysterically. Everyone was astonished at first, giving me an eager look, waiting for me to stop laughing so that they get to know what the hell this issue really was. The guy who wrote the code started shaking me fiercely, \"],[0,[1],1,\"\\\"Tejas, what the hell happened? Tell me! What was the issue? Please tell me ASAP. Stop laughing, you moron!\\\"\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"I somehow caught my breath and regained by senses, and saw the entire section of the office was staring at me - our team, HR, product managers, a few guys from the operations team, marketing guys, and even our CEO - all of them waiting for that one answer. I quickly stabilized myself, looked at that helpless guy and started asking him simple date and time arithmetic,\"]]],[1,\"blockquote\",[[0,[8],1,\"Me:\"],[0,[],0,\" How much is 9 AM + 1 hour?\"],[1,[],0,0],[0,[8],1,\"Him:\"],[0,[],0,\" Stop this stupid thing. Tell me what happened!\"],[1,[],0,1],[0,[8],1,\"Me:\"],[0,[],0,\" You will figure out yourself. Just give me the answer.\"],[1,[],0,2],[0,[8],1,\"Him:\"],[0,[],0,\" 10AM\"],[1,[],0,3],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,4],[0,[8],1,\"Him:\"],[0,[],0,\" 11 AM.\"],[1,[],0,5],[0,[8],1,\"Me:\"],[0,[],0,\" Okay. What's 10PM  + 1 hour?\"],[1,[],0,6],[0,[8],1,\"Him:\"],[0,[],0,\" 11PM\"],[1,[],0,7],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,8],[0,[8],1,\"Him:\"],[0,[],0,\" 12AM.\"],[1,[],0,9],[0,[8],1,\"Me:\"],[0,[],0,\" No. In 24 hour format?\"],[1,[],0,10],[0,[8],1,\"Him:\"],[0,[],0,\" 0 hours. Wait! oh... fuck!\"],[1,[],0,11],[0,[8],1,\"Me:\"],[0,[],0,\" Yes! Python \"],[0,[6],1,\"time\"],[0,[],0,\" objects use 24-hour format instead of 12-hour format. And 0 hours is still less than 23 hours, which still satisfies the loop criteria. Since time is cyclic, this condition will always be true and thus your while loop becomes an infinite loop. Moreover, you're yielding the timeslots at each iteration which explains the slow rise in RAM usage, and infinite loop explains why CPU went 100%.\"]]],[1,\"p\",[[0,[],0,\"It was the biggest \"],[0,[1],1,\"'Aha'\"],[0,[],0,\" moment on the floor. I could see a lot of them holding their heads and some still processing what I explained. Of all, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was giving her widest smile. One by one I was giving an explanation to everyone what happened and how it became an infinite loop. The poor guy put his head down on the table thinking how he couldn't catch this one case and even he gave a smile in the end.\"]]],[1,\"p\",[[0,[],0,\"The reason it was never captured on his machine or on the staging server was because no one had tested that condition! Whereas, just the night before the deployment, I had dumped the production data for categories on my local database for testing out a few things. But I never tested the website, so it wasn't caught even on my machine.\"]]],[1,\"h1\",[[0,[],0,\"Resolution\"]]],[1,\"p\",[[0,[],0,\"It was \"],[0,[1],1,\"really\"],[0,[],0,\" simple. Just compare the \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"time\"],[0,[],0,\" objects so that at 12AM, the day also increments which no longer satisfies the loop conditions and the loop breaks out. \"]]],[1,\"p\",[[0,[],0,\"The change was quickly made, tested on the same category. This time it worked without blowing the CPU usage off the roof. I still didn't understand why did he prefer comparing \"],[0,[6],1,\"time\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects. But it's fine. The patch was pushed on production and it worked correctly now for that same category. All dashboards were up and working and everybody, after enjoying their little free time, were back to their work. It was 12PM by now. I was definitely a zombie at this point. I spend another few hours figuring out other such pieces in code along with other team members and finally left for home \"],[0,[1],1,\"early\"],[0,[],0,\" at 4PM.\"]]],[10,4],[1,\"h1\",[[0,[],0,\"Important takeaways\"]]],[3,\"ul\",[[[0,[],0,\"NEVER EVER DO BIG BANG RELEASES! Release incrementally, in small chunks. It's easier to find needle among a few sticks of hay than an entire haystack.\"]],[[0,[],0,\"Logging is crucial. Learn how to log. Though I personally would not recommend, but log at every checkpoint in the code. If feel you would be inundated with logs, use log levels (\"],[0,[1],1,\"DEBUG\"],[0,[],0,\", \"],[0,[1],1,\"INFO\"],[0,[],0,\", \"],[0,[1],1,\"WARNING\"],[0,[],0,\", \"],[0,[1],1,\"ERROR\"],[0,[],0,\") and configure it with environment flags.\"]],[[0,[],0,\" No matter how rigorous QA testing you do, some things still escape the eyes of all. We can't help it. But at least ensure that all the cases already defined by the business teams are fully covered in the tests.\"]],[[0,[],0,\"Software engineers are humans. They can't be right all the time. Neither can someone think of all possible edge cases that may arise in the code, let alone something that would be defined by the end user. Empathize them and understand that such issues are not because they are incompetent but rather something which was inevitable. Rather I would think of that incident this way - of the 10K+ lines of code that went on production, only one line was the culprit.\"]],[[0,[],0,\"To this day, I really appreciate \"],[0,[1],1,\"Gauri\"],[0,[],0,\"'s stand. She's very strict in maintaining code quality and business logic implementation, and scolded us a lot for our mistakes. But in that moment, she was the only one who was fighting for us against the whole company and gave us as much time as she could afford. Not only her, even our CEO was very relaxed and despite knowing that every minute that we spent debugging this issue costed him money, he still supported us and didn't freak out either. Things would have gone horribly wrong if it wasn't for them. As a manager, stressing out your teams in such situations just makes everything worse. The team needs someone who would shield them from everyone else while they just focus on fixing the issue.\"]]]]]}","html":"<p>This is a debugging story at my first job at <a href=\"https://www.linkedin.com/company/localoye/\">LocalOye</a>, where we encountered a bug which I still consider to be one of the best I've ever encountered.</p><hr><h1 id=\"background\">Background</h1><p>LocalOye was a mass-market services aggregator startup (now shutdown). We connected the service providers (plumbers, electricians, carpenters, yoga trainers, etc.) to the consumers through our app. </p><p>Like all tech startups in their early booming days, ours too was on a feature spree. We had around half a dozen of major features rolling out in a single release. We used to call these as <em>big bang releases</em>. Our tech stack was <a href=\"https://www.djangoproject.com/\">Django</a> with <a href=\"https://www.mysql.com/\">MySQL</a> and the entire system was split into a bunch of microservices.</p><p>We were rolling out a bunch of features, but for sake brevity, let's just focus on the one that caused the issue. When booking for an appointment for a service, the customer has to answer a bunch of questions including the type of service, location, cost range, timing, etc. We introduced something called as variable time slots where providers can define their own time slots for the whole day, assign the time range they will be working in and the size of a time slot per customer.</p><p>There were around 19 <a href=\"https://danielkummer.github.io/git-flow-cheatsheet/\">feature branches</a> written by our team of 6 backend engineers, which were supposed to be merged and pushed on production and I was given this messy work. After fighting the nightmarish merge conflicts, last minute fixes, syntax errors (on staging!), cyclic dependencies and migration conflicts, I somehow managed to get it all in one branch. It was also my longest day at work (37 hours, though I'm no longer proud of this achievement). Yet we were on an ass-on-fire situation because the deployment was still not done.</p><p>Finally, the next day we got a green flag from QA and we're ready to deploy. Like all our major releases, this was gonna go on production at night. We still didn't have CI/CD in place, so all deployments were manual (login to the instance, pull the code, restart server). We decided the deployment to be done at around 4 AM since the load was minimal and if anything goes haywire, we had minimal loss. We had stayed back in the office including the backend team, frontend team, our backend lead (<em>Gauri</em>) and head of technology (<em>Vivek</em>). </p><p>The deployment happened at around 6 AM and we did a basic test whether everything was working fine. It seemed the deployment was a success. We felt relieved! Everyone was almost half asleep at this point and were really happy that they finally got this release done and now they can cozily lay back on their beds and enjoy their well deserved sleep. I was particularly a zombie at this point since I just had a 7 hour sleep after that humongous 37 hour stint and I was up again for 16 hours now. Soon everyone packed their bags and left one by one. Me and Gauri stayed back. While she wrote the <em>\"Deployment successful\"</em> email, marking our product managers, business teams and CEO, I was busy closing my code editors, terminals, ticking off points on the deployment checklist and, finally, shutting down my laptop.</p><hr><h1 id=\"one-by-one-things-fell-apart\">One by one, things fell apart</h1><p>Everything was nice and happy and we decided to step down for a quick breakfast. While coming back, <em>Gauri</em> got a nice good morning call from <em>Vivek</em> informing that he was getting API timeout errors on web. All AJAX calls to the server waited for 30 seconds (default for HTTP requests) and would return with a timeout error. We quickly headed back to the office, turned on our laptops and started monitoring our servers using the all time reliable Linux's <a href=\"http://man7.org/linux/man-pages/man1/top.1.html\">top</a>! One of the servers that hosted our microserivce, which is responsible for reading data from server and contained most of the business logic, shot to 100% CPU. We waited for sometime, but it still didn't seem to settle. Since it affected all other microservices, we spent minimal time investigating and <em>Gauri</em> just <code>kill -9</code>'d  the service processes and spawned them again. We again monitored for 15-20 minutes. Nothing went wrong now. All seemed fine.</p><p>We thought that was some random one-off error. Might be some edge case. <em>Gauri</em> called back <em>Vivek</em> and notified him that the server was all fine and he should test again. After a quick test, <em>Vivek</em> gave a confirmation that it was all okay now. We were relieved but super confused. In the end, we said <em>\"chuck it\"</em> and moved on. By this time, our operations team and customer support team started coming to office one by one, astonished to see both of us still in office. It was 8 AM now.</p><p>Just when I closed my terminal, one of the guys from the operations came to our desk and informed that all the dashboards are empty. Nothing was showing up, these guys couldn't even open up a single service request on the dashboard. I went with him to investigate (using our beloved Chome Developer Tools) and found the same error <em>Vivek</em> was getting earlier. APIs were timing out. I quickly ran to <em>Gauri</em> and asked her to monitor the servers and bam! The CPU was again on 100%. Now I almost started freaking out. As a software engineer, I feel disgraced when something I build doesn't work and the end user is affected. I started thinking of all possible places where I could have gone wrong - <em>\"Perhaps the merge didn't end well. What if there's a cyclic dependency which is causing the Python interpreter to freak out? Maybe I removed some essential piece of code in merge conflicts which is causing this issue? Did internet just go off on Digital Ocean servers?\"</em>. And there stood <em>Gauri</em>, as calm as the sea, steadfast, neatly monitoring any patterns in this behavior and without even the slightest bit of stress on her face, and comforting me that there's nothing to panic and I should stay calm. She found that, not only the CPU went 100%, even the RAM usage slowly went from 15% to 78%! She again killed the processes and started again and everything went back to normal.</p><p>I was puzzled beyond imagination. My first thought was to review the all the code that went on production. Yes, all of it! All code in those 19 feature branches, which would amount to around 10K lines. <em>Gauri</em> told me to add logs everywhere - start and end of function body, API endpoints, RPC calls, etc. I quickly managed to do it, at least in the new code that was deployed. But we were running out of time. It was 9AM and people from other teams were arriving one by one only to find an occasional service disruption. At this point, we didn't even bother checking the <a href=\"https://fabric.io/kits/android/crashlytics\">Crashlytics</a> dashboard because even the app was getting the same timeout errors. Our main website opened with an empty header since that's where we displayed the service categories we provided, since the API for that too was getting timed out. The frequency of this disruption exacerbated as the day progressed and more and more users started using the app. </p><p>The thing is, no one had any idea what caused it. Being amateur developers, we made one of the most common beginner mistakes - insufficient logging. <em>Gauri</em> called up everyone in the team to come to office as soon as they can and it as a <em>P0</em> situation. Most of them were in their deep sleep at this point and the few who answered also started panicking like crazy. While everyone was on their way, <em>Gauri</em> told me the last thing I wanted to hear - <em>\"Let's rollback the release.\"</em>. This was even more disgraceful. Something that you built was so bad that it had to be taken down. The release was already delayed by three days and I didn't want to get it delayed any further. I resisted and asked for a bit more time. Seeing that I hadn't given on this hopeless situation, <em>Gauri</em> also decided to give me another hour and if nothing happens, she would rollback the release at 11AM.</p><h1 id=\"finally-a-ray-of-hope\">Finally, a ray of hope</h1><p>After mindlessly testing and hopelessly trying to reproduce the issue on my local environment, I decided to test all the frontend apps on my machine. The first one that I had already setup on my laptop was the main website. I started randomly opening all the pages, tried creating a service request. Just when I tried creating a service request for some random category, the network request stalled and, for the first time in life, I was happy to see an error in browser console - <strong>504 Gateway Timeout</strong>. I screamed out <em>\"Gauri! I could reproduce the issue on my machine!\"</em>. I killed the server process, spawned it again, created the same request and the server timed out again. My happiness had no bounds at that time! By this time the other guys in our team also came in one by one and started maniacally glaring into their laptops, browsing through the code they wrote, nervously thinking whether their code was the culprit. Meanwhile, <em>Gauri</em> was on her newly acquired routine on the production server - monitor, kill, spawn again, repeat.</p><p>But, then came a sudden twist. My fellow teammate tried created a service request on his machine and it worked. Some guy created one on staging and it worked. Hell, someone created one on production too and it worked! In a second, all my happiness got flushed out and I was back to stage one. To my utter disgusting surprise, even I couldn't reproduce it on my machine now. I almost surrendered and gave in for the idea of rolling back the release, but then I checked why it went 100% CPU for that specific case. I furiously kept hitting the back button on the browser until I reached that page where I was able to reproduce the issue. And voila! It went 100% again.</p><p>It was for the plumber category that the issue got reproduced. I tried to replicate it on staging, couldn't reproduce. I tried it on my teammate's machine, couldn't replicate it. Tried on production, went 100% again. I wanted to double check whether this was because of my request and not someone else's, I reproduced it 10 times in a row. And yes, it was reproduced exactly when I opened the plumber category page. I knew it was not an environment specific issue for sure. Meanwhile I had isolated the code block where this was happening and that's where I got the breakthrough.</p><h1 id=\"digging-into-the-code\">Digging into the code</h1><p>While our investigation was still going on, it was well past 11AM now. I could glance at the other side where the operations team was seated to find them browsing Facebook, playing games, some busy doing work not related to the dashboard, some falling back to trusted old Excel sheets. Overall, it was a very depressing scene wherein the operations team and customer support teams weren't able to do their work because of some fuck up on our end. I felt really ashamed of myself as I was still not able to debug the issue.</p><p>While reading the relevant code, the problematic part was a function which looked  like this,</p><pre><code class=\"language-python line-numbers\">from datetime import datetime, time, date\n\nfrom dateutil.relativedelta import relativedelta\n\ndef get_next_slot(work_timings, duration):\n    start_hour, end_hour = map(int, work_timings.split('-'))\n    start_datetime = datetime.combine(date.today(), time(hour=start_hour))\n    end_datetime = datetime.combine(date.today(), time(hour=end_hour))\n    slot = relativedelta(minutes=duration)\n\n    while start_datetime.time() <= end_datetime.time():\n        end_slot = start_datetime + relativedelta(minutes=duration)\n\n        yield start_datetime.time(), end_slot.time()\n        start_datetime = end_slot</code></pre>\n<p>\n    <small><strong>NOTE:</strong> The above snippet is not the exact piece of code that was causing the issue. This is a workable example written from the memory I had of that incident.</small>\n</p><p>A <code>while</code> loop with an unclear loop invariant. What could possibly go wrong! But actually, nothing in this code was incorrect. The conditions were correct it would give right output for a lot of cases which I had generated in my mind. Let's say, for work timings <code>9-18</code> (9AM in the morning till 6PM in the evening) and duration of <code>30</code> minutes per slot, the above function would generate the following output,</p><pre><code class=\"language-python\">(datetime.time(9, 0), datetime.time(9, 30))\n(datetime.time(9, 30), datetime.time(10, 0))\n(datetime.time(10, 0), datetime.time(10, 30))\n(datetime.time(10, 30), datetime.time(11, 0))\n(datetime.time(11, 0), datetime.time(11, 30))\n(datetime.time(11, 30), datetime.time(12, 0))\n(datetime.time(12, 0), datetime.time(12, 30))\n(datetime.time(12, 30), datetime.time(13, 0))\n(datetime.time(13, 0), datetime.time(13, 30))\n(datetime.time(13, 30), datetime.time(14, 0))\n(datetime.time(14, 0), datetime.time(14, 30))\n(datetime.time(14, 30), datetime.time(15, 0))\n(datetime.time(15, 0), datetime.time(15, 30))\n(datetime.time(15, 30), datetime.time(16, 0))\n(datetime.time(16, 0), datetime.time(16, 30))\n(datetime.time(16, 30), datetime.time(17, 0))\n(datetime.time(17, 0), datetime.time(17, 30))\n(datetime.time(17, 30), datetime.time(18, 0))\n(datetime.time(18, 0), datetime.time(18, 30))\n</code></pre>\n<p>Then I looked up why it was failing for the plumber category. I checked the database and got the entry timeslot definitions. The work timings were <code>9-23</code> (9AM in the morning till 11PM at night) and duration was <code>60</code> minutes. I mentally evaluated the code and I still couldn't get what was happening  here. Meanwhile, the guy who had written this code was pulling his hair out trying to understand what's happening here while staring at my screen. Then it clicked! It was the biggest WTF moment of my life. I figured out why it failed and I started laughing hysterically. Everyone was astonished at first, giving me an eager look, waiting for me to stop laughing so that they get to know what the hell this issue really was. The guy who wrote the code started shaking me fiercely, <em>\"Tejas, what the hell happened? Tell me! What was the issue? Please tell me ASAP. Stop laughing, you moron!\"</em>.</p><p>I somehow caught my breath and regained by senses, and saw the entire section of the office was staring at me - our team, HR, product managers, a few guys from the operations team, marketing guys, and even our CEO - all of them waiting for that one answer. I quickly stabilized myself, looked at that helpless guy and started asking him simple date and time arithmetic,</p><blockquote><strong>Me:</strong> How much is 9 AM + 1 hour?<br><strong>Him:</strong> Stop this stupid thing. Tell me what happened!<br><strong>Me:</strong> You will figure out yourself. Just give me the answer.<br><strong>Him:</strong> 10AM<br><strong>Me:</strong> +1 hour?<br><strong>Him:</strong> 11 AM.<br><strong>Me:</strong> Okay. What's 10PM  + 1 hour?<br><strong>Him:</strong> 11PM<br><strong>Me:</strong> +1 hour?<br><strong>Him:</strong> 12AM.<br><strong>Me:</strong> No. In 24 hour format?<br><strong>Him:</strong> 0 hours. Wait! oh... fuck!<br><strong>Me:</strong> Yes! Python <code>time</code> objects use 24-hour format instead of 12-hour format. And 0 hours is still less than 23 hours, which still satisfies the loop criteria. Since time is cyclic, this condition will always be true and thus your while loop becomes an infinite loop. Moreover, you're yielding the timeslots at each iteration which explains the slow rise in RAM usage, and infinite loop explains why CPU went 100%.</blockquote><p>It was the biggest <em>'Aha'</em> moment on the floor. I could see a lot of them holding their heads and some still processing what I explained. Of all, <em>Gauri</em> was giving her widest smile. One by one I was giving an explanation to everyone what happened and how it became an infinite loop. The poor guy put his head down on the table thinking how he couldn't catch this one case and even he gave a smile in the end.</p><p>The reason it was never captured on his machine or on the staging server was because no one had tested that condition! Whereas, just the night before the deployment, I had dumped the production data for categories on my local database for testing out a few things. But I never tested the website, so it wasn't caught even on my machine.</p><h1 id=\"resolution\">Resolution</h1><p>It was <em>really</em> simple. Just compare the <code>datetime</code> objects instead of <code>time</code> objects so that at 12AM, the day also increments which no longer satisfies the loop conditions and the loop breaks out. </p><p>The change was quickly made, tested on the same category. This time it worked without blowing the CPU usage off the roof. I still didn't understand why did he prefer comparing <code>time</code> objects instead of <code>datetime</code> objects. But it's fine. The patch was pushed on production and it worked correctly now for that same category. All dashboards were up and working and everybody, after enjoying their little free time, were back to their work. It was 12PM by now. I was definitely a zombie at this point. I spend another few hours figuring out other such pieces in code along with other team members and finally left for home <em>early</em> at 4PM.</p><hr><h1 id=\"important-takeaways\">Important takeaways</h1><ul><li>NEVER EVER DO BIG BANG RELEASES! Release incrementally, in small chunks. It's easier to find needle among a few sticks of hay than an entire haystack.</li><li>Logging is crucial. Learn how to log. Though I personally would not recommend, but log at every checkpoint in the code. If feel you would be inundated with logs, use log levels (<em>DEBUG</em>, <em>INFO</em>, <em>WARNING</em>, <em>ERROR</em>) and configure it with environment flags.</li><li> No matter how rigorous QA testing you do, some things still escape the eyes of all. We can't help it. But at least ensure that all the cases already defined by the business teams are fully covered in the tests.</li><li>Software engineers are humans. They can't be right all the time. Neither can someone think of all possible edge cases that may arise in the code, let alone something that would be defined by the end user. Empathize them and understand that such issues are not because they are incompetent but rather something which was inevitable. Rather I would think of that incident this way - of the 10K+ lines of code that went on production, only one line was the culprit.</li><li>To this day, I really appreciate <em>Gauri</em>'s stand. She's very strict in maintaining code quality and business logic implementation, and scolded us a lot for our mistakes. But in that moment, she was the only one who was fighting for us against the whole company and gave us as much time as she could afford. Not only her, even our CEO was very relaxed and despite knowing that every minute that we spent debugging this issue costed him money, he still supported us and didn't freak out either. Things would have gone horribly wrong if it wasn't for them. As a manager, stressing out your teams in such situations just makes everything worse. The team needs someone who would shield them from everyone else while they just focus on fixing the issue.</li></ul>","comment_id":"5c0951bd3cea8d0cdcdb6535","plaintext":"This is a debugging story at my first job at LocalOye\n[https://www.linkedin.com/company/localoye/], where we encountered a bug which I\nstill consider to be one of the best I've ever encountered.\n\n\n--------------------------------------------------------------------------------\n\nBackground\nLocalOye was a mass-market services aggregator startup (now shutdown). We\nconnected the service providers (plumbers, electricians, carpenters, yoga\ntrainers, etc.) to the consumers through our app. \n\nLike all tech startups in their early booming days, ours too was on a feature\nspree. We had around half a dozen of major features rolling out in a single\nrelease. We used to call these as big bang releases. Our tech stack was Django\n[https://www.djangoproject.com/]  with MySQL [https://www.mysql.com/]  and the\nentire system was split into a bunch of microservices.\n\nWe were rolling out a bunch of features, but for sake brevity, let's just focus\non the one that caused the issue. When booking for an appointment for a service,\nthe customer has to answer a bunch of questions including the type of service,\nlocation, cost range, timing, etc. We introduced something called as variable\ntime slots where providers can define their own time slots for the whole day,\nassign the time range they will be working in and the size of a time slot per\ncustomer.\n\nThere were around 19 feature branches\n[https://danielkummer.github.io/git-flow-cheatsheet/]  written by our team of 6\nbackend engineers, which were supposed to be merged and pushed on production and\nI was given this messy work. After fighting the nightmarish merge conflicts,\nlast minute fixes, syntax errors (on staging!), cyclic dependencies and\nmigration conflicts, I somehow managed to get it all in one branch. It was also\nmy longest day at work (37 hours, though I'm no longer proud of this\nachievement). Yet we were on an ass-on-fire situation because the deployment was\nstill not done.\n\nFinally, the next day we got a green flag from QA and we're ready to deploy.\nLike all our major releases, this was gonna go on production at night. We still\ndidn't have CI/CD in place, so all deployments were manual (login to the\ninstance, pull the code, restart server). We decided the deployment to be done\nat around 4 AM since the load was minimal and if anything goes haywire, we had\nminimal loss. We had stayed back in the office including the backend team,\nfrontend team, our backend lead (Gauri) and head of technology (Vivek). \n\nThe deployment happened at around 6 AM and we did a basic test whether\neverything was working fine. It seemed the deployment was a success. We felt\nrelieved! Everyone was almost half asleep at this point and were really happy\nthat they finally got this release done and now they can cozily lay back on\ntheir beds and enjoy their well deserved sleep. I was particularly a zombie at\nthis point since I just had a 7 hour sleep after that humongous 37 hour stint\nand I was up again for 16 hours now. Soon everyone packed their bags and left\none by one. Me and Gauri stayed back. While she wrote the \"Deployment\nsuccessful\"  email, marking our product managers, business teams and CEO, I was\nbusy closing my code editors, terminals, ticking off points on the deployment\nchecklist and, finally, shutting down my laptop.\n\n\n--------------------------------------------------------------------------------\n\nOne by one, things fell apart\nEverything was nice and happy and we decided to step down for a quick breakfast.\nWhile coming back, Gauri  got a nice good morning call from Vivek  informing\nthat he was getting API timeout errors on web. All AJAX calls to the server\nwaited for 30 seconds (default for HTTP requests) and would return with a\ntimeout error. We quickly headed back to the office, turned on our laptops and\nstarted monitoring our servers using the all time reliable Linux's top\n[http://man7.org/linux/man-pages/man1/top.1.html]! One of the servers that\nhosted our microserivce, which is responsible for reading data from server and\ncontained most of the business logic, shot to 100% CPU. We waited for sometime,\nbut it still didn't seem to settle. Since it affected all other microservices,\nwe spent minimal time investigating and Gauri  just kill -9'd  the service\nprocesses and spawned them again. We again monitored for 15-20 minutes. Nothing\nwent wrong now. All seemed fine.\n\nWe thought that was some random one-off error. Might be some edge case. Gauri \ncalled back Vivek  and notified him that the server was all fine and he should\ntest again. After a quick test, Vivek  gave a confirmation that it was all okay\nnow. We were relieved but super confused. In the end, we said \"chuck it\"  and\nmoved on. By this time, our operations team and customer support team started\ncoming to office one by one, astonished to see both of us still in office. It\nwas 8 AM now.\n\nJust when I closed my terminal, one of the guys from the operations came to our\ndesk and informed that all the dashboards are empty. Nothing was showing up,\nthese guys couldn't even open up a single service request on the dashboard. I\nwent with him to investigate (using our beloved Chome Developer Tools) and found\nthe same error Vivek  was getting earlier. APIs were timing out. I quickly ran\nto Gauri  and asked her to monitor the servers and bam! The CPU was again on\n100%. Now I almost started freaking out. As a software engineer, I feel\ndisgraced when something I build doesn't work and the end user is affected. I\nstarted thinking of all possible places where I could have gone wrong - \"Perhaps\nthe merge didn't end well. What if there's a cyclic dependency which is causing\nthe Python interpreter to freak out? Maybe I removed some essential piece of\ncode in merge conflicts which is causing this issue? Did internet just go off on\nDigital Ocean servers?\". And there stood Gauri, as calm as the sea, steadfast,\nneatly monitoring any patterns in this behavior and without even the slightest\nbit of stress on her face, and comforting me that there's nothing to panic and I\nshould stay calm. She found that, not only the CPU went 100%, even the RAM usage\nslowly went from 15% to 78%! She again killed the processes and started again\nand everything went back to normal.\n\nI was puzzled beyond imagination. My first thought was to review the all the\ncode that went on production. Yes, all of it! All code in those 19 feature\nbranches, which would amount to around 10K lines. Gauri  told me to add logs\neverywhere - start and end of function body, API endpoints, RPC calls, etc. I\nquickly managed to do it, at least in the new code that was deployed. But we\nwere running out of time. It was 9AM and people from other teams were arriving\none by one only to find an occasional service disruption. At this point, we\ndidn't even bother checking the Crashlytics\n[https://fabric.io/kits/android/crashlytics]  dashboard because even the app was\ngetting the same timeout errors. Our main website opened with an empty header\nsince that's where we displayed the service categories we provided, since the\nAPI for that too was getting timed out. The frequency of this disruption\nexacerbated as the day progressed and more and more users started using the app.\n \n\nThe thing is, no one had any idea what caused it. Being amateur developers, we\nmade one of the most common beginner mistakes - insufficient logging. Gauri \ncalled up everyone in the team to come to office as soon as they can and it as a\n P0  situation. Most of them were in their deep sleep at this point and the few\nwho answered also started panicking like crazy. While everyone was on their way,\n Gauri  told me the last thing I wanted to hear - \"Let's rollback the release.\".\nThis was even more disgraceful. Something that you built was so bad that it had\nto be taken down. The release was already delayed by three days and I didn't\nwant to get it delayed any further. I resisted and asked for a bit more time.\nSeeing that I hadn't given on this hopeless situation, Gauri  also decided to\ngive me another hour and if nothing happens, she would rollback the release at\n11AM.\n\nFinally, a ray of hope\nAfter mindlessly testing and hopelessly trying to reproduce the issue on my\nlocal environment, I decided to test all the frontend apps on my machine. The\nfirst one that I had already setup on my laptop was the main website. I started\nrandomly opening all the pages, tried creating a service request. Just when I\ntried creating a service request for some random category, the network request\nstalled and, for the first time in life, I was happy to see an error in browser\nconsole - 504 Gateway Timeout. I screamed out \"Gauri! I could reproduce the\nissue on my machine!\". I killed the server process, spawned it again, created\nthe same request and the server timed out again. My happiness had no bounds at\nthat time! By this time the other guys in our team also came in one by one and\nstarted maniacally glaring into their laptops, browsing through the code they\nwrote, nervously thinking whether their code was the culprit. Meanwhile, Gauri \nwas on her newly acquired routine on the production server - monitor, kill,\nspawn again, repeat.\n\nBut, then came a sudden twist. My fellow teammate tried created a service\nrequest on his machine and it worked. Some guy created one on staging and it\nworked. Hell, someone created one on production too and it worked! In a second,\nall my happiness got flushed out and I was back to stage one. To my utter\ndisgusting surprise, even I couldn't reproduce it on my machine now. I almost\nsurrendered and gave in for the idea of rolling back the release, but then I\nchecked why it went 100% CPU for that specific case. I furiously kept hitting\nthe back button on the browser until I reached that page where I was able to\nreproduce the issue. And voila! It went 100% again.\n\nIt was for the plumber category that the issue got reproduced. I tried to\nreplicate it on staging, couldn't reproduce. I tried it on my teammate's\nmachine, couldn't replicate it. Tried on production, went 100% again. I wanted\nto double check whether this was because of my request and not someone else's, I\nreproduced it 10 times in a row. And yes, it was reproduced exactly when I\nopened the plumber category page. I knew it was not an environment specific\nissue for sure. Meanwhile I had isolated the code block where this was happening\nand that's where I got the breakthrough.\n\nDigging into the code\nWhile our investigation was still going on, it was well past 11AM now. I could\nglance at the other side where the operations team was seated to find them\nbrowsing Facebook, playing games, some busy doing work not related to the\ndashboard, some falling back to trusted old Excel sheets. Overall, it was a very\ndepressing scene wherein the operations team and customer support teams weren't\nable to do their work because of some fuck up on our end. I felt really ashamed\nof myself as I was still not able to debug the issue.\n\nWhile reading the relevant code, the problematic part was a function which\nlooked  like this,\n\nfrom datetime import datetime, time, date\n\nfrom dateutil.relativedelta import relativedelta\n\ndef get_next_slot(work_timings, duration):\n    start_hour, end_hour = map(int, work_timings.split('-'))\n    start_datetime = datetime.combine(date.today(), time(hour=start_hour))\n    end_datetime = datetime.combine(date.today(), time(hour=end_hour))\n    slot = relativedelta(minutes=duration)\n\n    while start_datetime.time() \n\n\n NOTE:  The above snippet is not the exact piece of code that was causing the\nissue. This is a workable example written from the memory I had of that\nincident.\n\nA while  loop with an unclear loop invariant. What could possibly go wrong! But\nactually, nothing in this code was incorrect. The conditions were correct it\nwould give right output for a lot of cases which I had generated in my mind.\nLet's say, for work timings 9-18  (9AM in the morning till 6PM in the evening)\nand duration of 30  minutes per slot, the above function would generate the\nfollowing output,\n\n(datetime.time(9, 0), datetime.time(9, 30))\n(datetime.time(9, 30), datetime.time(10, 0))\n(datetime.time(10, 0), datetime.time(10, 30))\n(datetime.time(10, 30), datetime.time(11, 0))\n(datetime.time(11, 0), datetime.time(11, 30))\n(datetime.time(11, 30), datetime.time(12, 0))\n(datetime.time(12, 0), datetime.time(12, 30))\n(datetime.time(12, 30), datetime.time(13, 0))\n(datetime.time(13, 0), datetime.time(13, 30))\n(datetime.time(13, 30), datetime.time(14, 0))\n(datetime.time(14, 0), datetime.time(14, 30))\n(datetime.time(14, 30), datetime.time(15, 0))\n(datetime.time(15, 0), datetime.time(15, 30))\n(datetime.time(15, 30), datetime.time(16, 0))\n(datetime.time(16, 0), datetime.time(16, 30))\n(datetime.time(16, 30), datetime.time(17, 0))\n(datetime.time(17, 0), datetime.time(17, 30))\n(datetime.time(17, 30), datetime.time(18, 0))\n(datetime.time(18, 0), datetime.time(18, 30))\n\n\nThen I looked up why it was failing for the plumber category. I checked the\ndatabase and got the entry timeslot definitions. The work timings were 9-23 \n(9AM in the morning till 11PM at night) and duration was 60  minutes. I mentally\nevaluated the code and I still couldn't get what was happening  here. Meanwhile,\nthe guy who had written this code was pulling his hair out trying to understand\nwhat's happening here while staring at my screen. Then it clicked! It was the\nbiggest WTF moment of my life. I figured out why it failed and I started\nlaughing hysterically. Everyone was astonished at first, giving me an eager\nlook, waiting for me to stop laughing so that they get to know what the hell\nthis issue really was. The guy who wrote the code started shaking me fiercely, \n\"Tejas, what the hell happened? Tell me! What was the issue? Please tell me\nASAP. Stop laughing, you moron!\".\n\nI somehow caught my breath and regained by senses, and saw the entire section of\nthe office was staring at me - our team, HR, product managers, a few guys from\nthe operations team, marketing guys, and even our CEO - all of them waiting for\nthat one answer. I quickly stabilized myself, looked at that helpless guy and\nstarted asking him simple date and time arithmetic,\n\nMe:  How much is 9 AM + 1 hour?\nHim:  Stop this stupid thing. Tell me what happened!\nMe:  You will figure out yourself. Just give me the answer.\nHim:  10AM\nMe:  +1 hour?\nHim:  11 AM.\nMe:  Okay. What's 10PM  + 1 hour?\nHim:  11PM\nMe:  +1 hour?\nHim:  12AM.\nMe:  No. In 24 hour format?\nHim:  0 hours. Wait! oh... fuck!\nMe:  Yes! Python time  objects use 24-hour format instead of 12-hour format. And\n0 hours is still less than 23 hours, which still satisfies the loop criteria.\nSince time is cyclic, this condition will always be true and thus your while\nloop becomes an infinite loop. Moreover, you're yielding the timeslots at each\niteration which explains the slow rise in RAM usage, and infinite loop explains\nwhy CPU went 100%.It was the biggest 'Aha'  moment on the floor. I could see a lot of them holding\ntheir heads and some still processing what I explained. Of all, Gauri  was\ngiving her widest smile. One by one I was giving an explanation to everyone what\nhappened and how it became an infinite loop. The poor guy put his head down on\nthe table thinking how he couldn't catch this one case and even he gave a smile\nin the end.\n\nThe reason it was never captured on his machine or on the staging server was\nbecause no one had tested that condition! Whereas, just the night before the\ndeployment, I had dumped the production data for categories on my local database\nfor testing out a few things. But I never tested the website, so it wasn't\ncaught even on my machine.\n\nResolution\nIt was really  simple. Just compare the datetime  objects instead of time \nobjects so that at 12AM, the day also increments which no longer satisfies the\nloop conditions and the loop breaks out. \n\nThe change was quickly made, tested on the same category. This time it worked\nwithout blowing the CPU usage off the roof. I still didn't understand why did he\nprefer comparing time  objects instead of datetime  objects. But it's fine. The\npatch was pushed on production and it worked correctly now for that same\ncategory. All dashboards were up and working and everybody, after enjoying their\nlittle free time, were back to their work. It was 12PM by now. I was definitely\na zombie at this point. I spend another few hours figuring out other such pieces\nin code along with other team members and finally left for home early  at 4PM.\n\n\n--------------------------------------------------------------------------------\n\nImportant takeaways\n * NEVER EVER DO BIG BANG RELEASES! Release incrementally, in small chunks. It's\n   easier to find needle among a few sticks of hay than an entire haystack.\n * Logging is crucial. Learn how to log. Though I personally would not\n   recommend, but log at every checkpoint in the code. If feel you would be\n   inundated with logs, use log levels (DEBUG, INFO, WARNING, ERROR) and\n   configure it with environment flags.\n *   No matter how rigorous QA testing you do, some things still escape the eyes\n   of all. We can't help it. But at least ensure that all the cases already\n   defined by the business teams are fully covered in the tests.\n * Software engineers are humans. They can't be right all the time. Neither can\n   someone think of all possible edge cases that may arise in the code, let\n   alone something that would be defined by the end user. Empathize them and\n   understand that such issues are not because they are incompetent but rather\n   something which was inevitable. Rather I would think of that incident this\n   way - of the 10K+ lines of code that went on production, only one line was\n   the culprit.\n * To this day, I really appreciate Gauri's stand. She's very strict in\n   maintaining code quality and business logic implementation, and scolded us a\n   lot for our mistakes. But in that moment, she was the only one who was\n   fighting for us against the whole company and gave us as much time as she\n   could afford. Not only her, even our CEO was very relaxed and despite knowing\n   that every minute that we spent debugging this issue costed him money, he\n   still supported us and didn't freak out either. Things would have gone\n   horribly wrong if it wasn't for them. As a manager, stressing out your teams\n   in such situations just makes everything worse. The team needs someone who\n   would shield them from everyone else while they just focus on fixing the\n   issue.","feature_image":"/content/images/2018/12/elisa-michelet-1139615-unsplash.jpg","featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-12-06 16:43:41","updated_at":"2018-12-08 21:08:06","published_at":"2018-12-06 20:49:32","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5c2dfa104614fe2f8b0b13ac","uuid":"8d7c5bae-dc2f-4b49-87e2-76d78923cbd0","title":"Common database table design patterns","slug":"common-database-table-designs","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<figure>\\n<table class=\\\"monospace\\\">\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>profile_id</th>\\n            <th>field</th>\\n            <th>value</th>\\n            <th>user_id</th>\\n            <th>comment</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>12</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>verified</td>\\n            <td>23</td>\\n            <td>User marked as verified after validating email.</td>\\n            <td>2019-01-02T15:32:12Z</td>\\n        </tr>\\n        <tr>\\n            <td>28</td>\\n            <td>39</td>\\n            <td>first_name</td>\\n            <td>Tejas</td>\\n            <td>23</td>\\n            <td>User changed profile information.</td>\\n            <td>2019-01-02T17:11:54Z</td>\\n        </tr>\\n        <tr>\\n            <td>31</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>active</td>\\n            <td>23</td>\\n            <td>User activated after completing profile.</td>\\n            <td>2019-01-02T17:13:01Z</td>\\n        </tr>\\n    </tbody>\\n</table>\\n\\n<figcaption>Example: Log table for tracking user profile changes</figcaption>\\n</figure>\"}],[\"html\",{\"html\":\"<figure>\\n<table class=\\\"monospace\\\">\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>order_id</th>\\n            <th>sku_id</th>\\n            <th>quantity</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>9</td>\\n            <td>87</td>\\n            <td>12</td>\\n            <td>1</td>\\n            <td>2019-01-02T12:09:35Z</td>\\n        </tr>\\n        <tr>\\n            <td>10</td>\\n            <td>87</td>\\n            <td>5</td>\\n            <td>5</td>\\n            <td>2019-01-02T12:09:58Z</td>\\n        </tr>\\n        <tr>\\n            <td>15</td>\\n            <td>91</td>\\n            <td>12</td>\\n            <td>2</td>\\n            <td>2019-01-02T13:01:19Z</td>\\n        </tr>\\n    </tbody>\\n</table>\\n<figcaption>Example: Mapping table between orders and SKUs and their quantities</figcaption>\\n</figure>\"}]],\"markups\":[],\"sections\":[[1,\"blockquote\",[[0,[],0,\"This article is yet to be finished.\"]]],[1,\"h2\",[[0,[],0,\"Content\"]]],[1,\"p\",[[0,[],0,\"These tables are for storing pure content. A really good example would be blog articles. This data is often formatted and showed to the end users over a read-only channel. There is usually a moderator or an editor who can change this data.\"]]],[1,\"p\",[[0,[],0,\"It often has full CRUD (create-read-update-delete) access though certain actions are restricted to certain roles. For example, a blog editor can create, update or even delete an article but the end user can only read it. \"]]],[1,\"p\",[[0,[],0,\"This data can be accessed and controlled with pure RESTful APIs and they usually have a 1:1 mapping with the database actions - POST for create, GET for read, PUT/PATCH for update and DELETE for deleting.\"]]],[1,\"h2\",[[0,[],0,\"Transaction\"]]],[1,\"p\",[[0,[],0,\"These are immutable datasets. Once added, no data can be changed or deleted. These are ideal for storing transactional activities like book keeping, virtual currencies, etc. They also feature a non-serial primary key or unique key (a random string or UUID or equivalent) so that the sequence cannot be predicted.\"]]],[1,\"p\",[[0,[],0,\"It only has CR (create-read) access, though in certain cases, minor updates are allowed which do not drastically affect the transactional data.\"]]],[1,\"p\",[[0,[],0,\"Access to the data is usually access controlled and isolated for users. Users cannot access each others' data and can neither modify their own. Usually RESTful practices are limited because of limited data access.\"]]],[1,\"h2\",[[0,[],0,\"Log\"]]],[1,\"p\",[[0,[],0,\"These tables are used for recording change in data for a given table.  Similar to transaction tables, these are immutable. They denote the history of value a field at a given point in time. Common use cases are value transitions, changelog, etc.\"]]],[1,\"p\",[[0,[],0,\"Like transaction tables, these are strictly CR (create-read). Occasionally, they also contain information about the user who made the change and reason for change.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Unlike previous tables, data from table is never directly exposed to the user. Thus there are no RESTful endpoints. Though they are seldom used for administrative purposes to track user activity and troubleshoot issues. Access for such purposes is usually done using a server-side rendered page or using custom internal APIs which are very specific to the use case.\"]]],[1,\"h2\",[[0,[],0,\"Mapping\"]]],[1,\"p\",[[0,[],0,\"These are only used for creating a relations between two or more tables. Such tables are often called many-to-many mapping tables, though, using appropriate UNIQUE keys, they can be restricted to many-to-one or even one-to-one mapping. They only store foreign keys to related tables. A good example would be assigning multiple tags to multiple articles.\"]]],[1,\"p\",[[0,[],0,\"Based on the behavior of the related tables, mapping tables can be CRUD (create-read-update-delete) or CR (create-read) only. Like log tables, they can also contain additional data for each mapping.\"]]],[10,1],[1,\"p\",[[0,[],0,\"Data from mapping tables is never exposed directly to the end user. It's always indirectly used along with data from content tables and related data is shown in nested fashion. Pure RESTful APIs will usually nest the related data.\"]]]]}","html":"<blockquote>This article is yet to be finished.</blockquote><h2 id=\"content\">Content</h2><p>These tables are for storing pure content. A really good example would be blog articles. This data is often formatted and showed to the end users over a read-only channel. There is usually a moderator or an editor who can change this data.</p><p>It often has full CRUD (create-read-update-delete) access though certain actions are restricted to certain roles. For example, a blog editor can create, update or even delete an article but the end user can only read it. </p><p>This data can be accessed and controlled with pure RESTful APIs and they usually have a 1:1 mapping with the database actions - POST for create, GET for read, PUT/PATCH for update and DELETE for deleting.</p><h2 id=\"transaction\">Transaction</h2><p>These are immutable datasets. Once added, no data can be changed or deleted. These are ideal for storing transactional activities like book keeping, virtual currencies, etc. They also feature a non-serial primary key or unique key (a random string or UUID or equivalent) so that the sequence cannot be predicted.</p><p>It only has CR (create-read) access, though in certain cases, minor updates are allowed which do not drastically affect the transactional data.</p><p>Access to the data is usually access controlled and isolated for users. Users cannot access each others' data and can neither modify their own. Usually RESTful practices are limited because of limited data access.</p><h2 id=\"log\">Log</h2><p>These tables are used for recording change in data for a given table.  Similar to transaction tables, these are immutable. They denote the history of value a field at a given point in time. Common use cases are value transitions, changelog, etc.</p><p>Like transaction tables, these are strictly CR (create-read). Occasionally, they also contain information about the user who made the change and reason for change.</p><figure>\n<table class=\"monospace\">\n    <thead>\n        <tr>\n            <th>_id</th>\n            <th>profile_id</th>\n            <th>field</th>\n            <th>value</th>\n            <th>user_id</th>\n            <th>comment</th>\n            <th>timestamp</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>12</td>\n            <td>39</td>\n            <td>status</td>\n            <td>verified</td>\n            <td>23</td>\n            <td>User marked as verified after validating email.</td>\n            <td>2019-01-02T15:32:12Z</td>\n        </tr>\n        <tr>\n            <td>28</td>\n            <td>39</td>\n            <td>first_name</td>\n            <td>Tejas</td>\n            <td>23</td>\n            <td>User changed profile information.</td>\n            <td>2019-01-02T17:11:54Z</td>\n        </tr>\n        <tr>\n            <td>31</td>\n            <td>39</td>\n            <td>status</td>\n            <td>active</td>\n            <td>23</td>\n            <td>User activated after completing profile.</td>\n            <td>2019-01-02T17:13:01Z</td>\n        </tr>\n    </tbody>\n</table>\n\n<figcaption>Example: Log table for tracking user profile changes</figcaption>\n</figure><p>Unlike previous tables, data from table is never directly exposed to the user. Thus there are no RESTful endpoints. Though they are seldom used for administrative purposes to track user activity and troubleshoot issues. Access for such purposes is usually done using a server-side rendered page or using custom internal APIs which are very specific to the use case.</p><h2 id=\"mapping\">Mapping</h2><p>These are only used for creating a relations between two or more tables. Such tables are often called many-to-many mapping tables, though, using appropriate UNIQUE keys, they can be restricted to many-to-one or even one-to-one mapping. They only store foreign keys to related tables. A good example would be assigning multiple tags to multiple articles.</p><p>Based on the behavior of the related tables, mapping tables can be CRUD (create-read-update-delete) or CR (create-read) only. Like log tables, they can also contain additional data for each mapping.</p><figure>\n<table class=\"monospace\">\n    <thead>\n        <tr>\n            <th>_id</th>\n            <th>order_id</th>\n            <th>sku_id</th>\n            <th>quantity</th>\n            <th>timestamp</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>9</td>\n            <td>87</td>\n            <td>12</td>\n            <td>1</td>\n            <td>2019-01-02T12:09:35Z</td>\n        </tr>\n        <tr>\n            <td>10</td>\n            <td>87</td>\n            <td>5</td>\n            <td>5</td>\n            <td>2019-01-02T12:09:58Z</td>\n        </tr>\n        <tr>\n            <td>15</td>\n            <td>91</td>\n            <td>12</td>\n            <td>2</td>\n            <td>2019-01-02T13:01:19Z</td>\n        </tr>\n    </tbody>\n</table>\n<figcaption>Example: Mapping table between orders and SKUs and their quantities</figcaption>\n</figure><p>Data from mapping tables is never exposed directly to the end user. It's always indirectly used along with data from content tables and related data is shown in nested fashion. Pure RESTful APIs will usually nest the related data.</p>","comment_id":"5c2dfa104614fe2f8b0b13ac","plaintext":"This article is yet to be finished.Content\nThese tables are for storing pure content. A really good example would be blog\narticles. This data is often formatted and showed to the end users over a\nread-only channel. There is usually a moderator or an editor who can change this\ndata.\n\nIt often has full CRUD (create-read-update-delete) access though certain actions\nare restricted to certain roles. For example, a blog editor can create, update\nor even delete an article but the end user can only read it. \n\nThis data can be accessed and controlled with pure RESTful APIs and they usually\nhave a 1:1 mapping with the database actions - POST for create, GET for read,\nPUT/PATCH for update and DELETE for deleting.\n\nTransaction\nThese are immutable datasets. Once added, no data can be changed or deleted.\nThese are ideal for storing transactional activities like book keeping, virtual\ncurrencies, etc. They also feature a non-serial primary key or unique key (a\nrandom string or UUID or equivalent) so that the sequence cannot be predicted.\n\nIt only has CR (create-read) access, though in certain cases, minor updates are\nallowed which do not drastically affect the transactional data.\n\nAccess to the data is usually access controlled and isolated for users. Users\ncannot access each others' data and can neither modify their own. Usually\nRESTful practices are limited because of limited data access.\n\nLog\nThese tables are used for recording change in data for a given table.  Similar\nto transaction tables, these are immutable. They denote the history of value a\nfield at a given point in time. Common use cases are value transitions,\nchangelog, etc.\n\nLike transaction tables, these are strictly CR (create-read). Occasionally, they\nalso contain information about the user who made the change and reason for\nchange.\n\n_id\n profile_id\n field\n value\n user_id\n comment\n timestamp\n 12\n 39\n status\n verified\n 23\n User marked as verified after validating email.\n 2019-01-02T15:32:12Z\n 28\n 39\n first_name\n Tejas\n 23\n User changed profile information.\n 2019-01-02T17:11:54Z\n 31\n 39\n status\n active\n 23\n User activated after completing profile.\n 2019-01-02T17:13:01Z\n Example: Log table for tracking user profile changesUnlike previous tables,\ndata from table is never directly exposed to the user. Thus there are no RESTful\nendpoints. Though they are seldom used for administrative purposes to track user\nactivity and troubleshoot issues. Access for such purposes is usually done using\na server-side rendered page or using custom internal APIs which are very\nspecific to the use case.\n\nMapping\nThese are only used for creating a relations between two or more tables. Such\ntables are often called many-to-many mapping tables, though, using appropriate\nUNIQUE keys, they can be restricted to many-to-one or even one-to-one mapping.\nThey only store foreign keys to related tables. A good example would be\nassigning multiple tags to multiple articles.\n\nBased on the behavior of the related tables, mapping tables can be CRUD\n(create-read-update-delete) or CR (create-read) only. Like log tables, they can\nalso contain additional data for each mapping.\n\n_id\n order_id\n sku_id\n quantity\n timestamp\n 9\n 87\n 12\n 1\n 2019-01-02T12:09:35Z\n 10\n 87\n 5\n 5\n 2019-01-02T12:09:58Z\n 15\n 91\n 12\n 2\n 2019-01-02T13:01:19Z\n Example: Mapping table between orders and SKUs and their quantitiesData from\nmapping tables is never exposed directly to the end user. It's always indirectly\nused along with data from content tables and related data is shown in nested\nfashion. Pure RESTful APIs will usually nest the related data.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2019-01-03 12:03:28","updated_at":"2019-01-05 10:57:48","published_at":"2019-01-05 10:54:42","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5c3229bfd149624e397d2920","uuid":"4fbbc3e9-74cc-47b5-8e95-0cce31e0a7c5","title":"Simple chat server in Nim: Basics","slug":"simple-chat-server-in-nim-using-sockets","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **1** All socket related functions, classes, utilities are in the [`net`](https://nim-lang.org/docs/net.html) package. We could have also used [`nativesockets`](https://nim-lang.org/docs/nativesockets.html) package which is exclusively for sockets. But it handles sockets at very low-level which might just lengthen our code.\\n> **3** Initialize our server socket using [`newSocket`](https://nim-lang.org/docs/net.html#newSocket,Domain,SockType,Protocol). This function also accepts some parameters which we will discuss in-depth later. For now, we are okay leaving it to the default values.\\n> **4-5** Set the socket to listen to new connections on port `5555` and start accepting new connections from other sockets. If [`address` parameter](https://nim-lang.org/docs/net.html#bindAddr,Socket,string) is not mentioned by default, the socket will listen to requests from all IP addresses.\\n> **8** Close our socket server. It is very important to close socket connections if they are no longer required. This is considered a clean way to end TCP connections with proper end-of-connection acknowledgement.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Hint: used config file '/etc/nim.cfg' [Conf]\\n(out)Hint: system [Processing]\\n(out)Hint: server [Processing]\\n(out)Hint: net [Processing]\\n(out)Hint: nativesockets [Processing]\\n(out)Hint: os [Processing]\\n(out)Hint: strutils [Processing]\\n(out)Hint: parseutils [Processing]\\n(out)Hint: math [Processing]\\n(out)Hint: algorithm [Processing]\\n(out)Hint: times [Processing]\\n(out)Hint: posix [Processing]\\n(out)Hint: ospaths [Processing]\\n(out)Hint: options [Processing]\\n(out)Hint: typetraits [Processing]\\n(out)Hint: sets [Processing]\\n(out)Hint: hashes [Processing]\\n(out)CC: server\\n(out)CC: stdlib_system\\n(out)CC: stdlib_net\\n(out)Hint:  [Link]\\n(out)Hint: operation successful (26847 lines compiled; 0.903 sec total; 47.43MiB peakmem; Debug Build) [SuccessX]\\n(out)Hint: /home/tejas/Projects/simple-chat-server/server  [Exec]</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"8-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Similar to the server, we need a socket object. The only difference here is, unlike server, which listens to connections, a client knows the server address and connects to it using the [`connect`](https://nim-lang.org/docs/net.html#connect,Socket,string) method. Thus, a client needs to have the address and port of the server.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"6-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message)\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **7** Once the user sends a message, we'll prompt for another message, sort of how chat applications provide a text box to send a message.\\n> **8-10** Prompt the user for a chat message and using the client socket, [`send`](https://nim-lang.org/docs/net.html#send,Socket,string) it to the server. Also, we are using [`readLine`](https://nim-lang.org/docs/system.html#readLine,File) so that the messsage gets stored only when user presses <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-1\\\" data-language=\\\"server.nim\\\" data-line=\\\"11-18\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recv(10)\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **12** Server will keep listening to new messages from all connected clients.\\n> **13** Read a few characters from the socket.\\n> **15-16** When a socket disconnects, it sends an empty string before disconnection. This can be used as an indication for the server that the client has disconnected. Since we are dealing with only one client, we'll stop receiving additional messages and exit the loop.\\n> **18** Print the received message on the console.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, wor\\n(out)Server: received from client: ldLorem ip\\n(out)Server: received from client: sum dolor \\n(out)Server: received from client: sit amet, \\n(out)Server: received from client: consectetu\\n(out)Server: received from client: r adipisci</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"13\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"If the server and client are still running, kill the processes with <kbd>Ctrl</kbd>+<kbd>C</kbd>. Execute `server.nim` and `client.nim` again.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)server.nim(6)            server\\n(out)net.nim(738)             bindAddr\\n(out)oserr.nim(110)           raiseOSError\\n(out)Error: unhandled exception: Address already in use [OSError]\\n(out)Error: execution of an external program failed: '/home/tejas/Projects/simple-chat-server/server '</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"4\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, world\\n(out)Server: received from client: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola, mundo\\n(out)> What's 1 + 1? Answer is 10 in binary.\\n(out)> </code></pre>\"}],[\"markdown\",{\"markdown\":\"1. Have an infinte loop (`while true`) which will keep our server running.\\n2. Inside the loop, accept new client connections and add those into our client list.\\n3. For each client in the client list, check if there is any data.\\n4. If there is any data, print it out.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"6,10-11,14-37\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **6** Set the socket as non-blocking. We set it on the low-level native socket API.\\n> **11** We need to store our connected clients in a list so that we can iterate over them to get messages.\\n> **13-37** Check if there are any existing connections. If yes, add them to the connected socket list. Then for each connected socket, check whether there are any messages to be read.\\n> **17** Add the connected socket in our clients list.\\n> **19** In non-blocking mode, [`accept`](https://nim-lang.org/docs/net.html#accept,Socket,Socket) throws an `OSError` if there are no pending connections at that moment. We ignore that exception because it's understandable that we won't have any pending connections all the time.\\n> **22** We maintain a list of clients which disconnected so that we remove those from our client list.\\n> **24** Iterate over all the connected clients and receive messages from them one by one.\\n> **26** We set the `timeout` to `1` since [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) call still blocks the code as the default timeout value is `-1`, which means block indefinitely till message is received.\\n> **29** Mark the client for removal if it has disconnected.\\n> **32** If no message is received within the timeout period, [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) throws a `TimeoutError`. Since we are operating in a non-blocking mode now, we shall ignore this error.\\n> **35-37** Remove any client marked for removal from the clients list.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: Hola\\n(out)Server: received from client: Foo\\n(out)Server: received from client: Bar\\n(out)Server: received from client: \\n(out)Server: client disconnected\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> Foo\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola\\n(out)> Bar\\n(out)> ^CTraceback (most recent call last)\\n(out)client.nim(9)            client\\n(out)sysio.nim(185)           readLine\\n(out)sysio.nim(158)           readLine\\n(out)SIGINT: Interrupted by Ctrl-C.</code></pre>\"}],[\"markdown\",{\"markdown\":\"There's a major catch here. Since sending and receiving messages is a simultaneous process, we would need some kinda GUI to handle these tasks asynchronously. Just think of it, suppose you are a client chatting on our server, you wouldn't receive any messages until you input a message because the `stdin.readLine()` will block all the code until the user hits <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client_sending.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\\n<pre data-language=\\\"client_receiving.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  let receivedMessage: string = client.recvLine()\\n  stdout.writeLine(\\\"Message: \\\", receivedMessage)\\n\\nclient.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"30-36\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n        continue\\n\\n      for receivingClient in clients:\\n        if receivingClient == client:\\n          continue\\n\\n        receivingClient.send(message & \\\"\\\\r\\\\L\\\")\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: What are you doing?</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> What are you doing?\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: What are you doing?</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/server-cpu-usage-2.png\",\"cardWidth\":\"\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"3-4,7,14,18-22,25-27,30-51,55\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\nimport os\\nimport selectors\\n\\nvar server: Socket = newSocket()\\nvar select: Selector[int] = newSelector[int]()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nselect.registerHandle(server.getFd(), {Event.Read}, -1)\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  var results: seq[ReadyKey] = select.select(-1)\\n\\n  for result in results:\\n    if Event.Read in result.events:\\n      if result.fd.SocketHandle == server.getFd():\\n        var client: Socket = new(Socket)\\n        server.accept(client)\\n\\n        client.getFd().setBlocking(false)\\n        select.registerHandle(client.getFd(), {Event.Read}, -1)\\n        clients.add(client)\\n        stdout.writeLine(\\\"Server: client connected\\\")\\n      else:\\n        var sourceClient: Socket = newSocket(result.fd.SocketHandle)\\n        var message = sourceClient.recvLine()\\n\\n        if message == \\\"\\\":\\n          var clientsToRemove: seq[int] = @[]\\n\\n          for index, client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              clientsToRemove.add(index)\\n\\n          for index in clientsToRemove:\\n            var client: Socket = clients[index]\\n            select.unregister(result.fd)\\n            clients.del(index)\\n            stdout.writeLine(\\\"Server: client disconnected\\\")\\n        else:\\n          stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\n          for client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              continue\\n\\n            client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nselect.close()\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Import the packages required for `select` functions. Note that we also imported `os` package. This is because, in Nim v0.18 and lower, `OSErrorCode` is not explicity imported in the `select` library. This is fixed in later versions.\\n> **7** We define our selector. It requires a type too. This would be the type of the data that we will associate in `registerHandle` method.\\n> **14** Register our server for read events. Note that read events on server socket would be incoming socket connections. Since we don't have any data associated with our server, we'll pass data as `-1`.\\n> **18** `select` returns a list of events along with their file descriptors for which the specified event was triggered.\\n> **21** We are only interested in read events.\\n> **22** The result received from `select` method contains the list of `events` that were captured and the file descriptor `fd` for which the event was triggered. Though our `fd` is enough, we compare the underlying socket for that file descriptor. If the one that triggered a read event was our server, it must mean that we recevied an incoming connection from a client.\\n> **26** Since clients are also handled by `select` we'll set them as non-blocking.\\n> **27** Just like our server, listen to read events of our client. Read event on a connected socket indicates that a new message has been arrived waiting to be read.\\n> **30** If the read event was not triggered by server, then it must be client. This means we received a message from a client which we have to broadcast to other clients.\\n> **31** Working with higher-level socket abstractions is easier. So, we convert our low-level socket from file descriptor in the result into a higher-level socket.\\n> **34-45** If a client is disconnected, remove it from clients list and [`unregister`](https://nim-lang.org/docs/selectors.html#unregister,Selector[T],) events for that client.\\n> **50** We could have compared the two objects directly. But since the newly created `sourceClient` object as a copy, it's identity would be different. This would cause an inequality even though the underlying sockets are same.\\n> **55** Like sockets, even select should be closed to signal the kernel that we are no longer listening to any events. This is a good practice to cleanly close everything before shutting down our program.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: select seems to be doing great</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> select seems to be doing great\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: select seems to be doing great</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/low-cpu-server.png\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://nim-lang.org\"]],[\"a\",[\"href\",\"https://nim-lang.org/install.html\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/Editor-Support\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/\"]],[\"a\",[\"href\",\"https://www.techopedia.com/definition/7154/full-duplex-fdx\"]],[\"a\",[\"href\",\"https://realtimeapi.io/hub/http-long-polling/\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/BOSH_(protocol)\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/Comet_(programming)\"]],[\"a\",[\"href\",\"https://www.tutorialspoint.com/unix_sockets/what_is_socket.htm\"]],[\"a\",[\"href\",\"https://www.html5rocks.com/en/tutorials/websockets/basics/\"]],[\"a\",[\"href\",\"https://caniuse.com/#feat=websockets\"]],[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"#server-snippet-1.13\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recv,Socket,int\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recvLine,Socket\"]],[\"a\",[\"href\",\"#server-snippet-2.9-11\"]],[\"a\",[\"href\",\"#server-snippet-2.10\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/nativesockets.html#setBlocking,SocketHandle,bool\"]],[\"a\",[\"href\",\"https://www.linuxjournal.com/content/getting-started-ncurses\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man2/select.2.html\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#registerHandle,Selector[T],,set[Event],T\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#select,Selector[T],int\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Build a simple chat server using nothing except sockets in Nim which pushes messages sent by any client to all other connected clients.\"]]],[1,\"p\",[[0,[],0,\"Since I'm at home now, on a break, not really doing anything, I decided to learn this new programming language called \"],[0,[0],1,\"Nim\"],[0,[],0,\" which is a perfect fusion between the elegance of Python and performance of C. What's better way to start with a language than actually creating something meaningful? So, I decided to not only create a simple chat server, but also write a step-by-step tutorial about it.\"]]],[1,\"h1\",[[0,[],0,\"Prerequisites\"]]],[3,\"ul\",[[[0,[],0,\"Install Nim compiler. You can get the download links or installation commands from their \"],[0,[1],1,\"installation\"],[0,[],0,\" page. The compiler version in this tutorial is 0.18.0, though newer versions should not have any issue.\"]],[[0,[],0,\"Get Nim plugins for your editor. Again you can refer to the \"],[0,[2],1,\"editor plugins page\"],[0,[],0,\" on their \"],[0,[3],1,\"GitHub\"],[0,[],0,\" \"],[0,[4],1,\"wiki\"],[0,[],0,\".\"]]]],[1,\"h1\",[[0,[],0,\"Problem statement\"]]],[1,\"blockquote\",[[0,[],0,\"Our chat server will be a single room (channel) chat where anyone can talk with everyone. When a user types in a message, it is sent to all other users connected to the chat server.\"]]],[1,\"p\",[[0,[],0,\"In any chat application, the core responsibility of a server is just to act as a relay and send messages from one client to the other. The server should be sufficiently fast enough to accept newer clients who join, read messages from the clients, broadcast those messages to all other clients, without showing any noticeable delay for any of the clients. This would truly make it an instant messaging platform.\"]]],[1,\"h1\",[[0,[],0,\"I. Plan\"]]],[1,\"p\",[[0,[],0,\"We need a \"],[0,[5],1,\"full duplex\"],[0,[],0,\" link between the server and the client so that messages can be sent and received at the same time. Of all the various methods like \"],[0,[6],1,\"long-polling\"],[0,[],0,\", \"],[0,[7],1,\"BOSH\"],[0,[],0,\", \"],[0,[8],1,\"comet\"],[0,[],0,\", my recommendation is to use \"],[0,[9],1,\"sockets\"],[0,[],0,\" (\"],[0,[10],1,\"web sockets\"],[0,[],0,\" for \"],[0,[11],1,\"browsers\"],[0,[],0,\"). They are truly bi-directional, light-weight and efficient for such use cases.\"]]],[3,\"ol\",[[[0,[],0,\"Our server would act as a socket server. \"]],[[0,[],0,\"It would bind to a specific port and IP address and listen for new socket connections.\"]],[[0,[],0,\"For every socket connected, it would add it to it's active socket connections list.\"]],[[0,[],0,\"When any connected socket sends a message to the server, the server will send it to all the sockets in the active socket connections list (except the one who sent it).\"]],[[0,[],0,\"If a connected socket closes connection, the server will remove it from the active list.\"]]]],[1,\"h1\",[[0,[],0,\"II. Getting started\"]]],[1,\"p\",[[0,[],0,\"Create a directory in your projects folder (or wherever you want) called \"],[0,[12],1,\"simple-chat-server\"],[0,[],0,\". You might want to open this directory in your code editor. \"],[0,[13],1,\"All path references here on will be relative to this directory.\"]]],[1,\"p\",[[0,[],0,\"Create a file called \"],[0,[12],1,\"server.nim\"],[0,[],0,\". This would be our core server file. To compile and run the code in this file, we will use \"],[0,[12],1,\"nim compile --run server.nim\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"We'll create a simple socket which will listen to new socket connections on port \"],[0,[12],1,\"5555\"],[0,[],0,\" and then close it.\"]]],[10,0],[10,1],[1,\"p\",[[0,[],0,\"To run the above code, we need to compile it first and then execute the binary. Fortunately, the Nim compiler can do both in a single command by specifying the \"],[0,[12],1,\"--run\"],[0,[],0,\" or \"],[0,[12],1,\"-r\"],[0,[],0,\" argument.\"]]],[1,\"p\",[[0,[],0,\"The compiler pulls all the required packages along with \"],[0,[12],1,\"server.nim\"],[0,[],0,\", transpiles them into C, links the libraries and creates an executable binary file with the same name as our file sans the file extension (in our case it becomes \"],[0,[12],1,\"server\"],[0,[],0,\") in the root of the project directory.\"]]],[10,2],[1,\"p\",[[0,[],0,\"The code ran but it didn't produce any output, except for compiler messages (we will be omitting compiler messages hereon). The server created the socket, listened for incoming connections and closed the socket connection.\"]]],[1,\"p\",[[0,[],0,\"Now we'll make the server wait until it receives new connections.\"]]],[10,3],[10,4],[1,\"p\",[[0,[],0,\"Our server is now actively listening for connections from clients. But… it's kinda stuck there because the server is waiting for a client to connect. We'll have to create one now. \"]]],[1,\"p\",[[0,[],0,\"Create a new file called \"],[0,[12],1,\"client.nim\"],[0,[],0,\". We'll use socket as a client and connect to the server.\"]]],[10,5],[10,6],[1,\"p\",[[0,[],0,\"Execute \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and at the same time, in a new terminal window/tab, execute \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,7],[1,\"p\",[[0,[],0,\"The server started and waited for connections. The moment we started the client, it connected to our socket server on the specified address. Server received this connection and assigned the client to the \"],[0,[12],1,\"client\"],[0,[],0,\" variable, and closed the socket.\"]]],[1,\"p\",[[0,[],0,\"This was a barebones socket server and client. We have to add the real magic - sending and receiving messages.\"]]],[1,\"h1\",[[0,[],0,\"III. Sending and receiving messages\"]]],[1,\"p\",[[0,[],0,\"A socket on an OS is a file descriptor (layman: just a file). When we say that a socket received some data, it actually signifies that some data was written on that file descriptor.\"]]],[1,\"p\",[[0,[],0,\"We have built a server which accepts socket connection and a client which connects to the server. Now, we'll dive into the actual communication between client and server.\"]]],[1,\"p\",[[0,[],0,\"On the client side, we'll prompt user to enter the message to be sent and then send this message over to the server.\"]]],[10,8],[10,9],[1,\"p\",[[0,[],0,\"On the server side, we need to listen to new messages from client. We'll also print the messages received from the client on the console.\"]]],[10,10],[10,11],[1,\"p\",[[0,[],0,\"Let's execute both \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" in two different terminal tabs/windows. Note that I have used \"],[0,[12],1,\"nim c -r\"],[0,[],0,\" which is a shorthand for \"],[0,[12],1,\"nim compile --run\"],[0,[],0,\".\"]]],[10,12],[1,\"p\",[[0,[],0,\"Something's gone horribly wrong here. Not only our client messages are truncated, but they are also mingled with other messages. We sent \"],[0,[14],1,\"Hello, world\"],[0,[],0,\" and \"],[0,[14],1,\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"],[0,[],0,\" as two different messages, but on the server side we're getting them in sort of mingled fashion. Also, our second message is incomplete.\"]]],[1,\"p\",[[0,[],0,\"The culprit here is line \"],[0,[15],1,\"13\"],[0,[],0,\". We specified that we'll only accept 10 characters from the socket. Also, until socket does not have at least 10 characters in its buffer, the \"],[0,[12,16],2,\"recv\"],[0,[],0,\" function will keep blocking indefinitely. The socket will keep reading messages until it has reached that count in its buffer and only then it will return the data. We can do the following,\"]]],[3,\"ol\",[[[0,[],0,\"We'll use some delimiting character. We'll read a very small amount of data from the socket and scan all characters in it and store it in our own buffer. If we encounter the delimiting character while scanning, we'll stop there, dump whatever we read so far in the buffer and return the buffer data.\"]],[[0,[],0,\"We can also use the \"],[0,[12],1,\"timeout\"],[0,[],0,\" parameter in the \"],[0,[12,16],2,\"recv\"],[0,[],0,\". By default, the timeout value is \"],[0,[12],1,\"-1\"],[0,[],0,\", which means we will wait indefinitely until there is enough data in the socket. We can set it to a small amount so that we don't wait indefinitely for new messages.\"]]]],[1,\"p\",[[0,[],0,\"A much better solution here would be to use the \"],[0,[12,17],2,\"recvLine\"],[0,[],0,\" method. It handles the complexity of handling the delimited character for us. It uses \"],[0,[12],1,\"\\\\r\\\\L\"],[0,[],0,\" as the delimiter. This means, on the client side, for each message we send, we would also need to append this delimiter. Let's make the changes accordingly.\"]]],[10,13],[10,14],[10,15],[10,16],[1,\"p\",[[0,[],0,\"If you're getting the above error, it's an indication that the port on which our server listens is being reserved for some reason. It happens when some process which is listening on that port is still running. Though in our case, even though we stopped the server, it's still giving us this error. The reason here is something called as \"],[0,[14],1,\"Linger Time\"],[0,[],0,\". When a socket is closed (especially TCP socket), some data which is marked to be sent, still exists in the socket's send buffer. Unless the buffer is emptied or a timeout period (usually 30 seconds) is passed, the system reserves the port.\"]]],[1,\"p\",[[0,[],0,\"To fix this, we use the \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of sockets. If a socket is created with this option enabled, instead of throwing an error, it checks whether a socket which is listening on the same port is in lingering state. If it is, the socket will use the same address with an assumption that the earlier socket will release the port soon. In Nim, we have the \"],[0,[12],1,\"OptReuseAddr\"],[0,[],0,\" option which can be set as \"],[0,[12],1,\"true\"],[0,[],0,\" to enable \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of the socket.\"]]],[10,17],[1,\"p\",[[0,[],0,\"Let's run the server and clients again.\"]]],[10,18],[1,\"p\",[[0,[],0,\"As you can see now, the messages are no longer truncated and they are received in the same manner as sent by the client.\"]]],[1,\"p\",[[0,[],0,\"Now that we have spawned our basic server which accepts messages from a client, let's spawn another client and see what happens. Don't kill the currently running \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" and instead run \"],[0,[12],1,\"client.nim\"],[0,[],0,\" again in a new tab/terminal and send a few messages.\"]]],[10,19],[1,\"p\",[[0,[],0,\"If you check the tab/terminal running our server, you wouldn't find these messages at all. The server did not receive any message at all from our new client. Can you identify the problem?\"]]],[1,\"p\",[[0,[],0,\"Notice the lines \"],[0,[18],1,\"9-11\"],[0,[],0,\", where we wait and accept connection from a client. The moment a client connects, we never again accept and listen to data from new clients. As soon as we get a client, we just listen to new data from that client. What we can do is, as we listen to new data from one client, we'll also accept new connections from other clients. Our flow would go like this, \"]]],[10,20],[1,\"p\",[[0,[],0,\"However, there is a slight problem in step 2. In our server socket, as seen here, the server will block the program flow while it is listening for new clients since \"],[0,[12,19],2,\"server.accept()\"],[0,[],0,\" is a blocking function. Thus our messages will only be read once a client connects to the server. This is not even an acceptable case for our chat server.\"]]],[1,\"p\",[[0,[],0,\"Fortunately, sockets have an option to run in non-blocking mode. This means, our \"],[0,[12],1,\"accept()\"],[0,[],0,\" and \"],[0,[12],1,\"recv()\"],[0,[],0,\" functions will no longer block the code. If they have anything meaningful to return (like an incoming socket connection or a message), they will return that and continue execution. Otherwise, they will throw an error. Which means, we have to keep checking for new connections or messages and also handle the error in case we don't get any. \"]]],[1,\"p\",[[0,[],0,\"In Nim, we enable non-blocking mode using the \"],[0,[12,20],2,\"setBlocking()\"],[0,[],0,\" function of the underlying native socket. We'll also store all our connected sockets in a list so that we can iterate over them and receive messages from each of them. We'll do both, accept new connections and receive data from sockets in a single infinite loop, so that we keep accepting new connections while we receive messages from existing ones. Let's give this a try.\"]]],[10,21],[10,22],[1,\"p\",[[0,[],0,\"Let's execute our server now with multiple clients.\"]]],[10,23],[1,\"p\",[[0,[],0,\"Yay! We have it now. Our server accepts and receives messages from multiple clients. We have also managed client disconnections. What our server should do now is send messages from one client to other clients, which a chat server should do. Let's do it.\"]]],[10,24],[1,\"p\",[[0,[],0,\"We can build a small GUI or use \"],[0,[21],1,\"ncurses\"],[0,[],0,\" to do that interactively in terminal. Since both of these are outside the scope of this tutorial, we'll make a hack for now. We'll create two different types of clients - one for sending messages and one for receiving. We call them \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" respectively. \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" is exactly same as our \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,25],[1,\"p\",[[0,[],0,\"We would need some minor changes in our \"],[0,[12],1,\"server.nim\"],[0,[],0,\". Once the server receives a message, it will send it to all connected clients, except the one who sent the message.\"]]],[10,26],[1,\"p\",[[0,[],0,\"Open three terminals - one for \"],[0,[12],1,\"server.nim\"],[0,[],0,\", one for \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and one for \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" - and execute the respective files. Try sending some messages from sending client and see if you get those in the receiving client.\"]]],[10,27],[1,\"p\",[[0,[],0,\"You can open multiple terminals with \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and send messages to one another. You would observer that all receiving clients receive messages from all sending clients. This is because our server is current broadcasting all messages to everyone. We can limit this behavior, but we can skip that for now.\"]]],[1,\"p\",[[0,[],0,\"With this, you have completed a simple chat server with somewhat hacky clients (we'll fix that later). However, if you're working on a laptop, you would have noticed the noise of your CPU fan every time you run the server. If you're curious enough, check the output of \"],[0,[12],1,\"top\"],[0,[],0,\" command and you'll notice that the server process is taking up some chunk of CPU.\"]]],[10,28],[1,\"p\",[[0,[],0,\"It seems our code needs some fixing. Indeed it does. The way we are handling new connections and incoming messages on our server is very inefficient. We are persistently asking the socket for new connection and a new message, that too in an infinite loop. If socket was an actual person, it would mean as if we are pestering him every now and then for new information.\"]]],[1,\"p\",[[0,[],0,\"We have a solution for this. We'll make use of something that is core of lot of chat servers and surprisingly available on all platforms - \"],[0,[12,22],2,\"select\"],[0,[],0,\".\"]]],[1,\"h1\",[[0,[],0,\"IV. Using \"],[0,[12],1,\"select\"],[0,[],0,\" for optimization\"]]],[1,\"p\",[[0,[],0,\"Of all the amazing things that happened in Unix world, one was \"],[0,[12],1,\"select\"],[0,[],0,\". Originally appeared in BSD, \"],[0,[12],1,\"select\"],[0,[],0,\" was quickly adopted in other popular OS. It's a kernel level utility which tells us which file descriptors are ready to be read, written or have an error condition. It does this using low-level file monitoring and interrupts, instead of iterating through all files and repeatedly checking if they have changed. This is cleaner, efficient and puts minimal load on our CPU.\"]]],[1,\"h3\",[[0,[],0,\"How to use \"],[0,[12],1,\"select\"],[0,[],0,\" with our chat server?\"]]],[1,\"p\",[[0,[],0,\"Since all connected clients are nothing but file descriptors, we'll tell \"],[0,[12],1,\"select\"],[0,[],0,\" to monitor these given file descriptors and notify us when there's any data on them that is yet to be read. Once \"],[0,[12],1,\"select\"],[0,[],0,\" notifies us, it will give us a list of file descriptors which contain unread data. We'll iterate over these and see what data they have. Remember, when a socket receives data, it essentially means that it has data to be read.\"]]],[1,\"p\",[[0,[12],1,\"select\"],[0,[],0,\" in Nim is a part of  \"],[0,[12],1,\"selectors\"],[0,[],0,\" package. It has two important methods of our concern - \"],[0,[12,23],2,\"registerHandle\"],[0,[],0,\" and \"],[0,[12,24],2,\"select\"],[0,[],0,\". \"],[0,[12],1,\"registerHandle\"],[0,[],0,\" takes in a file descriptor, the events we want to listen to (read, write, error) and optional data that we wish to receive when the event is triggered. \"],[0,[12],1,\"select\"],[0,[],0,\" takes in the timeout period until which it will wait for events on the registered handles (file descriptors). If we want \"],[0,[12],1,\"select\"],[0,[],0,\" to block our code, we can set timeout as \"],[0,[12],1,\"-1\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Let's dive into the code.\"]]],[10,29],[10,30],[1,\"p\",[[0,[],0,\"Let's run the program now and see our CPU usage.\"]]],[10,31],[10,32],[1,\"p\",[[0,[],0,\"It's not even showing in the top CPU consuming processes. That's great.\"]]],[10,33],[1,\"p\",[[0,[],0,\"With this we complete our basic chat server. I know clients are still messy, but for that, we would need to dive deep into the interactivity part which is beyond the scope of this tutorial. Next up, we can add clients with identity information so that server can uniquely tag who sent which message, 1:1 messaging instead of group messaging and an interactive UI. I might write a follow-up article with all of these in future.\"]]],[1,\"p\",[[0,[],0,\"Nim is an amazing language. To be able to do so much, in so little and clean code is amazing. We haven't touched on code optimization yet, but I believe we can use some micro-optimizations to make this code even faster. It's been a great exercise for me to move away from Python and learn interesting languages like Nim. \"]]],[1,\"p\",[[0,[],0,\"Let me know about your feedback. If you feel there were any issues with the tutorial, or writing style, or any errors in text or code, or any difficulty in understanding, or if you just wanna give a compliment, leave your comments below.\"]]]]}","html":"<p>Build a simple chat server using nothing except sockets in Nim which pushes messages sent by any client to all other connected clients.</p><p>Since I'm at home now, on a break, not really doing anything, I decided to learn this new programming language called <a href=\"https://nim-lang.org\">Nim</a> which is a perfect fusion between the elegance of Python and performance of C. What's better way to start with a language than actually creating something meaningful? So, I decided to not only create a simple chat server, but also write a step-by-step tutorial about it.</p><h1 id=\"prerequisites\">Prerequisites</h1><ul><li>Install Nim compiler. You can get the download links or installation commands from their <a href=\"https://nim-lang.org/install.html\">installation</a> page. The compiler version in this tutorial is 0.18.0, though newer versions should not have any issue.</li><li>Get Nim plugins for your editor. Again you can refer to the <a href=\"https://github.com/nim-lang/Nim/wiki/Editor-Support\">editor plugins page</a> on their <a href=\"https://github.com/nim-lang/Nim/\">GitHub</a> <a href=\"https://github.com/nim-lang/Nim/wiki/\">wiki</a>.</li></ul><h1 id=\"problem-statement\">Problem statement</h1><blockquote>Our chat server will be a single room (channel) chat where anyone can talk with everyone. When a user types in a message, it is sent to all other users connected to the chat server.</blockquote><p>In any chat application, the core responsibility of a server is just to act as a relay and send messages from one client to the other. The server should be sufficiently fast enough to accept newer clients who join, read messages from the clients, broadcast those messages to all other clients, without showing any noticeable delay for any of the clients. This would truly make it an instant messaging platform.</p><h1 id=\"i-plan\">I. Plan</h1><p>We need a <a href=\"https://www.techopedia.com/definition/7154/full-duplex-fdx\">full duplex</a> link between the server and the client so that messages can be sent and received at the same time. Of all the various methods like <a href=\"https://realtimeapi.io/hub/http-long-polling/\">long-polling</a>, <a href=\"https://en.wikipedia.org/wiki/BOSH_(protocol)\">BOSH</a>, <a href=\"https://en.wikipedia.org/wiki/Comet_(programming)\">comet</a>, my recommendation is to use <a href=\"https://www.tutorialspoint.com/unix_sockets/what_is_socket.htm\">sockets</a> (<a href=\"https://www.html5rocks.com/en/tutorials/websockets/basics/\">web sockets</a> for <a href=\"https://caniuse.com/#feat=websockets\">browsers</a>). They are truly bi-directional, light-weight and efficient for such use cases.</p><ol><li>Our server would act as a socket server. </li><li>It would bind to a specific port and IP address and listen for new socket connections.</li><li>For every socket connected, it would add it to it's active socket connections list.</li><li>When any connected socket sends a message to the server, the server will send it to all the sockets in the active socket connections list (except the one who sent it).</li><li>If a connected socket closes connection, the server will remove it from the active list.</li></ol><h1 id=\"ii-getting-started\">II. Getting started</h1><p>Create a directory in your projects folder (or wherever you want) called <code>simple-chat-server</code>. You might want to open this directory in your code editor. <strong>All path references here on will be relative to this directory.</strong></p><p>Create a file called <code>server.nim</code>. This would be our core server file. To compile and run the code in this file, we will use <code>nim compile --run server.nim</code>.</p><p>We'll create a simple socket which will listen to new socket connections on port <code>5555</code> and then close it.</p><pre data-language=\"server.nim\"><code class=\"language-nim line-numbers\">import net\n\nlet server: Socket = newSocket()\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nserver.close()\n</code></pre><h6 id=\"explanation\">Explanation</h6>\n<blockquote>\n<p><strong>1</strong> All socket related functions, classes, utilities are in the <a href=\"https://nim-lang.org/docs/net.html\"><code>net</code></a> package. We could have also used <a href=\"https://nim-lang.org/docs/nativesockets.html\"><code>nativesockets</code></a> package which is exclusively for sockets. But it handles sockets at very low-level which might just lengthen our code.<br>\n<strong>3</strong> Initialize our server socket using <a href=\"https://nim-lang.org/docs/net.html#newSocket,Domain,SockType,Protocol\"><code>newSocket</code></a>. This function also accepts some parameters which we will discuss in-depth later. For now, we are okay leaving it to the default values.<br>\n<strong>4-5</strong> Set the socket to listen to new connections on port <code>5555</code> and start accepting new connections from other sockets. If <a href=\"https://nim-lang.org/docs/net.html#bindAddr,Socket,string\"><code>address</code> parameter</a> is not mentioned by default, the socket will listen to requests from all IP addresses.<br>\n<strong>8</strong> Close our socket server. It is very important to close socket connections if they are no longer required. This is considered a clean way to end TCP connections with proper end-of-connection acknowledgement.</p>\n</blockquote>\n<p>To run the above code, we need to compile it first and then execute the binary. Fortunately, the Nim compiler can do both in a single command by specifying the <code>--run</code> or <code>-r</code> argument.</p><p>The compiler pulls all the required packages along with <code>server.nim</code>, transpiles them into C, links the libraries and creates an executable binary file with the same name as our file sans the file extension (in our case it becomes <code>server</code>) in the root of the project directory.</p><pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim compile --run server.nim\n(out)Hint: used config file '/etc/nim.cfg' [Conf]\n(out)Hint: system [Processing]\n(out)Hint: server [Processing]\n(out)Hint: net [Processing]\n(out)Hint: nativesockets [Processing]\n(out)Hint: os [Processing]\n(out)Hint: strutils [Processing]\n(out)Hint: parseutils [Processing]\n(out)Hint: math [Processing]\n(out)Hint: algorithm [Processing]\n(out)Hint: times [Processing]\n(out)Hint: posix [Processing]\n(out)Hint: ospaths [Processing]\n(out)Hint: options [Processing]\n(out)Hint: typetraits [Processing]\n(out)Hint: sets [Processing]\n(out)Hint: hashes [Processing]\n(out)CC: server\n(out)CC: stdlib_system\n(out)CC: stdlib_net\n(out)Hint:  [Link]\n(out)Hint: operation successful (26847 lines compiled; 0.903 sec total; 47.43MiB peakmem; Debug Build) [SuccessX]\n(out)Hint: /home/tejas/Projects/simple-chat-server/server  [Exec]</code></pre><p>The code ran but it didn't produce any output, except for compiler messages (we will be omitting compiler messages hereon). The server created the socket, listened for incoming connections and closed the socket connection.</p><p>Now we'll make the server wait until it receives new connections.</p><pre data-language=\"server.nim\" data-line=\"8-10\"><code class=\"language-nim line-numbers\">import net\n\nlet server: Socket = newSocket()\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nvar client: Socket = new(Socket)\nserver.accept(client)\nstdout.writeLine(\"Server: client connected\")\n\nserver.close()\n</code></pre><pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim compile --run server.nim\n(out)Server: started. Listening to new connections on port 5555...</code></pre><p>Our server is now actively listening for connections from clients. But… it's kinda stuck there because the server is waiting for a client to connect. We'll have to create one now. </p><p>Create a new file called <code>client.nim</code>. We'll use socket as a client and connect to the server.</p><pre data-language=\"client.nim\"><code class=\"language-nim line-numbers\">import net\n\nlet client: Socket = newSocket()\nclient.connect(\"127.0.0.1\", Port(5555))\nstdout.writeLine(\"Client: connected to server on address 127.0.0.1:5555\")\n\nclient.close()</code></pre><h6 id=\"explanation\">Explanation</h6>\n<blockquote>\n<p><strong>3-4</strong> Similar to the server, we need a socket object. The only difference here is, unlike server, which listens to connections, a client knows the server address and connects to it using the <a href=\"https://nim-lang.org/docs/net.html#connect,Socket,string\"><code>connect</code></a> method. Thus, a client needs to have the address and port of the server.</p>\n</blockquote>\n<p>Execute <code>server.nim</code> and at the same time, in a new terminal window/tab, execute <code>client.nim</code>.</p><pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim compile --run server.nim\n(out)Server: started. Listening to new connections on port 5555...\n(out)Server: client connected</code></pre>\n<pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim compile --run client.nim\n(out)Client: connected to server on address 127.0.0.1:5555</code></pre><p>The server started and waited for connections. The moment we started the client, it connected to our socket server on the specified address. Server received this connection and assigned the client to the <code>client</code> variable, and closed the socket.</p><p>This was a barebones socket server and client. We have to add the real magic - sending and receiving messages.</p><h1 id=\"iii-sending-and-receiving-messages\">III. Sending and receiving messages</h1><p>A socket on an OS is a file descriptor (layman: just a file). When we say that a socket received some data, it actually signifies that some data was written on that file descriptor.</p><p>We have built a server which accepts socket connection and a client which connects to the server. Now, we'll dive into the actual communication between client and server.</p><p>On the client side, we'll prompt user to enter the message to be sent and then send this message over to the server.</p><pre data-language=\"client.nim\" data-line=\"6-10\"><code class=\"language-nim line-numbers\">import net\n\nlet client: Socket = newSocket()\nclient.connect(\"127.0.0.1\", Port(5555))\nstdout.writeLine(\"Client: connected to server on address 127.0.0.1:5555\")\n\nwhile true:\n  stdout.write(\"> \")\n  let message: string = stdin.readLine()\n  client.send(message)\n\nclient.close()</code></pre><h6 id=\"explanation\">Explanation</h6>\n<blockquote>\n<p><strong>7</strong> Once the user sends a message, we'll prompt for another message, sort of how chat applications provide a text box to send a message.<br>\n<strong>8-10</strong> Prompt the user for a chat message and using the client socket, <a href=\"https://nim-lang.org/docs/net.html#send,Socket,string\"><code>send</code></a> it to the server. Also, we are using <a href=\"https://nim-lang.org/docs/system.html#readLine,File\"><code>readLine</code></a> so that the messsage gets stored only when user presses <kbd>Enter</kbd>.</p>\n</blockquote>\n<p>On the server side, we need to listen to new messages from client. We'll also print the messages received from the client on the console.</p><pre id=\"server-snippet-1\" data-language=\"server.nim\" data-line=\"11-18\"><code class=\"language-nim line-numbers\">import net\n\nvar server: Socket = newSocket()\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nvar client: Socket = new(Socket)\nserver.accept(client)\nstdout.writeLine(\"Server: client connected\")\n\nwhile true:\n  let message: string = client.recv(10)\n\n  if message == \"\":\n    break\n\n  stdout.writeLine(\"Server: received from client: \", message)\n\nserver.close()</code></pre><h6 id=\"explanation\">Explanation</h6>\n<blockquote>\n<p><strong>12</strong> Server will keep listening to new messages from all connected clients.<br>\n<strong>13</strong> Read a few characters from the socket.<br>\n<strong>15-16</strong> When a socket disconnects, it sends an empty string before disconnection. This can be used as an indication for the server that the client has disconnected. Since we are dealing with only one client, we'll stop receiving additional messages and exit the loop.<br>\n<strong>18</strong> Print the received message on the console.</p>\n</blockquote>\n<p>Let's execute both <code>server.nim</code> and <code>client.nim</code> in two different terminal tabs/windows. Note that I have used <code>nim c -r</code> which is a shorthand for <code>nim compile --run</code>.</p><pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim c -r client.nim\n(out)Client: connected to server on address 127.0.0.1:5555\n(out)> Hello, world\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n(out)> </code></pre>\n<pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim c -r server.nim\n(out)Server: started. Listening to new connections on port 5555...\n(out)Server: client connected\n(out)Server: received from client: Hello, wor\n(out)Server: received from client: ldLorem ip\n(out)Server: received from client: sum dolor \n(out)Server: received from client: sit amet, \n(out)Server: received from client: consectetu\n(out)Server: received from client: r adipisci</code></pre><p>Something's gone horribly wrong here. Not only our client messages are truncated, but they are also mingled with other messages. We sent <em>Hello, world</em> and <em>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</em> as two different messages, but on the server side we're getting them in sort of mingled fashion. Also, our second message is incomplete.</p><p>The culprit here is line <a href=\"#server-snippet-1.13\">13</a>. We specified that we'll only accept 10 characters from the socket. Also, until socket does not have at least 10 characters in its buffer, the <code><a href=\"https://nim-lang.org/docs/net.html#recv,Socket,int\">recv</a></code> function will keep blocking indefinitely. The socket will keep reading messages until it has reached that count in its buffer and only then it will return the data. We can do the following,</p><ol><li>We'll use some delimiting character. We'll read a very small amount of data from the socket and scan all characters in it and store it in our own buffer. If we encounter the delimiting character while scanning, we'll stop there, dump whatever we read so far in the buffer and return the buffer data.</li><li>We can also use the <code>timeout</code> parameter in the <code><a href=\"https://nim-lang.org/docs/net.html#recv,Socket,int\">recv</a></code>. By default, the timeout value is <code>-1</code>, which means we will wait indefinitely until there is enough data in the socket. We can set it to a small amount so that we don't wait indefinitely for new messages.</li></ol><p>A much better solution here would be to use the <code><a href=\"https://nim-lang.org/docs/net.html#recvLine,Socket\">recvLine</a></code> method. It handles the complexity of handling the delimited character for us. It uses <code>\\r\\L</code> as the delimiter. This means, on the client side, for each message we send, we would also need to append this delimiter. Let's make the changes accordingly.</p><pre data-language=\"server.nim\" data-line=\"13\"><code class=\"language-nim line-numbers\">import net\n\nvar server: Socket = newSocket()\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nvar client: Socket = new(Socket)\nserver.accept(client)\nstdout.writeLine(\"Server: client connected\")\n\nwhile true:\n  let message: string = client.recvLine()\n\n  if message == \"\":\n    break\n\n  stdout.writeLine(\"Server: received from client: \", message)\n\nserver.close()</code></pre><pre data-language=\"client.nim\" data-line=\"10\"><code class=\"language-nim line-numbers\">import net\n\nlet client: Socket = newSocket()\nclient.connect(\"127.0.0.1\", Port(5555))\nstdout.writeLine(\"Client: connected to server on address 127.0.0.1:5555\")\n\nwhile true:\n  stdout.write(\"> \")\n  let message: string = stdin.readLine()\n  client.send(message & \"\\r\\L\")\n\nclient.close()</code></pre><p>If the server and client are still running, kill the processes with <kbd>Ctrl</kbd>+<kbd>C</kbd>. Execute <code>server.nim</code> and <code>client.nim</code> again.</p>\n<pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim c -r server.nim\n(out)server.nim(6)            server\n(out)net.nim(738)             bindAddr\n(out)oserr.nim(110)           raiseOSError\n(out)Error: unhandled exception: Address already in use [OSError]\n(out)Error: execution of an external program failed: '/home/tejas/Projects/simple-chat-server/server '</code></pre><p>If you're getting the above error, it's an indication that the port on which our server listens is being reserved for some reason. It happens when some process which is listening on that port is still running. Though in our case, even though we stopped the server, it's still giving us this error. The reason here is something called as <em>Linger Time</em>. When a socket is closed (especially TCP socket), some data which is marked to be sent, still exists in the socket's send buffer. Unless the buffer is emptied or a timeout period (usually 30 seconds) is passed, the system reserves the port.</p><p>To fix this, we use the <code>SO_REUSEADDR</code> property of sockets. If a socket is created with this option enabled, instead of throwing an error, it checks whether a socket which is listening on the same port is in lingering state. If it is, the socket will use the same address with an assumption that the earlier socket will release the port soon. In Nim, we have the <code>OptReuseAddr</code> option which can be set as <code>true</code> to enable <code>SO_REUSEADDR</code> property of the socket.</p><pre id=\"server-snippet-2\" data-language=\"server.nim\" data-line=\"4\"><code class=\"language-nim line-numbers\">import net\n\nvar server: Socket = newSocket()\nserver.setSockOpt(OptReuseAddr, true)\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nvar client: Socket = new(Socket)\nserver.accept(client)\nstdout.writeLine(\"Server: client connected\")\n\nwhile true:\n  let message: string = client.recvLine()\n\n  if message == \"\":\n    break\n\n  stdout.writeLine(\"Server: received from client: \", message)\n\nserver.close()</code></pre><p>Let's run the server and clients again.</p><pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim c -r server.nim \n(out)Server: started. Listening to new connections on port 5555...\n(out)Server: client connected\n(out)Server: received from client: Hello, world\n(out)Server: received from client: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n(out) </code></pre>\n<pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim c -r client.nim \n(out)Client: connected to server on address 127.0.0.1:5555\n(out)> Hello, world\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n(out)> </code></pre><p>As you can see now, the messages are no longer truncated and they are received in the same manner as sent by the client.</p><p>Now that we have spawned our basic server which accepts messages from a client, let's spawn another client and see what happens. Don't kill the currently running <code>server.nim</code> and <code>client.nim</code> and instead run <code>client.nim</code> again in a new tab/terminal and send a few messages.</p><pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim c -r client.nim \n(out)Client: connected to server on address 127.0.0.1:5555\n(out)> Hola, mundo\n(out)> What's 1 + 1? Answer is 10 in binary.\n(out)> </code></pre><p>If you check the tab/terminal running our server, you wouldn't find these messages at all. The server did not receive any message at all from our new client. Can you identify the problem?</p><p>Notice the lines <a href=\"#server-snippet-2.9-11\">9-11</a>, where we wait and accept connection from a client. The moment a client connects, we never again accept and listen to data from new clients. As soon as we get a client, we just listen to new data from that client. What we can do is, as we listen to new data from one client, we'll also accept new connections from other clients. Our flow would go like this, </p><ol>\n<li>Have an infinte loop (<code>while true</code>) which will keep our server running.</li>\n<li>Inside the loop, accept new client connections and add those into our client list.</li>\n<li>For each client in the client list, check if there is any data.</li>\n<li>If there is any data, print it out.</li>\n</ol>\n<p>However, there is a slight problem in step 2. In our server socket, as seen here, the server will block the program flow while it is listening for new clients since <code><a href=\"#server-snippet-2.10\">server.accept()</a></code> is a blocking function. Thus our messages will only be read once a client connects to the server. This is not even an acceptable case for our chat server.</p><p>Fortunately, sockets have an option to run in non-blocking mode. This means, our <code>accept()</code> and <code>recv()</code> functions will no longer block the code. If they have anything meaningful to return (like an incoming socket connection or a message), they will return that and continue execution. Otherwise, they will throw an error. Which means, we have to keep checking for new connections or messages and also handle the error in case we don't get any. </p><p>In Nim, we enable non-blocking mode using the <code><a href=\"https://nim-lang.org/docs/nativesockets.html#setBlocking,SocketHandle,bool\">setBlocking()</a></code> function of the underlying native socket. We'll also store all our connected sockets in a list so that we can iterate over them and receive messages from each of them. We'll do both, accept new connections and receive data from sockets in a single infinite loop, so that we keep accepting new connections while we receive messages from existing ones. Let's give this a try.</p><pre id=\"server-snippet-2\" data-language=\"server.nim\" data-line=\"6,10-11,14-37\"><code class=\"language-nim line-numbers\">import net\nimport nativesockets\n\nvar server: Socket = newSocket()\nserver.setSockOpt(OptReuseAddr, true)\nserver.getFd().setBlocking(false)\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nvar clients: seq[Socket] = @[]\n\nwhile true:\n  try:\n    var client: Socket = new(Socket)\n    server.accept(client)\n    clients.add(client)\n    stdout.writeLine(\"Server: client connected\")\n  except OSError:\n    discard\n\n  var clientsToRemove: seq[int] = @[]\n\n  for index, client in clients:\n    try:\n      let message: string = client.recvLine(timeout = 1)\n\n      if message == \"\":\n        clientsToRemove.add(index)\n\n      stdout.writeLine(\"Server: received from client: \", message)\n    except TimeoutError:\n        discard\n\n  for index in clientsToRemove:\n    clients.del(index)\n    stdout.writeLine(\"Server: client disconnected\")\n\nserver.close()</code></pre><h6 id=\"explanation\">Explanation</h6>\n<blockquote>\n<p><strong>6</strong> Set the socket as non-blocking. We set it on the low-level native socket API.<br>\n<strong>11</strong> We need to store our connected clients in a list so that we can iterate over them to get messages.<br>\n<strong>13-37</strong> Check if there are any existing connections. If yes, add them to the connected socket list. Then for each connected socket, check whether there are any messages to be read.<br>\n<strong>17</strong> Add the connected socket in our clients list.<br>\n<strong>19</strong> In non-blocking mode, <a href=\"https://nim-lang.org/docs/net.html#accept,Socket,Socket\"><code>accept</code></a> throws an <code>OSError</code> if there are no pending connections at that moment. We ignore that exception because it's understandable that we won't have any pending connections all the time.<br>\n<strong>22</strong> We maintain a list of clients which disconnected so that we remove those from our client list.<br>\n<strong>24</strong> Iterate over all the connected clients and receive messages from them one by one.<br>\n<strong>26</strong> We set the <code>timeout</code> to <code>1</code> since <a href=\"https://nim-lang.org/docs/net.html#recvLine,Socket\"><code>recvLine</code></a> call still blocks the code as the default timeout value is <code>-1</code>, which means block indefinitely till message is received.<br>\n<strong>29</strong> Mark the client for removal if it has disconnected.<br>\n<strong>32</strong> If no message is received within the timeout period, <a href=\"https://nim-lang.org/docs/net.html#recvLine,Socket\"><code>recvLine</code></a> throws a <code>TimeoutError</code>. Since we are operating in a non-blocking mode now, we shall ignore this error.<br>\n<strong>35-37</strong> Remove any client marked for removal from the clients list.</p>\n</blockquote>\n<p>Let's execute our server now with multiple clients.</p><pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim c -r server.nim \n(out)Server: started. Listening to new connections on port 5555...\n(out)Server: client connected\n(out)Server: client connected\n(out)Server: received from client: Hello\n(out)Server: received from client: Hola\n(out)Server: received from client: Foo\n(out)Server: received from client: Bar\n(out)Server: received from client: \n(out)Server: client disconnected\n(out) </code></pre>\n<pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim c -r client.nim \n(out)Client: connected to server on address 127.0.0.1:5555\n(out)> Hello\n(out)> Foo\n(out)> </code></pre>\n<pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim c -r client.nim \n(out)Client: connected to server on address 127.0.0.1:5555\n(out)> Hola\n(out)> Bar\n(out)> ^CTraceback (most recent call last)\n(out)client.nim(9)            client\n(out)sysio.nim(185)           readLine\n(out)sysio.nim(158)           readLine\n(out)SIGINT: Interrupted by Ctrl-C.</code></pre><p>Yay! We have it now. Our server accepts and receives messages from multiple clients. We have also managed client disconnections. What our server should do now is send messages from one client to other clients, which a chat server should do. Let's do it.</p><p>There's a major catch here. Since sending and receiving messages is a simultaneous process, we would need some kinda GUI to handle these tasks asynchronously. Just think of it, suppose you are a client chatting on our server, you wouldn't receive any messages until you input a message because the <code>stdin.readLine()</code> will block all the code until the user hits <kbd>Enter</kbd>.</p>\n<p>We can build a small GUI or use <a href=\"https://www.linuxjournal.com/content/getting-started-ncurses\">ncurses</a> to do that interactively in terminal. Since both of these are outside the scope of this tutorial, we'll make a hack for now. We'll create two different types of clients - one for sending messages and one for receiving. We call them <code>client_sending.nim</code> and <code>client_receiving.nim</code> respectively. <code>client_sending.nim</code> is exactly same as our <code>client.nim</code>.</p><pre data-language=\"client_sending.nim\"><code class=\"language-nim line-numbers\">import net\n\nlet client: Socket = newSocket()\nclient.connect(\"127.0.0.1\", Port(5555))\nstdout.writeLine(\"Client: connected to server on address 127.0.0.1:5555\")\n\nwhile true:\n  stdout.write(\"> \")\n  let message: string = stdin.readLine()\n  client.send(message & \"\\r\\L\")\n\nclient.close()</code></pre>\n<pre data-language=\"client_receiving.nim\"><code class=\"language-nim line-numbers\">import net\n\nlet client: Socket = newSocket()\nclient.connect(\"127.0.0.1\", Port(5555))\nstdout.writeLine(\"Client: connected to server on address 127.0.0.1:5555\")\n\nwhile true:\n  let receivedMessage: string = client.recvLine()\n  stdout.writeLine(\"Message: \", receivedMessage)\n\nclient.close()</code></pre><p>We would need some minor changes in our <code>server.nim</code>. Once the server receives a message, it will send it to all connected clients, except the one who sent the message.</p><pre id=\"server-snippet-2\" data-language=\"server.nim\" data-line=\"30-36\"><code class=\"language-nim line-numbers\">import net\nimport nativesockets\n\nvar server: Socket = newSocket()\nserver.setSockOpt(OptReuseAddr, true)\nserver.getFd().setBlocking(false)\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nvar clients: seq[Socket] = @[]\n\nwhile true:\n  try:\n    var client: Socket = new(Socket)\n    server.accept(client)\n    clients.add(client)\n    stdout.writeLine(\"Server: client connected\")\n  except OSError:\n    discard\n\n  var clientsToRemove: seq[int] = @[]\n\n  for index, client in clients:\n    try:\n      let message: string = client.recvLine(timeout = 1)\n\n      if message == \"\":\n        clientsToRemove.add(index)\n        continue\n\n      for receivingClient in clients:\n        if receivingClient == client:\n          continue\n\n        receivingClient.send(message & \"\\r\\L\")\n\n      stdout.writeLine(\"Server: received from client: \", message)\n    except TimeoutError:\n        discard\n\n  for index in clientsToRemove:\n    clients.del(index)\n    stdout.writeLine(\"Server: client disconnected\")\n\nserver.close()\n</code></pre><p>Open three terminals - one for <code>server.nim</code>, one for <code>client_receiving.nim</code> and one for <code>client_sending.nim</code> - and execute the respective files. Try sending some messages from sending client and see if you get those in the receiving client.</p><pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim c -r server.nim\n(out)Server: started. Listening to new connections on port 5555...\n(out)Server: client connected\n(out)Server: client connected\n(out)Server: received from client: Hello\n(out)Server: received from client: How are you?\n(out)Server: received from client: What are you doing?</code></pre>\n<pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim c -r client_sending.nim  \n(out)Client: connected to server on address 127.0.0.1:5555\n(out)> Hello\n(out)> How are you?\n(out)> What are you doing?\n(out)> </code></pre>\n<pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim c -r client_receiving.nim\n(out)Client: connected to server on address 127.0.0.1:5555\n(out)Message: Hello\n(out)Message: How are you?\n(out)Message: What are you doing?</code></pre><p>You can open multiple terminals with <code>client_receiving.nim</code> and <code>client_sending.nim</code> and send messages to one another. You would observer that all receiving clients receive messages from all sending clients. This is because our server is current broadcasting all messages to everyone. We can limit this behavior, but we can skip that for now.</p><p>With this, you have completed a simple chat server with somewhat hacky clients (we'll fix that later). However, if you're working on a laptop, you would have noticed the noise of your CPU fan every time you run the server. If you're curious enough, check the output of <code>top</code> command and you'll notice that the server process is taking up some chunk of CPU.</p><figure class=\"kg-card kg-image-card\"><img src=\"/content/images/2019/01/server-cpu-usage-2.png\" class=\"kg-image\"></figure><p>It seems our code needs some fixing. Indeed it does. The way we are handling new connections and incoming messages on our server is very inefficient. We are persistently asking the socket for new connection and a new message, that too in an infinite loop. If socket was an actual person, it would mean as if we are pestering him every now and then for new information.</p><p>We have a solution for this. We'll make use of something that is core of lot of chat servers and surprisingly available on all platforms - <code><a href=\"http://man7.org/linux/man-pages/man2/select.2.html\">select</a></code>.</p><h1 id=\"iv-using-select-for-optimization\">IV. Using <code>select</code> for optimization</h1><p>Of all the amazing things that happened in Unix world, one was <code>select</code>. Originally appeared in BSD, <code>select</code> was quickly adopted in other popular OS. It's a kernel level utility which tells us which file descriptors are ready to be read, written or have an error condition. It does this using low-level file monitoring and interrupts, instead of iterating through all files and repeatedly checking if they have changed. This is cleaner, efficient and puts minimal load on our CPU.</p><h3 id=\"how-to-use-select-with-our-chat-server\">How to use <code>select</code> with our chat server?</h3><p>Since all connected clients are nothing but file descriptors, we'll tell <code>select</code> to monitor these given file descriptors and notify us when there's any data on them that is yet to be read. Once <code>select</code> notifies us, it will give us a list of file descriptors which contain unread data. We'll iterate over these and see what data they have. Remember, when a socket receives data, it essentially means that it has data to be read.</p><p><code>select</code> in Nim is a part of  <code>selectors</code> package. It has two important methods of our concern - <code><a href=\"https://nim-lang.org/docs/selectors.html#registerHandle,Selector[T],,set[Event],T\">registerHandle</a></code> and <code><a href=\"https://nim-lang.org/docs/selectors.html#select,Selector[T],int\">select</a></code>. <code>registerHandle</code> takes in a file descriptor, the events we want to listen to (read, write, error) and optional data that we wish to receive when the event is triggered. <code>select</code> takes in the timeout period until which it will wait for events on the registered handles (file descriptors). If we want <code>select</code> to block our code, we can set timeout as <code>-1</code>.</p><p>Let's dive into the code.</p><pre id=\"server-snippet-2\" data-language=\"server.nim\" data-line=\"3-4,7,14,18-22,25-27,30-51,55\"><code class=\"language-nim line-numbers\">import net\nimport nativesockets\nimport os\nimport selectors\n\nvar server: Socket = newSocket()\nvar select: Selector[int] = newSelector[int]()\nserver.setSockOpt(OptReuseAddr, true)\nserver.getFd().setBlocking(false)\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nselect.registerHandle(server.getFd(), {Event.Read}, -1)\nvar clients: seq[Socket] = @[]\n\nwhile true:\n  var results: seq[ReadyKey] = select.select(-1)\n\n  for result in results:\n    if Event.Read in result.events:\n      if result.fd.SocketHandle == server.getFd():\n        var client: Socket = new(Socket)\n        server.accept(client)\n\n        client.getFd().setBlocking(false)\n        select.registerHandle(client.getFd(), {Event.Read}, -1)\n        clients.add(client)\n        stdout.writeLine(\"Server: client connected\")\n      else:\n        var sourceClient: Socket = newSocket(result.fd.SocketHandle)\n        var message = sourceClient.recvLine()\n\n        if message == \"\":\n          var clientsToRemove: seq[int] = @[]\n\n          for index, client in clients:\n            if client.getFd() == sourceClient.getFd():\n              clientsToRemove.add(index)\n\n          for index in clientsToRemove:\n            var client: Socket = clients[index]\n            select.unregister(result.fd)\n            clients.del(index)\n            stdout.writeLine(\"Server: client disconnected\")\n        else:\n          stdout.writeLine(\"Server: received from client: \", message)\n\n          for client in clients:\n            if client.getFd() == sourceClient.getFd():\n              continue\n\n            client.send(message & \"\\r\\L\")\n\nselect.close()\nserver.close()</code></pre><h6 id=\"explanation\">Explanation</h6>\n<blockquote>\n<p><strong>3-4</strong> Import the packages required for <code>select</code> functions. Note that we also imported <code>os</code> package. This is because, in Nim v0.18 and lower, <code>OSErrorCode</code> is not explicity imported in the <code>select</code> library. This is fixed in later versions.<br>\n<strong>7</strong> We define our selector. It requires a type too. This would be the type of the data that we will associate in <code>registerHandle</code> method.<br>\n<strong>14</strong> Register our server for read events. Note that read events on server socket would be incoming socket connections. Since we don't have any data associated with our server, we'll pass data as <code>-1</code>.<br>\n<strong>18</strong> <code>select</code> returns a list of events along with their file descriptors for which the specified event was triggered.<br>\n<strong>21</strong> We are only interested in read events.<br>\n<strong>22</strong> The result received from <code>select</code> method contains the list of <code>events</code> that were captured and the file descriptor <code>fd</code> for which the event was triggered. Though our <code>fd</code> is enough, we compare the underlying socket for that file descriptor. If the one that triggered a read event was our server, it must mean that we recevied an incoming connection from a client.<br>\n<strong>26</strong> Since clients are also handled by <code>select</code> we'll set them as non-blocking.<br>\n<strong>27</strong> Just like our server, listen to read events of our client. Read event on a connected socket indicates that a new message has been arrived waiting to be read.<br>\n<strong>30</strong> If the read event was not triggered by server, then it must be client. This means we received a message from a client which we have to broadcast to other clients.<br>\n<strong>31</strong> Working with higher-level socket abstractions is easier. So, we convert our low-level socket from file descriptor in the result into a higher-level socket.<br>\n<strong>34-45</strong> If a client is disconnected, remove it from clients list and <a href=\"https://nim-lang.org/docs/selectors.html#unregister,Selector%5BT%5D,\"><code>unregister</code></a> events for that client.<br>\n<strong>50</strong> We could have compared the two objects directly. But since the newly created <code>sourceClient</code> object as a copy, it's identity would be different. This would cause an inequality even though the underlying sockets are same.<br>\n<strong>55</strong> Like sockets, even select should be closed to signal the kernel that we are no longer listening to any events. This is a good practice to cleanly close everything before shutting down our program.</p>\n</blockquote>\n<p>Let's run the program now and see our CPU usage.</p><pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim c -r server.nim\n(out)Server: started. Listening to new connections on port 5555...\n(out)Server: client connected\n(out)Server: client connected\n(out)Server: received from client: Hello\n(out)Server: received from client: How are you?\n(out)Server: received from client: select seems to be doing great</code></pre>\n<pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim c -r client_sending.nim  \n(out)Client: connected to server on address 127.0.0.1:5555\n(out)> Hello\n(out)> How are you?\n(out)> select seems to be doing great\n(out)> </code></pre>\n<pre class=\"command-line\" data-user=\"tejas\" data-filter-output=\"(out)\"><code class=\"language-bash\">nim c -r client_receiving.nim\n(out)Client: connected to server on address 127.0.0.1:5555\n(out)Message: Hello\n(out)Message: How are you?\n(out)Message: select seems to be doing great</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"/content/images/2019/01/low-cpu-server.png\" class=\"kg-image\"></figure><p>It's not even showing in the top CPU consuming processes. That's great.</p><hr><p>With this we complete our basic chat server. I know clients are still messy, but for that, we would need to dive deep into the interactivity part which is beyond the scope of this tutorial. Next up, we can add clients with identity information so that server can uniquely tag who sent which message, 1:1 messaging instead of group messaging and an interactive UI. I might write a follow-up article with all of these in future.</p><p>Nim is an amazing language. To be able to do so much, in so little and clean code is amazing. We haven't touched on code optimization yet, but I believe we can use some micro-optimizations to make this code even faster. It's been a great exercise for me to move away from Python and learn interesting languages like Nim. </p><p>Let me know about your feedback. If you feel there were any issues with the tutorial, or writing style, or any errors in text or code, or any difficulty in understanding, or if you just wanna give a compliment, leave your comments below.</p>","comment_id":"5c3229bfd149624e397d2920","plaintext":"Build a simple chat server using nothing except sockets in Nim which pushes\nmessages sent by any client to all other connected clients.\n\nSince I'm at home now, on a break, not really doing anything, I decided to learn\nthis new programming language called Nim [https://nim-lang.org]  which is a\nperfect fusion between the elegance of Python and performance of C. What's\nbetter way to start with a language than actually creating something meaningful?\nSo, I decided to not only create a simple chat server, but also write a\nstep-by-step tutorial about it.\n\nPrerequisites\n * Install Nim compiler. You can get the download links or installation commands\n   from their installation [https://nim-lang.org/install.html]  page. The\n   compiler version in this tutorial is 0.18.0, though newer versions should not\n   have any issue.\n * Get Nim plugins for your editor. Again you can refer to the editor plugins\n   page [https://github.com/nim-lang/Nim/wiki/Editor-Support]  on their GitHub\n   [https://github.com/nim-lang/Nim/]  wiki\n   [https://github.com/nim-lang/Nim/wiki/].\n\nProblem statement\nOur chat server will be a single room (channel) chat where anyone can talk with\neveryone. When a user types in a message, it is sent to all other users\nconnected to the chat server.In any chat application, the core responsibility of\na server is just to act as a relay and send messages from one client to the\nother. The server should be sufficiently fast enough to accept newer clients who\njoin, read messages from the clients, broadcast those messages to all other\nclients, without showing any noticeable delay for any of the clients. This would\ntruly make it an instant messaging platform.\n\nI. Plan\nWe need a full duplex\n[https://www.techopedia.com/definition/7154/full-duplex-fdx]  link between the\nserver and the client so that messages can be sent and received at the same\ntime. Of all the various methods like long-polling\n[https://realtimeapi.io/hub/http-long-polling/], BOSH\n[https://en.wikipedia.org/wiki/BOSH_(protocol)], comet\n[https://en.wikipedia.org/wiki/Comet_(programming)], my recommendation is to use\n sockets [https://www.tutorialspoint.com/unix_sockets/what_is_socket.htm]  (web\nsockets [https://www.html5rocks.com/en/tutorials/websockets/basics/]  for \nbrowsers). They are truly bi-directional, light-weight and efficient for such\nuse cases.\n\n 1. Our server would act as a socket server. \n 2. It would bind to a specific port and IP address and listen for new socket\n    connections.\n 3. For every socket connected, it would add it to it's active socket\n    connections list.\n 4. When any connected socket sends a message to the server, the server will\n    send it to all the sockets in the active socket connections list (except the\n    one who sent it).\n 5. If a connected socket closes connection, the server will remove it from the\n    active list.\n\nII. Getting started\nCreate a directory in your projects folder (or wherever you want) called \nsimple-chat-server. You might want to open this directory in your code editor. \nAll path references here on will be relative to this directory.\n\nCreate a file called server.nim. This would be our core server file. To compile\nand run the code in this file, we will use nim compile --run server.nim.\n\nWe'll create a simple socket which will listen to new socket connections on port\n 5555  and then close it.\n\nimport net\n\nlet server: Socket = newSocket()\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nserver.close()\n\n\nExplanation\n1  All socket related functions, classes, utilities are in the net\n[https://nim-lang.org/docs/net.html]  package. We could have also used \nnativesockets [https://nim-lang.org/docs/nativesockets.html]  package which is\nexclusively for sockets. But it handles sockets at very low-level which might\njust lengthen our code.\n3  Initialize our server socket using newSocket. This function also accepts some\nparameters which we will discuss in-depth later. For now, we are okay leaving it\nto the default values.\n4-5  Set the socket to listen to new connections on port 5555  and start\naccepting new connections from other sockets. If address parameter  is not\nmentioned by default, the socket will listen to requests from all IP addresses.\n8  Close our socket server. It is very important to close socket connections if\nthey are no longer required. This is considered a clean way to end TCP\nconnections with proper end-of-connection acknowledgement.\n\nTo run the above code, we need to compile it first and then execute the binary.\nFortunately, the Nim compiler can do both in a single command by specifying the \n--run  or -r  argument.\n\nThe compiler pulls all the required packages along with server.nim, transpiles\nthem into C, links the libraries and creates an executable binary file with the\nsame name as our file sans the file extension (in our case it becomes server) in\nthe root of the project directory.\n\nnim compile --run server.nim\n(out)Hint: used config file '/etc/nim.cfg' [Conf]\n(out)Hint: system [Processing]\n(out)Hint: server [Processing]\n(out)Hint: net [Processing]\n(out)Hint: nativesockets [Processing]\n(out)Hint: os [Processing]\n(out)Hint: strutils [Processing]\n(out)Hint: parseutils [Processing]\n(out)Hint: math [Processing]\n(out)Hint: algorithm [Processing]\n(out)Hint: times [Processing]\n(out)Hint: posix [Processing]\n(out)Hint: ospaths [Processing]\n(out)Hint: options [Processing]\n(out)Hint: typetraits [Processing]\n(out)Hint: sets [Processing]\n(out)Hint: hashes [Processing]\n(out)CC: server\n(out)CC: stdlib_system\n(out)CC: stdlib_net\n(out)Hint:  [Link]\n(out)Hint: operation successful (26847 lines compiled; 0.903 sec total; 47.43MiB peakmem; Debug Build) [SuccessX]\n(out)Hint: /home/tejas/Projects/simple-chat-server/server  [Exec]\n\nThe code ran but it didn't produce any output, except for compiler messages (we\nwill be omitting compiler messages hereon). The server created the socket,\nlistened for incoming connections and closed the socket connection.\n\nNow we'll make the server wait until it receives new connections.\n\nimport net\n\nlet server: Socket = newSocket()\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nvar client: Socket = new(Socket)\nserver.accept(client)\nstdout.writeLine(\"Server: client connected\")\n\nserver.close()\n\n\nnim compile --run server.nim\n(out)Server: started. Listening to new connections on port 5555...\n\nOur server is now actively listening for connections from clients. But… it's\nkinda stuck there because the server is waiting for a client to connect. We'll\nhave to create one now. \n\nCreate a new file called client.nim. We'll use socket as a client and connect to\nthe server.\n\nimport net\n\nlet client: Socket = newSocket()\nclient.connect(\"127.0.0.1\", Port(5555))\nstdout.writeLine(\"Client: connected to server on address 127.0.0.1:5555\")\n\nclient.close()\n\nExplanation\n3-4  Similar to the server, we need a socket object. The only difference here\nis, unlike server, which listens to connections, a client knows the server\naddress and connects to it using the connect  method. Thus, a client needs to\nhave the address and port of the server.\n\nExecute server.nim  and at the same time, in a new terminal window/tab, execute \nclient.nim.\n\nnim compile --run server.nim\n(out)Server: started. Listening to new connections on port 5555...\n(out)Server: client connected\n\nnim compile --run client.nim\n(out)Client: connected to server on address 127.0.0.1:5555\n\nThe server started and waited for connections. The moment we started the client,\nit connected to our socket server on the specified address. Server received this\nconnection and assigned the client to the client  variable, and closed the\nsocket.\n\nThis was a barebones socket server and client. We have to add the real magic -\nsending and receiving messages.\n\nIII. Sending and receiving messages\nA socket on an OS is a file descriptor (layman: just a file). When we say that a\nsocket received some data, it actually signifies that some data was written on\nthat file descriptor.\n\nWe have built a server which accepts socket connection and a client which\nconnects to the server. Now, we'll dive into the actual communication between\nclient and server.\n\nOn the client side, we'll prompt user to enter the message to be sent and then\nsend this message over to the server.\n\nimport net\n\nlet client: Socket = newSocket()\nclient.connect(\"127.0.0.1\", Port(5555))\nstdout.writeLine(\"Client: connected to server on address 127.0.0.1:5555\")\n\nwhile true:\n  stdout.write(\"> \")\n  let message: string = stdin.readLine()\n  client.send(message)\n\nclient.close()\n\nExplanation\n7  Once the user sends a message, we'll prompt for another message, sort of how\nchat applications provide a text box to send a message.\n8-10  Prompt the user for a chat message and using the client socket, send  it\nto the server. Also, we are using readLine  so that the messsage gets stored\nonly when user presses Enter.\n\nOn the server side, we need to listen to new messages from client. We'll also\nprint the messages received from the client on the console.\n\nimport net\n\nvar server: Socket = newSocket()\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nvar client: Socket = new(Socket)\nserver.accept(client)\nstdout.writeLine(\"Server: client connected\")\n\nwhile true:\n  let message: string = client.recv(10)\n\n  if message == \"\":\n    break\n\n  stdout.writeLine(\"Server: received from client: \", message)\n\nserver.close()\n\nExplanation\n12  Server will keep listening to new messages from all connected clients.\n13  Read a few characters from the socket.\n15-16  When a socket disconnects, it sends an empty string before disconnection.\nThis can be used as an indication for the server that the client has\ndisconnected. Since we are dealing with only one client, we'll stop receiving\nadditional messages and exit the loop.\n18  Print the received message on the console.\n\nLet's execute both server.nim  and client.nim  in two different terminal\ntabs/windows. Note that I have used nim c -r  which is a shorthand for nim\ncompile --run.\n\nnim c -r client.nim\n(out)Client: connected to server on address 127.0.0.1:5555\n(out)> Hello, world\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n(out)> \n\nnim c -r server.nim\n(out)Server: started. Listening to new connections on port 5555...\n(out)Server: client connected\n(out)Server: received from client: Hello, wor\n(out)Server: received from client: ldLorem ip\n(out)Server: received from client: sum dolor \n(out)Server: received from client: sit amet, \n(out)Server: received from client: consectetu\n(out)Server: received from client: r adipisci\n\nSomething's gone horribly wrong here. Not only our client messages are\ntruncated, but they are also mingled with other messages. We sent Hello, world \nand Lorem ipsum dolor sit amet, consectetur adipiscing elit.  as two different\nmessages, but on the server side we're getting them in sort of mingled fashion.\nAlso, our second message is incomplete.\n\nThe culprit here is line 13. We specified that we'll only accept 10 characters\nfrom the socket. Also, until socket does not have at least 10 characters in its\nbuffer, the recv  function will keep blocking indefinitely. The socket will keep\nreading messages until it has reached that count in its buffer and only then it\nwill return the data. We can do the following,\n\n 1. We'll use some delimiting character. We'll read a very small amount of data\n    from the socket and scan all characters in it and store it in our own\n    buffer. If we encounter the delimiting character while scanning, we'll stop\n    there, dump whatever we read so far in the buffer and return the buffer\n    data.\n 2. We can also use the timeout  parameter in the recv. By default, the timeout\n    value is -1, which means we will wait indefinitely until there is enough\n    data in the socket. We can set it to a small amount so that we don't wait\n    indefinitely for new messages.\n\nA much better solution here would be to use the recvLine  method. It handles the\ncomplexity of handling the delimited character for us. It uses \\r\\L  as the\ndelimiter. This means, on the client side, for each message we send, we would\nalso need to append this delimiter. Let's make the changes accordingly.\n\nimport net\n\nvar server: Socket = newSocket()\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nvar client: Socket = new(Socket)\nserver.accept(client)\nstdout.writeLine(\"Server: client connected\")\n\nwhile true:\n  let message: string = client.recvLine()\n\n  if message == \"\":\n    break\n\n  stdout.writeLine(\"Server: received from client: \", message)\n\nserver.close()\n\nimport net\n\nlet client: Socket = newSocket()\nclient.connect(\"127.0.0.1\", Port(5555))\nstdout.writeLine(\"Client: connected to server on address 127.0.0.1:5555\")\n\nwhile true:\n  stdout.write(\"> \")\n  let message: string = stdin.readLine()\n  client.send(message & \"\\r\\L\")\n\nclient.close()\n\nIf the server and client are still running, kill the processes with Ctrl+C.\nExecute server.nim  and client.nim  again.\n\nnim c -r server.nim\n(out)server.nim(6)            server\n(out)net.nim(738)             bindAddr\n(out)oserr.nim(110)           raiseOSError\n(out)Error: unhandled exception: Address already in use [OSError]\n(out)Error: execution of an external program failed: '/home/tejas/Projects/simple-chat-server/server '\n\nIf you're getting the above error, it's an indication that the port on which our\nserver listens is being reserved for some reason. It happens when some process\nwhich is listening on that port is still running. Though in our case, even\nthough we stopped the server, it's still giving us this error. The reason here\nis something called as Linger Time. When a socket is closed (especially TCP\nsocket), some data which is marked to be sent, still exists in the socket's send\nbuffer. Unless the buffer is emptied or a timeout period (usually 30 seconds) is\npassed, the system reserves the port.\n\nTo fix this, we use the SO_REUSEADDR  property of sockets. If a socket is\ncreated with this option enabled, instead of throwing an error, it checks\nwhether a socket which is listening on the same port is in lingering state. If\nit is, the socket will use the same address with an assumption that the earlier\nsocket will release the port soon. In Nim, we have the OptReuseAddr  option\nwhich can be set as true  to enable SO_REUSEADDR  property of the socket.\n\nimport net\n\nvar server: Socket = newSocket()\nserver.setSockOpt(OptReuseAddr, true)\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nvar client: Socket = new(Socket)\nserver.accept(client)\nstdout.writeLine(\"Server: client connected\")\n\nwhile true:\n  let message: string = client.recvLine()\n\n  if message == \"\":\n    break\n\n  stdout.writeLine(\"Server: received from client: \", message)\n\nserver.close()\n\nLet's run the server and clients again.\n\nnim c -r server.nim \n(out)Server: started. Listening to new connections on port 5555...\n(out)Server: client connected\n(out)Server: received from client: Hello, world\n(out)Server: received from client: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n(out) \n\nnim c -r client.nim \n(out)Client: connected to server on address 127.0.0.1:5555\n(out)> Hello, world\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n(out)> \n\nAs you can see now, the messages are no longer truncated and they are received\nin the same manner as sent by the client.\n\nNow that we have spawned our basic server which accepts messages from a client,\nlet's spawn another client and see what happens. Don't kill the currently\nrunning server.nim  and client.nim  and instead run client.nim  again in a new\ntab/terminal and send a few messages.\n\nnim c -r client.nim \n(out)Client: connected to server on address 127.0.0.1:5555\n(out)> Hola, mundo\n(out)> What's 1 + 1? Answer is 10 in binary.\n(out)> \n\nIf you check the tab/terminal running our server, you wouldn't find these\nmessages at all. The server did not receive any message at all from our new\nclient. Can you identify the problem?\n\nNotice the lines 9-11, where we wait and accept connection from a client. The\nmoment a client connects, we never again accept and listen to data from new\nclients. As soon as we get a client, we just listen to new data from that\nclient. What we can do is, as we listen to new data from one client, we'll also\naccept new connections from other clients. Our flow would go like this, \n\n 1. Have an infinte loop (while true) which will keep our server running.\n 2. Inside the loop, accept new client connections and add those into our client\n    list.\n 3. For each client in the client list, check if there is any data.\n 4. If there is any data, print it out.\n\nHowever, there is a slight problem in step 2. In our server socket, as seen\nhere, the server will block the program flow while it is listening for new\nclients since server.accept()  is a blocking function. Thus our messages will\nonly be read once a client connects to the server. This is not even an\nacceptable case for our chat server.\n\nFortunately, sockets have an option to run in non-blocking mode. This means, our\n accept()  and recv()  functions will no longer block the code. If they have\nanything meaningful to return (like an incoming socket connection or a message),\nthey will return that and continue execution. Otherwise, they will throw an\nerror. Which means, we have to keep checking for new connections or messages and\nalso handle the error in case we don't get any. \n\nIn Nim, we enable non-blocking mode using the setBlocking()  function of the\nunderlying native socket. We'll also store all our connected sockets in a list\nso that we can iterate over them and receive messages from each of them. We'll\ndo both, accept new connections and receive data from sockets in a single\ninfinite loop, so that we keep accepting new connections while we receive\nmessages from existing ones. Let's give this a try.\n\nimport net\nimport nativesockets\n\nvar server: Socket = newSocket()\nserver.setSockOpt(OptReuseAddr, true)\nserver.getFd().setBlocking(false)\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nvar clients: seq[Socket] = @[]\n\nwhile true:\n  try:\n    var client: Socket = new(Socket)\n    server.accept(client)\n    clients.add(client)\n    stdout.writeLine(\"Server: client connected\")\n  except OSError:\n    discard\n\n  var clientsToRemove: seq[int] = @[]\n\n  for index, client in clients:\n    try:\n      let message: string = client.recvLine(timeout = 1)\n\n      if message == \"\":\n        clientsToRemove.add(index)\n\n      stdout.writeLine(\"Server: received from client: \", message)\n    except TimeoutError:\n        discard\n\n  for index in clientsToRemove:\n    clients.del(index)\n    stdout.writeLine(\"Server: client disconnected\")\n\nserver.close()\n\nExplanation\n6  Set the socket as non-blocking. We set it on the low-level native socket API.\n11  We need to store our connected clients in a list so that we can iterate over\nthem to get messages.\n13-37  Check if there are any existing connections. If yes, add them to the\nconnected socket list. Then for each connected socket, check whether there are\nany messages to be read.\n17  Add the connected socket in our clients list.\n19  In non-blocking mode, accept  throws an OSError  if there are no pending\nconnections at that moment. We ignore that exception because it's understandable\nthat we won't have any pending connections all the time.\n22  We maintain a list of clients which disconnected so that we remove those\nfrom our client list.\n24  Iterate over all the connected clients and receive messages from them one by\none.\n26  We set the timeout  to 1  since recvLine  call still blocks the code as the\ndefault timeout value is -1, which means block indefinitely till message is\nreceived.\n29  Mark the client for removal if it has disconnected.\n32  If no message is received within the timeout period, recvLine  throws a \nTimeoutError. Since we are operating in a non-blocking mode now, we shall ignore\nthis error.\n35-37  Remove any client marked for removal from the clients list.\n\nLet's execute our server now with multiple clients.\n\nnim c -r server.nim \n(out)Server: started. Listening to new connections on port 5555...\n(out)Server: client connected\n(out)Server: client connected\n(out)Server: received from client: Hello\n(out)Server: received from client: Hola\n(out)Server: received from client: Foo\n(out)Server: received from client: Bar\n(out)Server: received from client: \n(out)Server: client disconnected\n(out) \n\nnim c -r client.nim \n(out)Client: connected to server on address 127.0.0.1:5555\n(out)> Hello\n(out)> Foo\n(out)> \n\nnim c -r client.nim \n(out)Client: connected to server on address 127.0.0.1:5555\n(out)> Hola\n(out)> Bar\n(out)> ^CTraceback (most recent call last)\n(out)client.nim(9)            client\n(out)sysio.nim(185)           readLine\n(out)sysio.nim(158)           readLine\n(out)SIGINT: Interrupted by Ctrl-C.\n\nYay! We have it now. Our server accepts and receives messages from multiple\nclients. We have also managed client disconnections. What our server should do\nnow is send messages from one client to other clients, which a chat server\nshould do. Let's do it.\n\nThere's a major catch here. Since sending and receiving messages is a\nsimultaneous process, we would need some kinda GUI to handle these tasks\nasynchronously. Just think of it, suppose you are a client chatting on our\nserver, you wouldn't receive any messages until you input a message because the \nstdin.readLine()  will block all the code until the user hits Enter.\n\nWe can build a small GUI or use ncurses\n[https://www.linuxjournal.com/content/getting-started-ncurses]  to do that\ninteractively in terminal. Since both of these are outside the scope of this\ntutorial, we'll make a hack for now. We'll create two different types of clients\n- one for sending messages and one for receiving. We call them \nclient_sending.nim  and client_receiving.nim  respectively. client_sending.nim \nis exactly same as our client.nim.\n\nimport net\n\nlet client: Socket = newSocket()\nclient.connect(\"127.0.0.1\", Port(5555))\nstdout.writeLine(\"Client: connected to server on address 127.0.0.1:5555\")\n\nwhile true:\n  stdout.write(\"> \")\n  let message: string = stdin.readLine()\n  client.send(message & \"\\r\\L\")\n\nclient.close()\n\nimport net\n\nlet client: Socket = newSocket()\nclient.connect(\"127.0.0.1\", Port(5555))\nstdout.writeLine(\"Client: connected to server on address 127.0.0.1:5555\")\n\nwhile true:\n  let receivedMessage: string = client.recvLine()\n  stdout.writeLine(\"Message: \", receivedMessage)\n\nclient.close()\n\nWe would need some minor changes in our server.nim. Once the server receives a\nmessage, it will send it to all connected clients, except the one who sent the\nmessage.\n\nimport net\nimport nativesockets\n\nvar server: Socket = newSocket()\nserver.setSockOpt(OptReuseAddr, true)\nserver.getFd().setBlocking(false)\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nvar clients: seq[Socket] = @[]\n\nwhile true:\n  try:\n    var client: Socket = new(Socket)\n    server.accept(client)\n    clients.add(client)\n    stdout.writeLine(\"Server: client connected\")\n  except OSError:\n    discard\n\n  var clientsToRemove: seq[int] = @[]\n\n  for index, client in clients:\n    try:\n      let message: string = client.recvLine(timeout = 1)\n\n      if message == \"\":\n        clientsToRemove.add(index)\n        continue\n\n      for receivingClient in clients:\n        if receivingClient == client:\n          continue\n\n        receivingClient.send(message & \"\\r\\L\")\n\n      stdout.writeLine(\"Server: received from client: \", message)\n    except TimeoutError:\n        discard\n\n  for index in clientsToRemove:\n    clients.del(index)\n    stdout.writeLine(\"Server: client disconnected\")\n\nserver.close()\n\n\nOpen three terminals - one for server.nim, one for client_receiving.nim  and one\nfor client_sending.nim  - and execute the respective files. Try sending some\nmessages from sending client and see if you get those in the receiving client.\n\nnim c -r server.nim\n(out)Server: started. Listening to new connections on port 5555...\n(out)Server: client connected\n(out)Server: client connected\n(out)Server: received from client: Hello\n(out)Server: received from client: How are you?\n(out)Server: received from client: What are you doing?\n\nnim c -r client_sending.nim  \n(out)Client: connected to server on address 127.0.0.1:5555\n(out)> Hello\n(out)> How are you?\n(out)> What are you doing?\n(out)> \n\nnim c -r client_receiving.nim\n(out)Client: connected to server on address 127.0.0.1:5555\n(out)Message: Hello\n(out)Message: How are you?\n(out)Message: What are you doing?\n\nYou can open multiple terminals with client_receiving.nim  and \nclient_sending.nim  and send messages to one another. You would observer that\nall receiving clients receive messages from all sending clients. This is because\nour server is current broadcasting all messages to everyone. We can limit this\nbehavior, but we can skip that for now.\n\nWith this, you have completed a simple chat server with somewhat hacky clients\n(we'll fix that later). However, if you're working on a laptop, you would have\nnoticed the noise of your CPU fan every time you run the server. If you're\ncurious enough, check the output of top  command and you'll notice that the\nserver process is taking up some chunk of CPU.\n\nIt seems our code needs some fixing. Indeed it does. The way we are handling new\nconnections and incoming messages on our server is very inefficient. We are\npersistently asking the socket for new connection and a new message, that too in\nan infinite loop. If socket was an actual person, it would mean as if we are\npestering him every now and then for new information.\n\nWe have a solution for this. We'll make use of something that is core of lot of\nchat servers and surprisingly available on all platforms - select\n[http://man7.org/linux/man-pages/man2/select.2.html].\n\nIV. Using select  for optimization\nOf all the amazing things that happened in Unix world, one was select.\nOriginally appeared in BSD, select  was quickly adopted in other popular OS.\nIt's a kernel level utility which tells us which file descriptors are ready to\nbe read, written or have an error condition. It does this using low-level file\nmonitoring and interrupts, instead of iterating through all files and repeatedly\nchecking if they have changed. This is cleaner, efficient and puts minimal load\non our CPU.\n\nHow to use select  with our chat server?\nSince all connected clients are nothing but file descriptors, we'll tell select \nto monitor these given file descriptors and notify us when there's any data on\nthem that is yet to be read. Once select  notifies us, it will give us a list of\nfile descriptors which contain unread data. We'll iterate over these and see\nwhat data they have. Remember, when a socket receives data, it essentially means\nthat it has data to be read.\n\nselect  in Nim is a part ofselectors  package. It has two important methods of\nour concern - registerHandle  and select. registerHandle  takes in a file\ndescriptor, the events we want to listen to (read, write, error) and optional\ndata that we wish to receive when the event is triggered. select  takes in the\ntimeout period until which it will wait for events on the registered handles\n(file descriptors). If we want select  to block our code, we can set timeout as \n-1.\n\nLet's dive into the code.\n\nimport net\nimport nativesockets\nimport os\nimport selectors\n\nvar server: Socket = newSocket()\nvar select: Selector[int] = newSelector[int]()\nserver.setSockOpt(OptReuseAddr, true)\nserver.getFd().setBlocking(false)\nserver.bindAddr(Port(5555))\nserver.listen()\nstdout.writeLine(\"Server: started. Listening to new connections on port 5555...\")\n\nselect.registerHandle(server.getFd(), {Event.Read}, -1)\nvar clients: seq[Socket] = @[]\n\nwhile true:\n  var results: seq[ReadyKey] = select.select(-1)\n\n  for result in results:\n    if Event.Read in result.events:\n      if result.fd.SocketHandle == server.getFd():\n        var client: Socket = new(Socket)\n        server.accept(client)\n\n        client.getFd().setBlocking(false)\n        select.registerHandle(client.getFd(), {Event.Read}, -1)\n        clients.add(client)\n        stdout.writeLine(\"Server: client connected\")\n      else:\n        var sourceClient: Socket = newSocket(result.fd.SocketHandle)\n        var message = sourceClient.recvLine()\n\n        if message == \"\":\n          var clientsToRemove: seq[int] = @[]\n\n          for index, client in clients:\n            if client.getFd() == sourceClient.getFd():\n              clientsToRemove.add(index)\n\n          for index in clientsToRemove:\n            var client: Socket = clients[index]\n            select.unregister(result.fd)\n            clients.del(index)\n            stdout.writeLine(\"Server: client disconnected\")\n        else:\n          stdout.writeLine(\"Server: received from client: \", message)\n\n          for client in clients:\n            if client.getFd() == sourceClient.getFd():\n              continue\n\n            client.send(message & \"\\r\\L\")\n\nselect.close()\nserver.close()\n\nExplanation\n3-4  Import the packages required for select  functions. Note that we also\nimported os  package. This is because, in Nim v0.18 and lower, OSErrorCode  is\nnot explicity imported in the select  library. This is fixed in later versions.\n7  We define our selector. It requires a type too. This would be the type of the\ndata that we will associate in registerHandle  method.\n14  Register our server for read events. Note that read events on server socket\nwould be incoming socket connections. Since we don't have any data associated\nwith our server, we'll pass data as -1.\n18  select  returns a list of events along with their file descriptors for which\nthe specified event was triggered.\n21  We are only interested in read events.\n22  The result received from select  method contains the list of events  that\nwere captured and the file descriptor fd  for which the event was triggered.\nThough our fd  is enough, we compare the underlying socket for that file\ndescriptor. If the one that triggered a read event was our server, it must mean\nthat we recevied an incoming connection from a client.\n26  Since clients are also handled by select  we'll set them as non-blocking.\n27  Just like our server, listen to read events of our client. Read event on a\nconnected socket indicates that a new message has been arrived waiting to be\nread.\n30  If the read event was not triggered by server, then it must be client. This\nmeans we received a message from a client which we have to broadcast to other\nclients.\n31  Working with higher-level socket abstractions is easier. So, we convert our\nlow-level socket from file descriptor in the result into a higher-level socket.\n34-45  If a client is disconnected, remove it from clients list and unregister \nevents for that client.\n50  We could have compared the two objects directly. But since the newly created\n sourceClient  object as a copy, it's identity would be different. This would\ncause an inequality even though the underlying sockets are same.\n55  Like sockets, even select should be closed to signal the kernel that we are\nno longer listening to any events. This is a good practice to cleanly close\neverything before shutting down our program.\n\nLet's run the program now and see our CPU usage.\n\nnim c -r server.nim\n(out)Server: started. Listening to new connections on port 5555...\n(out)Server: client connected\n(out)Server: client connected\n(out)Server: received from client: Hello\n(out)Server: received from client: How are you?\n(out)Server: received from client: select seems to be doing great\n\nnim c -r client_sending.nim  \n(out)Client: connected to server on address 127.0.0.1:5555\n(out)> Hello\n(out)> How are you?\n(out)> select seems to be doing great\n(out)> \n\nnim c -r client_receiving.nim\n(out)Client: connected to server on address 127.0.0.1:5555\n(out)Message: Hello\n(out)Message: How are you?\n(out)Message: select seems to be doing great\n\nIt's not even showing in the top CPU consuming processes. That's great.\n\n\n--------------------------------------------------------------------------------\n\nWith this we complete our basic chat server. I know clients are still messy, but\nfor that, we would need to dive deep into the interactivity part which is beyond\nthe scope of this tutorial. Next up, we can add clients with identity\ninformation so that server can uniquely tag who sent which message, 1:1\nmessaging instead of group messaging and an interactive UI. I might write a\nfollow-up article with all of these in future.\n\nNim is an amazing language. To be able to do so much, in so little and clean\ncode is amazing. We haven't touched on code optimization yet, but I believe we\ncan use some micro-optimizations to make this code even faster. It's been a\ngreat exercise for me to move away from Python and learn interesting languages\nlike Nim. \n\nLet me know about your feedback. If you feel there were any issues with the\ntutorial, or writing style, or any errors in text or code, or any difficulty in\nunderstanding, or if you just wanna give a compliment, leave your comments\nbelow.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2019-01-06 16:15:59","updated_at":"2019-01-25 13:06:02","published_at":"2019-01-24 21:25:34","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d22225ae3cecf1d3b1cfe34","uuid":"159b873b-022e-4ee7-838f-2646af2234b7","title":"Code evolution: From dirty MVP to clean code","slug":"code-evolution-from-dirty-mvp-to-clean-code","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"language\":\"bash\",\"code\":\"take ~/Playground/code-evolution\",\"caption\":\"<code>take</code> is equivalent of <code>mkdir -p $1 &amp;&amp; cd $1</code>\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git init\\ncurl https://gitignore.io/api/flask,python -o .gitignore\"}],[\"code\",{\"language\":\"bash\",\"code\":\"python3 -m venv .venv\\nsource .venv/bin/activate\"}],[\"code\",{\"language\":\"bash\",\"code\":\"pip install flask\\npip freeze > requirements.txt\"}],[\"code\",{\"language\":\"bash\",\"code\":\"cat > README.md <<EOF\\n# Notefy\\nNote sharing for dummies\\n\\n## TODO\\n1. Complete this README\\nEOF\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git add --all\\ngit commit -m 'Setup project with core dependencies and README'\"}]],\"markups\":[[\"code\"],[\"a\",[\"href\",\"https://gitignore.io\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"We'll be building the server side implementation of a simple note sharing app, which would have the following features,\"]]],[3,\"ol\",[[[0,[],0,\"A note is just a text where the first line (limited to first 50 characters) is the note title\"]],[[0,[],0,\"You (user) can create, edit, delete and view notes that you created\"]],[[0,[],0,\"You can set the visibility of these notes to public (anyone can read), shared (only people with whom the note is shared can read) or private (only you can read)\"]]]],[1,\"p\",[[0,[],0,\"I'll be using Python for building this app. \"]]],[1,\"p\",[[0,[],0,\"However, in whatever step our project is, we will always ensure that,\"]]],[3,\"ol\",[[[0,[],0,\"Our code remains readable\"]],[[0,[],0,\"Our commits and commit messages are complete\"]]]],[1,\"h1\",[[0,[],0,\"0. Project setup\"]]],[1,\"p\",[[0,[],0,\"Let's create our project directory first\"]]],[10,0],[1,\"p\",[[0,[],0,\"We'll initialize our Git repository and copy an auto-generated \"],[0,[0],1,\".gitignore\"],[0,[],0,\" file from \"],[0,[1],1,\"gitignore.io\"]]],[10,1],[1,\"p\",[[0,[],0,\"Create a Python virtual environment for our project\"]]],[10,2],[1,\"p\",[[0,[],0,\"Install Flask\"]]],[10,3],[1,\"p\",[[0,[],0,\"Add a simple \"],[0,[0],1,\"README.md\"]]],[10,4],[1,\"p\",[[0,[],0,\"Make our first commit\"]]],[10,5],[1,\"h1\",[[0,[],0,\"MVP 1: Simple CRUD API for notes\"]]],[1,\"p\",[[0,[],0,\"To begin with, our MVP stage 1 would have the following objectives,\"]]],[3,\"ol\",[[[0,[],0,\"Simple CRUD API for notes\"]],[[0,[],0,\"No authentication or user data required\"]],[]]]]}","html":"<p>We'll be building the server side implementation of a simple note sharing app, which would have the following features,</p><ol><li>A note is just a text where the first line (limited to first 50 characters) is the note title</li><li>You (user) can create, edit, delete and view notes that you created</li><li>You can set the visibility of these notes to public (anyone can read), shared (only people with whom the note is shared can read) or private (only you can read)</li></ol><p>I'll be using Python for building this app. </p><p>However, in whatever step our project is, we will always ensure that,</p><ol><li>Our code remains readable</li><li>Our commits and commit messages are complete</li></ol><h1 id=\"0-project-setup\">0. Project setup</h1><p>Let's create our project directory first</p><!--kg-card-begin: code--><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-bash\">take ~/Playground/code-evolution</code></pre><figcaption><code>take</code> is equivalent of <code>mkdir -p $1 &amp;&amp; cd $1</code></figcaption></figure><!--kg-card-end: code--><p>We'll initialize our Git repository and copy an auto-generated <code>.gitignore</code> file from <a href=\"https://gitignore.io\">gitignore.io</a></p><!--kg-card-begin: code--><pre><code class=\"language-bash\">git init\ncurl https://gitignore.io/api/flask,python -o .gitignore</code></pre><!--kg-card-end: code--><p>Create a Python virtual environment for our project</p><!--kg-card-begin: code--><pre><code class=\"language-bash\">python3 -m venv .venv\nsource .venv/bin/activate</code></pre><!--kg-card-end: code--><p>Install Flask</p><!--kg-card-begin: code--><pre><code class=\"language-bash\">pip install flask\npip freeze &gt; requirements.txt</code></pre><!--kg-card-end: code--><p>Add a simple <code>README.md</code></p><!--kg-card-begin: code--><pre><code class=\"language-bash\">cat &gt; README.md &lt;&lt;EOF\n# Notefy\nNote sharing for dummies\n\n## TODO\n1. Complete this README\nEOF</code></pre><!--kg-card-end: code--><p>Make our first commit</p><!--kg-card-begin: code--><pre><code class=\"language-bash\">git add --all\ngit commit -m 'Setup project with core dependencies and README'</code></pre><!--kg-card-end: code--><h1 id=\"mvp-1-simple-crud-api-for-notes\">MVP 1: Simple CRUD API for notes</h1><p>To begin with, our MVP stage 1 would have the following objectives,</p><ol><li>Simple CRUD API for notes</li><li>No authentication or user data required</li><li></li></ol>","comment_id":"5d22225ae3cecf1d3b1cfe34","plaintext":"We'll be building the server side implementation of a simple note sharing app,\nwhich would have the following features,\n\n 1. A note is just a text where the first line (limited to first 50 characters)\n    is the note title\n 2. You (user) can create, edit, delete and view notes that you created\n 3. You can set the visibility of these notes to public (anyone can read),\n    shared (only people with whom the note is shared can read) or private (only\n    you can read)\n\nI'll be using Python for building this app. \n\nHowever, in whatever step our project is, we will always ensure that,\n\n 1. Our code remains readable\n 2. Our commits and commit messages are complete\n\n0. Project setup\nLet's create our project directory first\n\ntake ~/Playground/code-evolution\n\ntake  is equivalent of mkdir -p $1 && cd $1We'll initialize our Git repository\nand copy an auto-generated .gitignore  file from gitignore.io\n[https://gitignore.io]\n\ngit init\ncurl https://gitignore.io/api/flask,python -o .gitignore\n\nCreate a Python virtual environment for our project\n\npython3 -m venv .venv\nsource .venv/bin/activate\n\nInstall Flask\n\npip install flask\npip freeze > requirements.txt\n\nAdd a simple README.md\n\ncat > README.md <<EOF\n# Notefy\nNote sharing for dummies\n\n## TODO\n1. Complete this README\nEOF\n\nMake our first commit\n\ngit add --all\ngit commit -m 'Setup project with core dependencies and README'\n\nMVP 1: Simple CRUD API for notes\nTo begin with, our MVP stage 1 would have the following objectives,\n\n 1. Simple CRUD API for notes\n 2. No authentication or user data required\n 3.","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2019-07-07 16:48:26","updated_at":"2019-07-07 22:06:25","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5d5025d165d2576b7bb99d26","uuid":"681588bf-9bbb-4e66-a319-5c2de8d275e5","title":"Notes on writing tests","slug":"notes-on-writing-tests","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}","html":null,"comment_id":"5d5025d165d2576b7bb99d26","plaintext":null,"feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2019-08-11 14:27:29","updated_at":"2019-08-11 14:27:29","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null}],"users":[{"id":"1","name":"Tejas Jadhav","slug":"tejas","ghost_auth_access_token":null,"ghost_auth_id":null,"password":"$2a$10$uMaIs1g21IYku3EFJqMdsOlGLTg4hz.O/GbbdyKYV0IbcDNKVohSa","email":"me@tejasjadhav.xyz","profile_image":"//www.gravatar.com/avatar/08eb9766fc9e959140c2f1ea53004283?s=250&d=mm&r=x","cover_image":"/content/images/2018/12/IMG_20181007_075026_HDR-1.jpg","bio":"I'm a software engineer interested in building intelligent systems and exploring better ways of doing things.","website":"https://tejasjadhav.xyz","location":"Mumbai, Maharashtra, IN","facebook":null,"twitter":"@_tejasjadhav","accessibility":"{\"nightShift\":true}","status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":"[\"getting-started\"]","last_seen":"2020-04-20 17:23:49","created_at":"2018-12-08 18:49:48","updated_at":"2020-04-20 17:23:49"}],"posts_authors":[{"id":"5c0c1e7aabc169173fada4d0","post_id":"5c0c1e7aabc169173fada4c3","author_id":"1","sort_order":0},{"id":"5c0c1e7aabc169173fada4d4","post_id":"5c0c1e7aabc169173fada4c4","author_id":"1","sort_order":0},{"id":"5c0c1e7aabc169173fada4d9","post_id":"5c0c1e7aabc169173fada4c5","author_id":"1","sort_order":0},{"id":"5c0c1e7aabc169173fada4df","post_id":"5c0c1e7aabc169173fada4c6","author_id":"1","sort_order":0},{"id":"5c0c1e7aabc169173fada4e4","post_id":"5c0c1e7aabc169173fada4c7","author_id":"1","sort_order":0},{"id":"5c0c1e7babc169173fada4eb","post_id":"5c0c1e7aabc169173fada4c8","author_id":"1","sort_order":0},{"id":"5c0c1e7babc169173fada4f3","post_id":"5c0c1e7aabc169173fada4c9","author_id":"1","sort_order":0},{"id":"5c0c1e7babc169173fada4f4","post_id":"5c0c1e7aabc169173fada4ca","author_id":"1","sort_order":0},{"id":"5c0c1e7babc169173fada4fa","post_id":"5c0c1e7aabc169173fada4cb","author_id":"1","sort_order":0},{"id":"5c2dfa104614fe2f8b0b13ad","post_id":"5c2dfa104614fe2f8b0b13ac","author_id":"1","sort_order":0},{"id":"5c3229bfd149624e397d2921","post_id":"5c3229bfd149624e397d2920","author_id":"1","sort_order":0},{"id":"5d22225ae3cecf1d3b1cfe35","post_id":"5d22225ae3cecf1d3b1cfe34","author_id":"1","sort_order":0},{"id":"5d5025d165d2576b7bb99d27","post_id":"5d5025d165d2576b7bb99d26","author_id":"1","sort_order":0}],"roles":[{"id":"5c0c124b9753ac11eefc461d","name":"Administrator","description":"Administrators","created_at":"2018-12-08 18:49:47","updated_at":"2018-12-08 18:49:47"},{"id":"5c0c124b9753ac11eefc461e","name":"Editor","description":"Editors","created_at":"2018-12-08 18:49:47","updated_at":"2018-12-08 18:49:47"},{"id":"5c0c124b9753ac11eefc461f","name":"Author","description":"Authors","created_at":"2018-12-08 18:49:47","updated_at":"2018-12-08 18:49:47"},{"id":"5c0c124b9753ac11eefc4620","name":"Contributor","description":"Contributors","created_at":"2018-12-08 18:49:47","updated_at":"2018-12-08 18:49:47"},{"id":"5c0c124b9753ac11eefc4621","name":"Owner","description":"Blog Owner","created_at":"2018-12-08 18:49:47","updated_at":"2018-12-08 18:49:47"},{"id":"5c0c124b9753ac11eefc4622","name":"Admin Integration","description":"External Apps","created_at":"2018-12-08 18:49:47","updated_at":"2018-12-08 18:49:47"},{"id":"5d5024eb65d2576b7bb99d20","name":"DB Backup Integration","description":"Internal DB Backup Client","created_at":"2019-08-11 14:23:39","updated_at":"2019-08-11 14:23:39"}],"roles_users":[{"id":"5c0c124d9753ac11eefc4663","role_id":"5c0c124b9753ac11eefc461f","user_id":"5951f5fca366002ebd5dbef7"},{"id":"5c0c124e9753ac11eefc4731","role_id":"5c0c124b9753ac11eefc4621","user_id":"1"}],"permissions":[{"id":"5c0c124b9753ac11eefc4623","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2018-12-08 18:49:47","updated_at":"2018-12-08 18:49:47"},{"id":"5c0c124b9753ac11eefc4624","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2018-12-08 18:49:47","updated_at":"2018-12-08 18:49:47"},{"id":"5c0c124c9753ac11eefc4625","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2018-12-08 18:49:47","updated_at":"2018-12-08 18:49:47"},{"id":"5c0c124c9753ac11eefc4626","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4627","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4628","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4629","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc462a","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc462b","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc462c","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc462d","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc462e","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc462f","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4630","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4631","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4632","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4633","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4634","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4635","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4636","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4637","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4638","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4639","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc463a","name":"Activate themes","object_type":"theme","action_type":"activate","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc463b","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc463c","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc463d","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc463e","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc463f","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4640","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4641","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4642","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4643","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4644","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4645","name":"Browse clients","object_type":"client","action_type":"browse","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4646","name":"Read clients","object_type":"client","action_type":"read","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4647","name":"Edit clients","object_type":"client","action_type":"edit","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4648","name":"Add clients","object_type":"client","action_type":"add","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4649","name":"Delete clients","object_type":"client","action_type":"destroy","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc464a","name":"Browse subscribers","object_type":"subscriber","action_type":"browse","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc464b","name":"Read subscribers","object_type":"subscriber","action_type":"read","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc464c","name":"Edit subscribers","object_type":"subscriber","action_type":"edit","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc464d","name":"Add subscribers","object_type":"subscriber","action_type":"add","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc464e","name":"Delete subscribers","object_type":"subscriber","action_type":"destroy","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc464f","name":"Browse invites","object_type":"invite","action_type":"browse","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4650","name":"Read invites","object_type":"invite","action_type":"read","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4651","name":"Edit invites","object_type":"invite","action_type":"edit","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4652","name":"Add invites","object_type":"invite","action_type":"add","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4653","name":"Delete invites","object_type":"invite","action_type":"destroy","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4654","name":"Download redirects","object_type":"redirect","action_type":"download","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4655","name":"Upload redirects","object_type":"redirect","action_type":"upload","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4656","name":"Add webhooks","object_type":"webhook","action_type":"add","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4657","name":"Edit webhooks","object_type":"webhook","action_type":"edit","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4658","name":"Delete webhooks","object_type":"webhook","action_type":"destroy","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4659","name":"Browse integrations","object_type":"integration","action_type":"browse","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc465a","name":"Read integrations","object_type":"integration","action_type":"read","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc465b","name":"Edit integrations","object_type":"integration","action_type":"edit","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc465c","name":"Add integrations","object_type":"integration","action_type":"add","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc465d","name":"Delete integrations","object_type":"integration","action_type":"destroy","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc465e","name":"Browse API keys","object_type":"api_key","action_type":"browse","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc465f","name":"Read API keys","object_type":"api_key","action_type":"read","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4660","name":"Edit API keys","object_type":"api_key","action_type":"edit","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4661","name":"Add API keys","object_type":"api_key","action_type":"add","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5c0c124c9753ac11eefc4662","name":"Delete API keys","object_type":"api_key","action_type":"destroy","object_id":null,"created_at":"2018-12-08 18:49:48","updated_at":"2018-12-08 18:49:48"},{"id":"5ccb3635e32f5d38061531e6","name":"Browse Actions","object_type":"action","action_type":"browse","object_id":null,"created_at":"2019-05-02 18:25:57","updated_at":"2019-05-02 18:25:57"},{"id":"5cf7ef60e3cecf1d3b1cfe08","name":"Browse Members","object_type":"member","action_type":"browse","object_id":null,"created_at":"2019-06-05 16:35:44","updated_at":"2019-06-05 16:35:44"},{"id":"5cf7ef60e3cecf1d3b1cfe09","name":"Read Members","object_type":"member","action_type":"read","object_id":null,"created_at":"2019-06-05 16:35:44","updated_at":"2019-06-05 16:35:44"},{"id":"5cf7ef60e3cecf1d3b1cfe0a","name":"Edit Members","object_type":"member","action_type":"edit","object_id":null,"created_at":"2019-06-05 16:35:44","updated_at":"2019-06-05 16:35:44"},{"id":"5cf7ef60e3cecf1d3b1cfe0b","name":"Add Members","object_type":"member","action_type":"add","object_id":null,"created_at":"2019-06-05 16:35:44","updated_at":"2019-06-05 16:35:44"},{"id":"5cf7ef60e3cecf1d3b1cfe0c","name":"Delete Members","object_type":"member","action_type":"destroy","object_id":null,"created_at":"2019-06-05 16:35:44","updated_at":"2019-06-05 16:35:44"}],"permissions_users":[],"permissions_roles":[{"id":"5c0c124d9753ac11eefc4672","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124b9753ac11eefc4623"},{"id":"5c0c124d9753ac11eefc4673","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124b9753ac11eefc4624"},{"id":"5c0c124d9753ac11eefc4674","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4625"},{"id":"5c0c124d9753ac11eefc4675","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4626"},{"id":"5c0c124d9753ac11eefc4676","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4627"},{"id":"5c0c124d9753ac11eefc4677","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4628"},{"id":"5c0c124d9753ac11eefc4678","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4629"},{"id":"5c0c124d9753ac11eefc4679","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc462a"},{"id":"5c0c124d9753ac11eefc467a","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc462b"},{"id":"5c0c124d9753ac11eefc467b","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc462c"},{"id":"5c0c124d9753ac11eefc467c","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc462d"},{"id":"5c0c124d9753ac11eefc467d","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc462e"},{"id":"5c0c124d9753ac11eefc467e","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc462f"},{"id":"5c0c124d9753ac11eefc467f","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4630"},{"id":"5c0c124d9753ac11eefc4680","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4631"},{"id":"5c0c124d9753ac11eefc4681","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4632"},{"id":"5c0c124d9753ac11eefc4682","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4633"},{"id":"5c0c124d9753ac11eefc4683","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4634"},{"id":"5c0c124d9753ac11eefc4684","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4635"},{"id":"5c0c124d9753ac11eefc4685","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4636"},{"id":"5c0c124d9753ac11eefc4686","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4637"},{"id":"5c0c124d9753ac11eefc4687","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4638"},{"id":"5c0c124d9753ac11eefc4688","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4639"},{"id":"5c0c124d9753ac11eefc4689","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc463a"},{"id":"5c0c124d9753ac11eefc468a","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc463b"},{"id":"5c0c124d9753ac11eefc468b","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc463c"},{"id":"5c0c124d9753ac11eefc468c","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc463d"},{"id":"5c0c124d9753ac11eefc468d","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc463e"},{"id":"5c0c124d9753ac11eefc468e","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc463f"},{"id":"5c0c124d9753ac11eefc468f","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4640"},{"id":"5c0c124d9753ac11eefc4690","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4641"},{"id":"5c0c124d9753ac11eefc4691","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4642"},{"id":"5c0c124d9753ac11eefc4692","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4643"},{"id":"5c0c124d9753ac11eefc4693","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4644"},{"id":"5c0c124d9753ac11eefc4694","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4645"},{"id":"5c0c124d9753ac11eefc4695","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4646"},{"id":"5c0c124d9753ac11eefc4696","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4647"},{"id":"5c0c124d9753ac11eefc4697","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4648"},{"id":"5c0c124d9753ac11eefc4698","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4649"},{"id":"5c0c124d9753ac11eefc4699","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc464a"},{"id":"5c0c124d9753ac11eefc469a","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc464b"},{"id":"5c0c124d9753ac11eefc469b","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc464c"},{"id":"5c0c124d9753ac11eefc469c","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc464d"},{"id":"5c0c124d9753ac11eefc469d","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc464e"},{"id":"5c0c124d9753ac11eefc469e","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc464f"},{"id":"5c0c124d9753ac11eefc469f","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4650"},{"id":"5c0c124d9753ac11eefc46a0","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4651"},{"id":"5c0c124d9753ac11eefc46a1","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4652"},{"id":"5c0c124d9753ac11eefc46a2","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4653"},{"id":"5c0c124d9753ac11eefc46a3","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4654"},{"id":"5c0c124d9753ac11eefc46a4","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4655"},{"id":"5c0c124d9753ac11eefc46a5","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4656"},{"id":"5c0c124d9753ac11eefc46a6","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4657"},{"id":"5c0c124d9753ac11eefc46a7","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4658"},{"id":"5c0c124d9753ac11eefc46a8","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4659"},{"id":"5c0c124d9753ac11eefc46a9","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc465a"},{"id":"5c0c124d9753ac11eefc46aa","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc465b"},{"id":"5c0c124d9753ac11eefc46ab","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc465c"},{"id":"5c0c124d9753ac11eefc46ac","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc465d"},{"id":"5c0c124d9753ac11eefc46ad","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc465e"},{"id":"5c0c124d9753ac11eefc46ae","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc465f"},{"id":"5c0c124d9753ac11eefc46af","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4660"},{"id":"5c0c124d9753ac11eefc46b0","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4661"},{"id":"5c0c124d9753ac11eefc46b1","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5c0c124c9753ac11eefc4662"},{"id":"5c0c124d9753ac11eefc46b2","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4626"},{"id":"5c0c124d9753ac11eefc46b3","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4627"},{"id":"5c0c124d9753ac11eefc46b4","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4628"},{"id":"5c0c124d9753ac11eefc46b5","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4629"},{"id":"5c0c124d9753ac11eefc46b6","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc462a"},{"id":"5c0c124d9753ac11eefc46b7","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc462b"},{"id":"5c0c124d9753ac11eefc46b8","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc462c"},{"id":"5c0c124d9753ac11eefc46b9","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc462d"},{"id":"5c0c124d9753ac11eefc46ba","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc462e"},{"id":"5c0c124d9753ac11eefc46bb","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc462f"},{"id":"5c0c124d9753ac11eefc46bc","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4630"},{"id":"5c0c124d9753ac11eefc46bd","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4631"},{"id":"5c0c124d9753ac11eefc46be","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4632"},{"id":"5c0c124d9753ac11eefc46bf","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4633"},{"id":"5c0c124d9753ac11eefc46c0","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4634"},{"id":"5c0c124d9753ac11eefc46c1","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4635"},{"id":"5c0c124d9753ac11eefc46c2","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4636"},{"id":"5c0c124d9753ac11eefc46c3","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4637"},{"id":"5c0c124d9753ac11eefc46c4","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4638"},{"id":"5c0c124d9753ac11eefc46c5","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4639"},{"id":"5c0c124d9753ac11eefc46c6","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc463a"},{"id":"5c0c124d9753ac11eefc46c7","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc463b"},{"id":"5c0c124d9753ac11eefc46c8","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc463c"},{"id":"5c0c124d9753ac11eefc46c9","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc463d"},{"id":"5c0c124d9753ac11eefc46ca","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc463e"},{"id":"5c0c124d9753ac11eefc46cb","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc463f"},{"id":"5c0c124d9753ac11eefc46cc","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4640"},{"id":"5c0c124d9753ac11eefc46cd","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4641"},{"id":"5c0c124d9753ac11eefc46ce","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4642"},{"id":"5c0c124d9753ac11eefc46cf","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4643"},{"id":"5c0c124d9753ac11eefc46d0","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4644"},{"id":"5c0c124d9753ac11eefc46d1","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4645"},{"id":"5c0c124d9753ac11eefc46d2","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4646"},{"id":"5c0c124d9753ac11eefc46d3","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4647"},{"id":"5c0c124d9753ac11eefc46d4","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4648"},{"id":"5c0c124d9753ac11eefc46d5","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4649"},{"id":"5c0c124d9753ac11eefc46d6","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc464a"},{"id":"5c0c124d9753ac11eefc46d7","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc464b"},{"id":"5c0c124d9753ac11eefc46d8","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc464c"},{"id":"5c0c124d9753ac11eefc46d9","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc464d"},{"id":"5c0c124d9753ac11eefc46da","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc464e"},{"id":"5c0c124d9753ac11eefc46db","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc464f"},{"id":"5c0c124d9753ac11eefc46dc","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4650"},{"id":"5c0c124d9753ac11eefc46dd","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4651"},{"id":"5c0c124d9753ac11eefc46de","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4652"},{"id":"5c0c124d9753ac11eefc46df","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4653"},{"id":"5c0c124d9753ac11eefc46e0","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4654"},{"id":"5c0c124d9753ac11eefc46e1","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4655"},{"id":"5c0c124d9753ac11eefc46e2","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4656"},{"id":"5c0c124d9753ac11eefc46e3","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4657"},{"id":"5c0c124d9753ac11eefc46e4","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5c0c124c9753ac11eefc4658"},{"id":"5c0c124d9753ac11eefc46e5","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc462a"},{"id":"5c0c124d9753ac11eefc46e6","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc462b"},{"id":"5c0c124d9753ac11eefc46e7","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc462c"},{"id":"5c0c124d9753ac11eefc46e8","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc462d"},{"id":"5c0c124d9753ac11eefc46e9","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc462e"},{"id":"5c0c124d9753ac11eefc46ea","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc462f"},{"id":"5c0c124d9753ac11eefc46eb","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4630"},{"id":"5c0c124d9753ac11eefc46ec","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4632"},{"id":"5c0c124d9753ac11eefc46ed","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4633"},{"id":"5c0c124d9753ac11eefc46ee","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4634"},{"id":"5c0c124d9753ac11eefc46ef","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4635"},{"id":"5c0c124d9753ac11eefc46f0","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4636"},{"id":"5c0c124d9753ac11eefc46f1","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4637"},{"id":"5c0c124d9753ac11eefc46f2","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc463e"},{"id":"5c0c124d9753ac11eefc46f3","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc463f"},{"id":"5c0c124d9753ac11eefc46f4","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4640"},{"id":"5c0c124d9753ac11eefc46f5","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4641"},{"id":"5c0c124d9753ac11eefc46f6","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4642"},{"id":"5c0c124d9753ac11eefc46f7","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4643"},{"id":"5c0c124d9753ac11eefc46f8","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4644"},{"id":"5c0c124e9753ac11eefc46f9","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4645"},{"id":"5c0c124e9753ac11eefc46fa","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4646"},{"id":"5c0c124e9753ac11eefc46fb","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4647"},{"id":"5c0c124e9753ac11eefc46fc","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4648"},{"id":"5c0c124e9753ac11eefc46fd","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4649"},{"id":"5c0c124e9753ac11eefc46fe","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc464d"},{"id":"5c0c124e9753ac11eefc46ff","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc464f"},{"id":"5c0c124e9753ac11eefc4700","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4650"},{"id":"5c0c124e9753ac11eefc4701","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4651"},{"id":"5c0c124e9753ac11eefc4702","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4652"},{"id":"5c0c124e9753ac11eefc4703","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4653"},{"id":"5c0c124e9753ac11eefc4704","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4638"},{"id":"5c0c124e9753ac11eefc4705","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc462a"},{"id":"5c0c124e9753ac11eefc4706","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc462b"},{"id":"5c0c124e9753ac11eefc4707","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc462d"},{"id":"5c0c124e9753ac11eefc4708","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc462f"},{"id":"5c0c124e9753ac11eefc4709","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc4630"},{"id":"5c0c124e9753ac11eefc470a","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc4632"},{"id":"5c0c124e9753ac11eefc470b","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc4633"},{"id":"5c0c124e9753ac11eefc470c","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc4634"},{"id":"5c0c124e9753ac11eefc470d","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc4636"},{"id":"5c0c124e9753ac11eefc470e","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc463e"},{"id":"5c0c124e9753ac11eefc470f","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc463f"},{"id":"5c0c124e9753ac11eefc4710","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc4644"},{"id":"5c0c124e9753ac11eefc4711","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc4645"},{"id":"5c0c124e9753ac11eefc4712","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc4646"},{"id":"5c0c124e9753ac11eefc4713","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc4647"},{"id":"5c0c124e9753ac11eefc4714","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc4648"},{"id":"5c0c124e9753ac11eefc4715","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc4649"},{"id":"5c0c124e9753ac11eefc4716","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc464d"},{"id":"5c0c124e9753ac11eefc4717","role_id":"5c0c124b9753ac11eefc461f","permission_id":"5c0c124c9753ac11eefc4638"},{"id":"5c0c124e9753ac11eefc4718","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc462a"},{"id":"5c0c124e9753ac11eefc4719","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc462b"},{"id":"5c0c124e9753ac11eefc471a","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc462d"},{"id":"5c0c124e9753ac11eefc471b","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc462f"},{"id":"5c0c124e9753ac11eefc471c","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc4630"},{"id":"5c0c124e9753ac11eefc471d","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc4632"},{"id":"5c0c124e9753ac11eefc471e","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc4633"},{"id":"5c0c124e9753ac11eefc471f","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc4634"},{"id":"5c0c124e9753ac11eefc4720","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc463e"},{"id":"5c0c124e9753ac11eefc4721","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc463f"},{"id":"5c0c124e9753ac11eefc4722","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc4644"},{"id":"5c0c124e9753ac11eefc4723","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc4645"},{"id":"5c0c124e9753ac11eefc4724","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc4646"},{"id":"5c0c124e9753ac11eefc4725","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc4647"},{"id":"5c0c124e9753ac11eefc4726","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc4648"},{"id":"5c0c124e9753ac11eefc4727","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc4649"},{"id":"5c0c124e9753ac11eefc4728","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc464d"},{"id":"5c0c124e9753ac11eefc4729","role_id":"5c0c124b9753ac11eefc4620","permission_id":"5c0c124c9753ac11eefc4638"},{"id":"5ccb3636e32f5d38061531e7","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5ccb3635e32f5d38061531e6"},{"id":"5ccb3636e32f5d38061531e8","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5ccb3635e32f5d38061531e6"},{"id":"5ccb3636e32f5d38061531eb","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4627"},{"id":"5ccb3636e32f5d38061531ec","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4628"},{"id":"5ccb3636e32f5d38061531ed","role_id":"5c0c124b9753ac11eefc461e","permission_id":"5c0c124c9753ac11eefc4629"},{"id":"5cf7ef61e3cecf1d3b1cfe0d","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5cf7ef60e3cecf1d3b1cfe08"},{"id":"5cf7ef61e3cecf1d3b1cfe0e","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5cf7ef60e3cecf1d3b1cfe09"},{"id":"5cf7ef61e3cecf1d3b1cfe0f","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5cf7ef60e3cecf1d3b1cfe0a"},{"id":"5cf7ef61e3cecf1d3b1cfe10","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5cf7ef60e3cecf1d3b1cfe0b"},{"id":"5cf7ef61e3cecf1d3b1cfe11","role_id":"5c0c124b9753ac11eefc461d","permission_id":"5cf7ef60e3cecf1d3b1cfe0c"},{"id":"5cf7ef61e3cecf1d3b1cfe12","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5cf7ef60e3cecf1d3b1cfe08"},{"id":"5cf7ef61e3cecf1d3b1cfe13","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5cf7ef60e3cecf1d3b1cfe09"},{"id":"5cf7ef61e3cecf1d3b1cfe14","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5cf7ef60e3cecf1d3b1cfe0a"},{"id":"5cf7ef61e3cecf1d3b1cfe15","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5cf7ef60e3cecf1d3b1cfe0b"},{"id":"5cf7ef61e3cecf1d3b1cfe16","role_id":"5c0c124b9753ac11eefc4622","permission_id":"5cf7ef60e3cecf1d3b1cfe0c"},{"id":"5d5024eb65d2576b7bb99d21","role_id":"5d5024eb65d2576b7bb99d20","permission_id":"5c0c124b9753ac11eefc4623"},{"id":"5d5024eb65d2576b7bb99d22","role_id":"5d5024eb65d2576b7bb99d20","permission_id":"5c0c124b9753ac11eefc4624"},{"id":"5d5024eb65d2576b7bb99d23","role_id":"5d5024eb65d2576b7bb99d20","permission_id":"5c0c124c9753ac11eefc4625"}],"permissions_apps":[],"settings":[{"id":"5c0c124e9753ac11eefc4732","key":"db_hash","value":"990ebe2f-ddf0-4ed4-a2b0-bf21a6ece30b","type":"core","created_at":"2018-12-08 18:49:50","updated_at":"2018-12-08 18:49:50"},{"id":"5c0c124e9753ac11eefc4733","key":"next_update_check","value":"1587489830","type":"core","created_at":"2018-12-08 18:49:50","updated_at":"2020-04-20 17:23:50"},{"id":"5c0c124e9753ac11eefc4734","key":"notifications","value":"[{\"dismissible\":true,\"location\":\"bottom\",\"status\":\"alert\",\"id\":\"98160ba0-36ba-11ea-bf05-2f7a36f84748\",\"custom\":false,\"createdAt\":\"2020-01-14T10:42:43.000Z\",\"type\":\"info\",\"top\":false,\"message\":\"Ghost <a href=\\\"https://github.com/TryGhost/Ghost/releases\\\">2.38.0</a> has been released, <a href=\\\"https://ghost.org/update/?v=2.27.0\\\">click here</a> to upgrade.\",\"seen\":false,\"addedAt\":\"2020-02-22T12:27:42.941Z\"},{\"dismissible\":true,\"location\":\"bottom\",\"status\":\"alert\",\"id\":\"f6eb6536-a655-44ac-a6a4-0f7574c7308b\",\"custom\":true,\"createdAt\":\"2020-03-13T11:26:05.000Z\",\"type\":\"info\",\"top\":true,\"message\":\"<strong>Ghost 3.0 is now available</strong> - You are currently using an old version of Ghost which means you don't have access to the latest features. <a href=\\\"https://ghost.org/3/\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">Read more!</a>\",\"seen\":false,\"addedAt\":\"2020-04-03T12:32:50.647Z\"}]","type":"core","created_at":"2018-12-08 18:49:50","updated_at":"2020-04-03 12:32:50"},{"id":"5c0c124e9753ac11eefc4735","key":"session_secret","value":"b4e48ff2a39983e549846d7c2d8c454e16a595d6c18de347038863c1ec2298d5","type":"core","created_at":"2018-12-08 18:49:50","updated_at":"2018-12-08 18:49:50"},{"id":"5c0c124e9753ac11eefc4736","key":"title","value":"Tejas Jadhav","type":"blog","created_at":"2017-03-13 16:08:07","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c124e9753ac11eefc4737","key":"description","value":"Thoughts, stories and ideas.","type":"blog","created_at":"2017-03-13 16:08:07","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c124e9753ac11eefc4738","key":"logo","value":"","type":"blog","created_at":"2017-03-13 16:08:07","updated_at":"2018-12-08 19:48:16"},{"id":"5c0c124e9753ac11eefc4739","key":"cover_image","value":"/content/images/2018/12/IMG_20181007_075026_HDR.jpg","type":"blog","created_at":"2017-03-13 16:08:07","updated_at":"2018-12-06 21:38:11"},{"id":"5c0c124e9753ac11eefc473a","key":"icon","value":"","type":"blog","created_at":"2017-08-01 18:24:37","updated_at":"2018-12-08 19:44:40"},{"id":"5c0c124e9753ac11eefc473b","key":"default_locale","value":"en","type":"blog","created_at":"2017-08-01 18:24:37","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c124e9753ac11eefc473c","key":"active_timezone","value":"Asia/Kolkata","type":"blog","created_at":"2017-03-13 16:08:07","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c124e9753ac11eefc473d","key":"force_i18n","value":"true","type":"blog","created_at":"2017-08-01 18:24:37","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c124e9753ac11eefc473f","key":"amp","value":"true","type":"blog","created_at":"2017-03-13 16:08:07","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c124e9753ac11eefc4740","key":"ghost_head","value":"<script>\n\tvar ga_id = 'UA-89679997-1';\n    var disqus_shortname = 'tejasjadhav';\n    var disqus = 'tejasjadhav';\n\tvar social_link = {\n        'twitter': 'https://twitter.com/_tejasjadhav',\n        'linkedin': 'https://in.linkedin.com/in/-tejasjadhav',\n        'github': 'https://github.com/tejasjadhav',\n        'rss':'https://blog.tejasjadhav.xyz/rss/'\n    }\n</script>","type":"blog","created_at":"2017-03-13 16:08:07","updated_at":"2018-12-06 21:21:53"},{"id":"5c0c124e9753ac11eefc4741","key":"ghost_foot","value":"","type":"blog","created_at":"2017-03-13 16:08:07","updated_at":"2018-12-08 20:56:13"},{"id":"5c0c124e9753ac11eefc4742","key":"facebook","value":"","type":"blog","created_at":"2017-03-13 16:08:07","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c124e9753ac11eefc4743","key":"twitter","value":"@_tejasjadhav","type":"blog","created_at":"2017-03-13 16:08:07","updated_at":"2018-12-06 21:15:09"},{"id":"5c0c124e9753ac11eefc4744","key":"labs","value":"{\"publicAPI\":false,\"subscribers\":true,\"internalTags\":true}","type":"blog","created_at":"2017-03-13 16:08:07","updated_at":"2019-05-02 18:31:40"},{"id":"5c0c124e9753ac11eefc4745","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"Portfolio\",\"url\":\"https://tejasjadhav.xyz\"}]","type":"blog","created_at":"2017-03-13 16:08:07","updated_at":"2018-12-06 21:17:19"},{"id":"5c0c124e9753ac11eefc4746","key":"slack","value":"[]","type":"blog","created_at":"2017-03-13 16:08:07","updated_at":"2018-12-08 19:44:40"},{"id":"5c0c124e9753ac11eefc4747","key":"unsplash","value":"{\"isActive\":true,\"applicationId\":\"998810952bf5ed816032c8db6ff4325bbba538945ae12599a1110c9e0d9c94c1\",\"errors\":{},\"hasValidated\":[]}","type":"blog","created_at":"2017-08-26 20:00:57","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c124e9753ac11eefc4748","key":"active_theme","value":"Tasper","type":"theme","created_at":"2018-12-08 18:49:50","updated_at":"2019-07-07 19:35:58"},{"id":"5c0c124e9753ac11eefc4749","key":"active_apps","value":"[]","type":"app","created_at":"2017-08-01 18:24:37","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c124e9753ac11eefc474a","key":"installed_apps","value":"[]","type":"app","created_at":"2017-08-01 18:24:37","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c124e9753ac11eefc474b","key":"is_private","value":"false","type":"private","created_at":"2017-03-13 16:08:07","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c124e9753ac11eefc474c","key":"password","value":"null","type":"private","created_at":"2017-03-13 16:08:07","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c124e9753ac11eefc474d","key":"public_hash","value":"0e98cde1963f6f3a8b56d9352101ad","type":"private","created_at":"2018-02-09 15:59:25","updated_at":"2018-02-09 15:59:25"},{"id":"5c2fabe5d149624e397d2914","key":"members_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBALqNvqW9GeUmUS/7SgC6Ja4Z1ykqZ4CRp1O4KU1OeKjR8wzbKv/kBYub/mNZwnAG\nouue16N3adRVPZ02glcki+ZcPd4VZ65+ReOs/ceM4GIouAXUjydxwvx6CIHooa4BfGkFxavH\nyL/5d/Lem9tEZwkNrjaf5ZTB7INNqeRAEBORAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"members","created_at":"2019-01-04 18:54:29","updated_at":"2019-01-04 18:54:29"},{"id":"5c2fabe5d149624e397d2915","key":"members_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICWwIBAAKBgQC6jb6lvRnlJlEv+0oAuiWuGdcpKmeAkadTuClNTnio0fMM2yr/5AWLm/5j\nWcJwBqLrntejd2nUVT2dNoJXJIvmXD3eFWeufkXjrP3HjOBiKLgF1I8nccL8egiB6KGuAXxp\nBcWrx8i/+Xfy3pvbRGcJDa42n+WUweyDTankQBATkQIDAQABAoGAXn/a6T4HVgq46aNTc1bY\nK38vfMzcLUabCk+prF1pxarEgeiruYAaRwQ4Mr+PPQw/jzehaE7fLw4W7gJkuBvtOV4g4onk\nL6dTdkxMzASK91cZI/8oWGA3z+EupHbO2u3UYcLeRpjcM0tdjB942yHzqniLqk5h+tlW/Ppd\nlDEw74ECQQD8X/mL3qGjvN/Cl+3Mgh1YnkZ6O/fm1cXRFYX6XmIo2zOIHdglsSeKxEZCP36k\nC8LQ5HAhXHflkq738c+x9nSpAkEAvTu79FDicfoI/dJobl/AEee5NltVG5rPSjgsNS5qhDog\nmVbBDjq6GnUALZaIAQTzYrIoIm31nY0fYuK8JY6QqQJAZmUSPJuhfWt+Zdd6lgUcnv3onmOC\nW1fUoNZYu5JbxTPanpltPy23W2fzEaHtYeWbr2Ff1UlNJAn1j4e+uvfBsQJAPhUj49LJh/Ut\nEAEAy/1T6UvpwsCSGn1eto3ZSxVQUtMzMLt6mO2Bcv6hsVMqiZMTOnUSn8ENjMPo4Stb6MJu\nCQJAPb/GxwxjScX7o4onkxS22ba+CYPPoRE6teO8atTiM1sccbALQSvY57mYKQax1BsI3ALY\n+DtWBXVOeE79q/9XlQ==\n-----END RSA PRIVATE KEY-----\n","type":"members","created_at":"2019-01-04 18:54:29","updated_at":"2019-01-04 18:54:29"},{"id":"5c2fabe5d149624e397d2916","key":"members_session_secret","value":"cacfed696dd26abd9a7ade217ff9f10ba50d81f235e137425b4d46c5fa0f40d8","type":"members","created_at":"2019-01-04 18:54:29","updated_at":"2019-01-04 18:54:29"},{"id":"5ccb3634e32f5d38061531e4","key":"theme_session_secret","value":"01701e7b120aaa4deeda50dd0075daa60ac663868d29067346a3f9484a0d6017","type":"core","created_at":"2019-05-02 18:25:56","updated_at":"2019-05-02 18:25:56"},{"id":"5ccb3634e32f5d38061531e5","key":"members_subscription_settings","value":"{\"isPaid\":false,\"paymentProcessors\":[{\"adapter\":\"stripe\",\"config\":{\"secret_token\":\"\",\"public_token\":\"\",\"product\":{\"name\":\"Ghost Subscription\"},\"plans\":[{\"name\":\"Monthly\",\"currency\":\"usd\",\"interval\":\"month\",\"amount\":\"\"},{\"name\":\"Yearly\",\"currency\":\"usd\",\"interval\":\"year\",\"amount\":\"\"}]}}]}","type":"members","created_at":"2019-05-02 18:25:56","updated_at":"2019-05-02 18:25:56"},{"id":"5d5024e965d2576b7bb99d18","key":"meta_title","value":null,"type":"blog","created_at":"2019-08-11 14:23:37","updated_at":"2019-08-11 14:23:37"},{"id":"5d5024e965d2576b7bb99d19","key":"meta_description","value":null,"type":"blog","created_at":"2019-08-11 14:23:37","updated_at":"2019-08-11 14:23:37"},{"id":"5d5024e965d2576b7bb99d1a","key":"og_image","value":null,"type":"blog","created_at":"2019-08-11 14:23:37","updated_at":"2019-08-11 14:23:37"},{"id":"5d5024e965d2576b7bb99d1b","key":"og_title","value":null,"type":"blog","created_at":"2019-08-11 14:23:37","updated_at":"2019-08-11 14:23:37"},{"id":"5d5024e965d2576b7bb99d1c","key":"og_description","value":null,"type":"blog","created_at":"2019-08-11 14:23:37","updated_at":"2019-08-11 14:23:37"},{"id":"5d5024e965d2576b7bb99d1d","key":"twitter_image","value":null,"type":"blog","created_at":"2019-08-11 14:23:37","updated_at":"2019-08-11 14:23:37"},{"id":"5d5024e965d2576b7bb99d1e","key":"twitter_title","value":null,"type":"blog","created_at":"2019-08-11 14:23:37","updated_at":"2019-08-11 14:23:37"},{"id":"5d5024e965d2576b7bb99d1f","key":"twitter_description","value":null,"type":"blog","created_at":"2019-08-11 14:23:37","updated_at":"2019-08-11 14:23:37"}],"tags":[{"id":"5c0c124b9753ac11eefc4618","name":"Getting Started","slug":"getting-started","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-12-08 18:49:47","updated_at":"2018-12-08 18:49:47"},{"id":"5c0c1e7aabc169173fada4a2","name":"actor model","slug":"actor-model","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4a3","name":"architecture","slug":"architecture","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4a4","name":"model","slug":"model","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4a5","name":"concept","slug":"concept","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4a6","name":"general","slug":"general","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:34:17"},{"id":"5c0c1e7aabc169173fada4a7","name":"geocentrism","slug":"geocentrism","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:34:17"},{"id":"5c0c1e7aabc169173fada4a8","name":"heliocentrism","slug":"heliocentrism","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:34:17"},{"id":"5c0c1e7aabc169173fada4a9","name":"reshare","slug":"reshare","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:34:17"},{"id":"5c0c1e7aabc169173fada4aa","name":"opinion","slug":"opinion","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4ab","name":"biased opinions","slug":"biased-opinions","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4ac","name":"coin","slug":"coin","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4ad","name":"one piece","slug":"one-piece","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:31:34"},{"id":"5c0c1e7aabc169173fada4ae","name":"the dark knight rises","slug":"the-dark-knight-rises","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:31:34"},{"id":"5c0c1e7aabc169173fada4af","name":"eiichiro oda","slug":"eiichiro-oda","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:31:34"},{"id":"5c0c1e7aabc169173fada4b0","name":"christopher nolan","slug":"christopher-nolan","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:31:34"},{"id":"5c0c1e7aabc169173fada4b1","name":"similarities","slug":"similarities","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-03-13 16:10:14","updated_at":"2018-02-09 16:31:34"},{"id":"5c0c1e7aabc169173fada4b2","name":"python","slug":"python","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-15 18:50:34","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4b3","name":"dsl","slug":"dsl","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-15 18:50:34","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4b4","name":"programming","slug":"programming","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-15 18:50:34","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4b5","name":"life experience","slug":"life-experience","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-15 19:08:22","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4b6","name":"mi notebook air","slug":"mi-notebook-air","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-15 19:08:22","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4b7","name":"xiaomi","slug":"xiaomi","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-15 19:08:22","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4b8","name":"customs","slug":"customs","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-15 19:08:22","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4b9","name":"aliexpress","slug":"aliexpress","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-15 19:08:22","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4ba","name":"import","slug":"import","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-06-15 19:08:22","updated_at":"2018-02-09 16:02:52"},{"id":"5c0c1e7aabc169173fada4bb","name":"project","slug":"project","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-11-25 08:25:41","updated_at":"2018-11-25 08:25:41"},{"id":"5c0c1e7aabc169173fada4bc","name":"library","slug":"library","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-11-25 08:25:41","updated_at":"2018-11-25 08:25:41"},{"id":"5c0c1e7aabc169173fada4bd","name":"scheduler","slug":"scheduler","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-11-25 08:25:41","updated_at":"2018-11-25 08:25:41"},{"id":"5c0c1e7aabc169173fada4be","name":"django","slug":"django","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-11-25 08:25:41","updated_at":"2018-11-25 08:25:41"},{"id":"5c0c1e7aabc169173fada4bf","name":"celery","slug":"celery","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-11-25 08:25:41","updated_at":"2018-11-25 08:25:41"},{"id":"5c0c1e7aabc169173fada4c0","name":"debugging","slug":"debugging","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-12-06 20:49:32","updated_at":"2018-12-06 20:49:32"},{"id":"5c0c1e7aabc169173fada4c1","name":"localoye","slug":"localoye","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-12-06 20:49:32","updated_at":"2018-12-06 20:49:32"},{"id":"5c308cf2d149624e397d2918","name":"database","slug":"database","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-01-05 10:54:42","updated_at":"2019-01-05 10:54:42"},{"id":"5c308cf2d149624e397d2919","name":"table","slug":"table","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-01-05 10:54:42","updated_at":"2019-01-05 10:54:42"},{"id":"5c308cf2d149624e397d291a","name":"design","slug":"design","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-01-05 10:54:42","updated_at":"2019-01-05 10:54:42"},{"id":"5c4a2d4ef7e7b7692d246ee0","name":"nim","slug":"nim","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-01-24 21:25:34","updated_at":"2019-01-24 21:25:34"},{"id":"5c4a2d4ef7e7b7692d246ee1","name":"chat server","slug":"chat-server","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-01-24 21:25:34","updated_at":"2019-01-24 21:25:34"},{"id":"5c4a2d4ef7e7b7692d246ee2","name":"socket","slug":"socket","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-01-24 21:25:34","updated_at":"2019-01-24 21:25:34"},{"id":"5c4a2d4ef7e7b7692d246ee3","name":"select","slug":"select","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-01-24 21:25:34","updated_at":"2019-01-24 21:25:34"},{"id":"5c4a2d4ef7e7b7692d246ee4","name":"tutorial","slug":"tutorial","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-01-24 21:25:34","updated_at":"2019-01-24 21:25:34"}],"posts_tags":[{"id":"5c0c1e7aabc169173fada4cc","post_id":"5c0c1e7aabc169173fada4c3","tag_id":"5c0c1e7aabc169173fada4a2","sort_order":0},{"id":"5c0c1e7aabc169173fada4cd","post_id":"5c0c1e7aabc169173fada4c3","tag_id":"5c0c1e7aabc169173fada4a3","sort_order":1},{"id":"5c0c1e7aabc169173fada4ce","post_id":"5c0c1e7aabc169173fada4c3","tag_id":"5c0c1e7aabc169173fada4a4","sort_order":2},{"id":"5c0c1e7aabc169173fada4cf","post_id":"5c0c1e7aabc169173fada4c3","tag_id":"5c0c1e7aabc169173fada4a5","sort_order":3},{"id":"5c0c1e7aabc169173fada4d1","post_id":"5c0c1e7aabc169173fada4c4","tag_id":"5c0c1e7aabc169173fada4b2","sort_order":0},{"id":"5c0c1e7aabc169173fada4d2","post_id":"5c0c1e7aabc169173fada4c4","tag_id":"5c0c1e7aabc169173fada4b3","sort_order":1},{"id":"5c0c1e7aabc169173fada4d3","post_id":"5c0c1e7aabc169173fada4c4","tag_id":"5c0c1e7aabc169173fada4b4","sort_order":2},{"id":"5c0c1e7aabc169173fada4d5","post_id":"5c0c1e7aabc169173fada4c5","tag_id":"5c0c1e7aabc169173fada4a6","sort_order":0},{"id":"5c0c1e7aabc169173fada4d6","post_id":"5c0c1e7aabc169173fada4c5","tag_id":"5c0c1e7aabc169173fada4aa","sort_order":1},{"id":"5c0c1e7aabc169173fada4d7","post_id":"5c0c1e7aabc169173fada4c5","tag_id":"5c0c1e7aabc169173fada4ab","sort_order":2},{"id":"5c0c1e7aabc169173fada4d8","post_id":"5c0c1e7aabc169173fada4c5","tag_id":"5c0c1e7aabc169173fada4ac","sort_order":3},{"id":"5c0c1e7aabc169173fada4da","post_id":"5c0c1e7aabc169173fada4c6","tag_id":"5c0c1e7aabc169173fada4ad","sort_order":0},{"id":"5c0c1e7aabc169173fada4db","post_id":"5c0c1e7aabc169173fada4c6","tag_id":"5c0c1e7aabc169173fada4ae","sort_order":1},{"id":"5c0c1e7aabc169173fada4dc","post_id":"5c0c1e7aabc169173fada4c6","tag_id":"5c0c1e7aabc169173fada4af","sort_order":2},{"id":"5c0c1e7aabc169173fada4dd","post_id":"5c0c1e7aabc169173fada4c6","tag_id":"5c0c1e7aabc169173fada4b0","sort_order":3},{"id":"5c0c1e7aabc169173fada4de","post_id":"5c0c1e7aabc169173fada4c6","tag_id":"5c0c1e7aabc169173fada4b1","sort_order":4},{"id":"5c0c1e7aabc169173fada4e0","post_id":"5c0c1e7aabc169173fada4c7","tag_id":"5c0c1e7aabc169173fada4a6","sort_order":0},{"id":"5c0c1e7aabc169173fada4e1","post_id":"5c0c1e7aabc169173fada4c7","tag_id":"5c0c1e7aabc169173fada4a7","sort_order":1},{"id":"5c0c1e7aabc169173fada4e2","post_id":"5c0c1e7aabc169173fada4c7","tag_id":"5c0c1e7aabc169173fada4a8","sort_order":2},{"id":"5c0c1e7aabc169173fada4e3","post_id":"5c0c1e7aabc169173fada4c7","tag_id":"5c0c1e7aabc169173fada4a9","sort_order":3},{"id":"5c0c1e7babc169173fada4e5","post_id":"5c0c1e7aabc169173fada4c8","tag_id":"5c0c1e7aabc169173fada4b5","sort_order":0},{"id":"5c0c1e7babc169173fada4e6","post_id":"5c0c1e7aabc169173fada4c8","tag_id":"5c0c1e7aabc169173fada4b6","sort_order":1},{"id":"5c0c1e7babc169173fada4e7","post_id":"5c0c1e7aabc169173fada4c8","tag_id":"5c0c1e7aabc169173fada4b7","sort_order":2},{"id":"5c0c1e7babc169173fada4e8","post_id":"5c0c1e7aabc169173fada4c8","tag_id":"5c0c1e7aabc169173fada4b8","sort_order":3},{"id":"5c0c1e7babc169173fada4e9","post_id":"5c0c1e7aabc169173fada4c8","tag_id":"5c0c1e7aabc169173fada4b9","sort_order":4},{"id":"5c0c1e7babc169173fada4ea","post_id":"5c0c1e7aabc169173fada4c8","tag_id":"5c0c1e7aabc169173fada4ba","sort_order":5},{"id":"5c0c1e7babc169173fada4ec","post_id":"5c0c1e7aabc169173fada4c9","tag_id":"5c0c1e7aabc169173fada4b2","sort_order":0},{"id":"5c0c1e7babc169173fada4ed","post_id":"5c0c1e7aabc169173fada4c9","tag_id":"5c0c1e7aabc169173fada4b4","sort_order":1},{"id":"5c0c1e7babc169173fada4ee","post_id":"5c0c1e7aabc169173fada4c9","tag_id":"5c0c1e7aabc169173fada4bb","sort_order":2},{"id":"5c0c1e7babc169173fada4ef","post_id":"5c0c1e7aabc169173fada4c9","tag_id":"5c0c1e7aabc169173fada4bc","sort_order":3},{"id":"5c0c1e7babc169173fada4f0","post_id":"5c0c1e7aabc169173fada4c9","tag_id":"5c0c1e7aabc169173fada4bd","sort_order":4},{"id":"5c0c1e7babc169173fada4f1","post_id":"5c0c1e7aabc169173fada4c9","tag_id":"5c0c1e7aabc169173fada4be","sort_order":5},{"id":"5c0c1e7babc169173fada4f2","post_id":"5c0c1e7aabc169173fada4c9","tag_id":"5c0c1e7aabc169173fada4bf","sort_order":6},{"id":"5c0c1e7babc169173fada4f5","post_id":"5c0c1e7aabc169173fada4cb","tag_id":"5c0c1e7aabc169173fada4b4","sort_order":0},{"id":"5c0c1e7babc169173fada4f6","post_id":"5c0c1e7aabc169173fada4cb","tag_id":"5c0c1e7aabc169173fada4b2","sort_order":1},{"id":"5c0c1e7babc169173fada4f7","post_id":"5c0c1e7aabc169173fada4cb","tag_id":"5c0c1e7aabc169173fada4b5","sort_order":2},{"id":"5c0c1e7babc169173fada4f8","post_id":"5c0c1e7aabc169173fada4cb","tag_id":"5c0c1e7aabc169173fada4c0","sort_order":3},{"id":"5c0c1e7babc169173fada4f9","post_id":"5c0c1e7aabc169173fada4cb","tag_id":"5c0c1e7aabc169173fada4c1","sort_order":4},{"id":"5c308cf2d149624e397d291b","post_id":"5c2dfa104614fe2f8b0b13ac","tag_id":"5c308cf2d149624e397d2918","sort_order":0},{"id":"5c308cf2d149624e397d291c","post_id":"5c2dfa104614fe2f8b0b13ac","tag_id":"5c308cf2d149624e397d2919","sort_order":1},{"id":"5c308cf2d149624e397d291d","post_id":"5c2dfa104614fe2f8b0b13ac","tag_id":"5c308cf2d149624e397d291a","sort_order":2},{"id":"5c308cf2d149624e397d291e","post_id":"5c2dfa104614fe2f8b0b13ac","tag_id":"5c0c1e7aabc169173fada4b4","sort_order":3},{"id":"5c4a2d4ef7e7b7692d246ee5","post_id":"5c3229bfd149624e397d2920","tag_id":"5c4a2d4ef7e7b7692d246ee0","sort_order":0},{"id":"5c4a2d4ef7e7b7692d246ee9","post_id":"5c3229bfd149624e397d2920","tag_id":"5c4a2d4ef7e7b7692d246ee4","sort_order":4},{"id":"5c4a2d4ef7e7b7692d246ee6","post_id":"5c3229bfd149624e397d2920","tag_id":"5c4a2d4ef7e7b7692d246ee1","sort_order":1},{"id":"5c4a2d4ef7e7b7692d246ee7","post_id":"5c3229bfd149624e397d2920","tag_id":"5c4a2d4ef7e7b7692d246ee2","sort_order":2},{"id":"5c4a2d4ef7e7b7692d246ee8","post_id":"5c3229bfd149624e397d2920","tag_id":"5c4a2d4ef7e7b7692d246ee3","sort_order":3}],"apps":[],"app_settings":[],"app_fields":[],"subscribers":[{"id":"5c0c1e7aabc169173fada4c2","name":null,"email":"jkriegsh@gmail.com","status":"subscribed","post_id":null,"subscribed_url":"http://blog.tejasjadhav.xyz/","subscribed_referrer":"http://blog.tejasjadhav.xyz/2017/06/16/importing-mi-notebook-air-a-nightmare/","unsubscribed_url":null,"unsubscribed_at":null,"created_at":"2018-03-06 14:26:13","updated_at":"2018-03-06 14:26:13"},{"id":"5c0d0f494614fe2f8b0b12dc","name":null,"email":"developer.tejas.jadhav@gmail.com","status":"subscribed","post_id":null,"subscribed_url":"https://blog.tejasjadhav.xyz/","subscribed_referrer":"","unsubscribed_url":null,"unsubscribed_at":null,"created_at":"2018-12-09 12:49:13","updated_at":"2018-12-09 12:49:13"},{"id":"5c5303a7f7e7b7692d246eec","name":null,"email":"dsjain.hfg@gmail.com","status":"subscribed","post_id":"5c3229bfd149624e397d2920","subscribed_url":"https://blog.tejasjadhav.xyz/simple-chat-server-in-nim-using-sockets/","subscribed_referrer":"","unsubscribed_url":null,"unsubscribed_at":null,"created_at":"2019-01-31 14:18:15","updated_at":"2019-01-31 14:18:15"},{"id":"5d2501bb7cd96712d071904b","name":null,"email":"masuminium5@gmail.com","status":"subscribed","post_id":"5c3229bfd149624e397d2920","subscribed_url":"http://blog.tejasjadhav.xyz/simple-chat-server-in-nim-using-sockets/","subscribed_referrer":null,"unsubscribed_url":null,"unsubscribed_at":null,"created_at":"2019-07-09 21:06:03","updated_at":"2019-07-09 21:06:03"},{"id":"5dd7f90b65d2576b7bb99d2c","name":null,"email":"agekov@rbc.ru","status":"subscribed","post_id":"5c3229bfd149624e397d2920","subscribed_url":"http://blog.tejasjadhav.xyz/simple-chat-server-in-nim-using-sockets/","subscribed_referrer":"http://blog.tejasjadhav.xyz/","unsubscribed_url":null,"unsubscribed_at":null,"created_at":"2019-11-22 15:04:43","updated_at":"2019-11-22 15:04:43"}],"invites":[],"brute":[{"key":"tQFPYpHtoTbQYcODtcn1dUTs4vMVVwRVSJvAJZSNnIA=","firstRequest":1582374482553,"lastRequest":1582374482553,"lifetime":1582378082555,"count":1}],"webhooks":[],"integrations":[{"id":"5ccb3636e32f5d38061531e9","name":"Zapier","slug":"zapier","icon_image":null,"description":"Built-in Zapier integration","created_at":"2019-05-02 18:25:58","updated_at":"2019-05-02 18:25:58","type":"builtin"},{"id":"5d5024eb65d2576b7bb99d24","name":"Ghost Backup","slug":"ghost-backup","icon_image":null,"description":"Internal DB Backup integration","created_at":"2019-08-11 14:23:39","updated_at":"2019-08-11 14:23:39","type":"internal"}],"api_keys":[{"id":"5ccb3636e32f5d38061531ea","type":"admin","secret":"d6ac5955c4955bb71e11378f5b4102addc16636675c0fa206f33a24e3b8958cd","role_id":"5c0c124b9753ac11eefc4622","integration_id":"5ccb3636e32f5d38061531e9","last_seen_at":null,"last_seen_version":null,"created_at":"2019-05-02 18:25:58","updated_at":"2019-05-02 18:25:58"},{"id":"5d5024eb65d2576b7bb99d25","type":"admin","secret":"1b2fba3b4ef533d14b286338d116f659a0c90451a7d182a8b7462040ff1d8ab6","role_id":"5d5024eb65d2576b7bb99d20","integration_id":"5d5024eb65d2576b7bb99d24","last_seen_at":null,"last_seen_version":null,"created_at":1565533419920,"updated_at":1565533419920}],"mobiledoc_revisions":[{"id":"5c0c217aabc169173fada4fb","post_id":"5c0c1e7aabc169173fada4c6","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I recently came across [a thread](http://www.arlongpark.net/showthread.php?t=38320) stating the similarity between [One Piece (anime and manga)](https://en.wikipedia.org/wiki/One_Piece) by Eiichiro Oda and [The Dark Knight Rises movie](https://en.wikipedia.org/wiki/The_Dark_Knight_Rises) by Christopher Nolan.\\n\\n![One Piece and The Dark Knight Rises Similarities](/content/images/2018/06/one-piece-dark-knight.jpg)\\n\\n### Textual Representation\\n\\n| Incident | One Piece | The Dark Knight Rises |\\n| --- | --- | --- |\\n| Anti-hero protagonist | Luffy | Batman |\\n| Mastermind behind chaos | Crocodile | Bane |\\n| City that is nearing destruction | Alabasta | Gotham |\\n| City forces try to defend | Alabasta Royal Army | Gotham Police Force |\\n| Rebels try to take over | Koza and his army | All prisoners set free by Bane |\\n| Protagonist at the brink of death on first fight | Crocodile nearly impales Luffy and casts him into sand pit | Bane utterly breaks Batman and puts him in the pit |\\n| The next encounter is between the chaos | Luffy fights with Crocodile second time while rebels and royal army are fighting outside | Batman fights with Bane in midst of the fight between police and rebels |\\n| Protagonist has hidden a round shaped bomb somewhere in the city | Timed bomb hidden in the clock tower | Timed nuclear bomb hidden inside a moving truck |\\n| Protagonist's allies try to find the location of the bomb | Luffy's crew and Vivi | Gordon and his team |\\n| Bomb is airlifted far away from the city | Pel flies away carrying the bomb high into the sky | Batman uses the Bat to carry the bomb into the bay |\\n| **Extra**\\nBoth of them survive at the end | Pel is found alive in the subsequent episodes | Bruce Wayne is seen enjoying his vacation |\\n\\n#### Holy mother of Nolan!\"}]],\"sections\":[[10,0]]}","created_at_ts":1544298874149,"created_at":"2018-12-08 19:54:34"},{"id":"5c0c217aabc169173fada4fc","post_id":"5c0c1e7aabc169173fada4c6","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I recently came across [a thread](http://www.arlongpark.net/showthread.php?t=38320) stating the similarity between [One Piece (anime and manga)](https://en.wikipedia.org/wiki/One_Piece) by Eiichiro Oda and [The Dark Knight Rises movie](https://en.wikipedia.org/wiki/The_Dark_Knight_Rises) by Christopher Nolan.\\n\\n![One Piece and The Dark Knight Rises Similarities](/content/images/2018/12/one-piece-dark-knight.jpg)\\n\\n### Textual Representation\\n\\n| Incident | One Piece | The Dark Knight Rises |\\n| --- | --- | --- |\\n| Anti-hero protagonist | Luffy | Batman |\\n| Mastermind behind chaos | Crocodile | Bane |\\n| City that is nearing destruction | Alabasta | Gotham |\\n| City forces try to defend | Alabasta Royal Army | Gotham Police Force |\\n| Rebels try to take over | Koza and his army | All prisoners set free by Bane |\\n| Protagonist at the brink of death on first fight | Crocodile nearly impales Luffy and casts him into sand pit | Bane utterly breaks Batman and puts him in the pit |\\n| The next encounter is between the chaos | Luffy fights with Crocodile second time while rebels and royal army are fighting outside | Batman fights with Bane in midst of the fight between police and rebels |\\n| Protagonist has hidden a round shaped bomb somewhere in the city | Timed bomb hidden in the clock tower | Timed nuclear bomb hidden inside a moving truck |\\n| Protagonist's allies try to find the location of the bomb | Luffy's crew and Vivi | Gordon and his team |\\n| Bomb is airlifted far away from the city | Pel flies away carrying the bomb high into the sky | Batman uses the Bat to carry the bomb into the bay |\\n| **Extra**\\nBoth of them survive at the end | Pel is found alive in the subsequent episodes | Bruce Wayne is seen enjoying his vacation |\\n\\n#### Holy mother of Nolan!\"}]],\"markups\":[],\"sections\":[[10,0]]}","created_at_ts":1544298874150,"created_at":"2018-12-08 19:54:34"},{"id":"5c0c21ecabc169173fada4fd","post_id":"5c0c1e7aabc169173fada4c7","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Just re-sharing a GIF I saw on Google+ on Heliocentrism vs. Geocentrism.\\n![Heliocentrism vs. Geocentrism](/content/images/2018/06/heliocentric-vs-geocentric.gif)\"}]],\"sections\":[[10,0]]}","created_at_ts":1544298988317,"created_at":"2018-12-08 19:56:28"},{"id":"5c0c21ecabc169173fada4fe","post_id":"5c0c1e7aabc169173fada4c7","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Just re-sharing a GIF I saw on Google+ on Heliocentrism vs. Geocentrism.\\n![Heliocentrism vs. Geocentrism](/content/images/2018/12/heliocentric-vs-geocentric.gif)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","created_at_ts":1544298988318,"created_at":"2018-12-08 19:56:28"},{"id":"5c0c24a2ec0bfe1f862bf25a","post_id":"5c0c1e7aabc169173fada4cb","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{}],[\"hr\",{}],[\"markdown\",{\"markdown\":\"```python\\nfrom datetime import datetime, time, date\\n\\nfrom dateutil.relativedelta import relativedelta\\n\\ndef get_next_slot(work_timings, duration):\\n    start_hour, end_hour = map(int, work_timings.split('-'))\\n    start_datetime = datetime.combine(date.today(), time(hour=start_hour))\\n    end_datetime = datetime.combine(date.today(), time(hour=end_hour))\\n    slot = relativedelta(minutes=duration)\\n\\n    while start_datetime.time() <= end_datetime.time():\\n        end_slot = start_datetime + relativedelta(minutes=duration)\\n\\n        yield start_datetime.time(), end_slot.time()\\n        start_datetime = end_slot\\n```\"}],[\"html\",{\"html\":\"<p>\\n    <small><strong>NOTE:</strong> The above snippet is not the exact piece of code that was causing the issue. This is a workable example written from the memory I had of that incident.</small>\\n</p>\"}],[\"code\",{\"code\":\"(datetime.time(9, 0), datetime.time(9, 30))\\n(datetime.time(9, 30), datetime.time(10, 0))\\n(datetime.time(10, 0), datetime.time(10, 30))\\n(datetime.time(10, 30), datetime.time(11, 0))\\n(datetime.time(11, 0), datetime.time(11, 30))\\n(datetime.time(11, 30), datetime.time(12, 0))\\n(datetime.time(12, 0), datetime.time(12, 30))\\n(datetime.time(12, 30), datetime.time(13, 0))\\n(datetime.time(13, 0), datetime.time(13, 30))\\n(datetime.time(13, 30), datetime.time(14, 0))\\n(datetime.time(14, 0), datetime.time(14, 30))\\n(datetime.time(14, 30), datetime.time(15, 0))\\n(datetime.time(15, 0), datetime.time(15, 30))\\n(datetime.time(15, 30), datetime.time(16, 0))\\n(datetime.time(16, 0), datetime.time(16, 30))\\n(datetime.time(16, 30), datetime.time(17, 0))\\n(datetime.time(17, 0), datetime.time(17, 30))\\n(datetime.time(17, 30), datetime.time(18, 0))\\n(datetime.time(18, 0), datetime.time(18, 30))\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.linkedin.com/company/localoye/\"]],[\"em\"],[\"a\",[\"href\",\"https://www.djangoproject.com/\"]],[\"a\",[\"href\",\"https://www.mysql.com/\"]],[\"a\",[\"href\",\"https://danielkummer.github.io/git-flow-cheatsheet/\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man1/top.1.html\"]],[\"code\"],[\"a\",[\"href\",\"https://fabric.io/kits/android/crashlytics\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"This is a debugging story at my first job at \"],[0,[0],1,\"LocalOye\"],[0,[],0,\", where we encountered a bug which I still consider to be one of the best I've ever encountered.\"]]],[10,0],[1,\"h1\",[[0,[],0,\"Background\"]]],[1,\"p\",[[0,[],0,\"LocalOye was a mass-market services aggregator startup (now shutdown). We connected the service providers (plumbers, electricians, carpenters, yoga trainers, etc.) to the consumers through our app. \"]]],[1,\"p\",[[0,[],0,\"Like all tech startups in their early booming days, ours too was on a feature spree. We had around half a dozen of major features rolling out in a single release. We used to call these as \"],[0,[1],1,\"big bang releases\"],[0,[],0,\". Our tech stack was \"],[0,[2],1,\"Django\"],[0,[],0,\" with \"],[0,[3],1,\"MySQL\"],[0,[],0,\" and the entire system was split into a bunch of microservices.\"]]],[1,\"p\",[[0,[],0,\"We were rolling out a bunch of features, but for sake brevity, let's just focus on the one that caused the issue. When booking for an appointment for a service, the customer has to answer a bunch of questions including the type of service, location, cost range, timing, etc. We introduced something called as variable time slots where providers can define their own time slots for the whole day, assign the time range they will be working in and the size of a time slot per customer.\"]]],[1,\"p\",[[0,[],0,\"There were around 19 \"],[0,[4],1,\"feature branches\"],[0,[],0,\" written by our team of 6 backend engineers, which were supposed to be merged and pushed on production and I was given this messy work. After fighting the nightmarish merge conflicts, last minute fixes, syntax errors (on staging!), cyclic dependencies and migration conflicts, I somehow managed to get it all in one branch. It was also my longest day at work (37 hours, though I'm no longer proud of this achievement). Yet we were on an ass-on-fire situation because the deployment was still not done.\"]]],[1,\"p\",[[0,[],0,\"Finally, the next day we got a green flag from QA and we're ready to deploy. Like all our major releases, this was gonna go on production at night. We still didn't have CI/CD in place, so all deployments were manual (login to the instance, pull the code, restart server). We decided the deployment to be done at around 4 AM since the load was minimal and if anything goes haywire, we had minimal loss. We had stayed back in the office including the backend team, frontend team, our backend lead (\"],[0,[1],1,\"Gauri\"],[0,[],0,\") and head of technology (\"],[0,[1],1,\"Vivek\"],[0,[],0,\"). \"]]],[1,\"p\",[[0,[],0,\"The deployment happened at around 6 AM and we did a basic test whether everything was working fine. It seemed the deployment was a success. We felt relieved! Everyone was almost half asleep at this point and were really happy that they finally got this release done and now they can cozily lay back on their beds and enjoy their well deserved sleep. I was particularly a zombie at this point since I just had a 7 hour sleep after that humongous 37 hour stint and I was up again for 16 hours now. Soon everyone packed their bags and left one by one. Me and Gauri stayed back. While she wrote the \"],[0,[1],1,\"\\\"Deployment successful\\\"\"],[0,[],0,\" email, marking our product managers, business teams and CEO, I was busy closing my code editors, terminals, ticking off points on the deployment checklist and, finally, shutting down my laptop.\"]]],[10,1],[1,\"h1\",[[0,[],0,\"One by one, things fell apart\"]]],[1,\"p\",[[0,[],0,\"Everything was nice and happy and we decided to step down for a quick breakfast. While coming back, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" got a nice good morning call from \"],[0,[1],1,\"Vivek\"],[0,[],0,\" informing that he was getting API timeout errors on web. All AJAX calls to the server waited for 30 seconds (default for HTTP requests) and would return with a timeout error. We quickly headed back to the office, turned on our laptops and started monitoring our servers using the all time reliable Linux's \"],[0,[5],1,\"top\"],[0,[],0,\"! One of the servers that hosted our microserivce, which is responsible for reading data from server and contained most of the business logic, shot to 100% CPU. We waited for sometime, but it still didn't seem to settle. Since it affected all other microservices, we spent minimal time investigating and \"],[0,[1],1,\"Gauri\"],[0,[],0,\" just \"],[0,[6],1,\"kill -9\"],[0,[],0,\"'d  the service processes and spawned them again. We again monitored for 15-20 minutes. Nothing went wrong now. All seemed fine.\"]]],[1,\"p\",[[0,[],0,\"We thought that was some random one-off error. Might be some edge case. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called back \"],[0,[1],1,\"Vivek\"],[0,[],0,\" and notified him that the server was all fine and he should test again. After a quick test, \"],[0,[1],1,\"Vivek\"],[0,[],0,\" gave a confirmation that it was all okay now. We were relieved but super confused. In the end, we said \"],[0,[1],1,\"\\\"chuck it\\\"\"],[0,[],0,\" and moved on. By this time, our operations team and customer support team started coming to office one by one, astonished to see both of us still in office. It was 8 AM now.\"]]],[1,\"p\",[[0,[],0,\"Just when I closed my terminal, one of the guys from the operations came to our desk and informed that all the dashboards are empty. Nothing was showing up, these guys couldn't even open up a single service request on the dashboard. I went with him to investigate (using our beloved Chome Developer Tools) and found the same error \"],[0,[1],1,\"Vivek\"],[0,[],0,\" was getting earlier. APIs were timing out. I quickly ran to \"],[0,[1],1,\"Gauri\"],[0,[],0,\" and asked her to monitor the servers and bam! The CPU was again on 100%. Now I almost started freaking out. As a software engineer, I feel disgraced when something I build doesn't work and the end user is affected. I started thinking of all possible places where I could have gone wrong - \"],[0,[1],1,\"\\\"Perhaps the merge didn't end well. What if there's a cyclic dependency which is causing the Python interpreter to freak out? Maybe I removed some essential piece of code in merge conflicts which is causing this issue? Did internet just go off on Digital Ocean servers?\\\"\"],[0,[],0,\". And there stood \"],[0,[1],1,\"Gauri\"],[0,[],0,\", as calm as the sea, steadfast, neatly monitoring any patterns in this behavior and without even the slightest bit of stress on her face, and comforting me that there's nothing to panic and I should stay calm. She found that, not only the CPU went 100%, even the RAM usage slowly went from 15% to 78%! She again killed the processes and started again and everything went back to normal.\"]]],[1,\"p\",[[0,[],0,\"I was puzzled beyond imagination. My first thought was to review the all the code that went on production. Yes, all of it! All code in those 19 feature branches, which would amount to around 10K lines. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me to add logs everywhere - start and end of function body, API endpoints, RPC calls, etc. I quickly managed to do it, at least in the new code that was deployed. But we were running out of time. It was 9AM and people from other teams were arriving one by one only to find an occasional service disruption. At this point, we didn't even bother checking the \"],[0,[7],1,\"Crashlytics\"],[0,[],0,\" dashboard because even the app was getting the same timeout errors. Our main website opened with an empty header since that's where we displayed the service categories we provided, since the API for that too was getting timed out. The frequency of this disruption exacerbated as the day progressed and more and more users started using the app. \"]]],[1,\"p\",[[0,[],0,\"The thing is, no one had any idea what caused it. Being amateur developers, we made one of the most common beginner mistakes - insufficient logging. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called up everyone in the team to come to office as soon as they can and it as a \"],[0,[1],1,\"P0\"],[0,[],0,\" situation. Most of them were in their deep sleep at this point and the few who answered also started panicking like crazy. While everyone was on their way, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me the last thing I wanted to hear - \"],[0,[1],1,\"\\\"Let's rollback the release.\\\"\"],[0,[],0,\". This was even more disgraceful. Something that you built was so bad that it had to be taken down. The release was already delayed by three days and I didn't want to get it delayed any further. I resisted and asked for a bit more time. Seeing that I hadn't given on this hopeless situation, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" also decided to give me another hour and if nothing happens, she would rollback the release at 11AM.\"]]],[1,\"h1\",[[0,[],0,\"Finally, a ray of hope\"]]],[1,\"p\",[[0,[],0,\"After mindlessly testing and hopelessly trying to reproduce the issue on my local environment, I decided to test all the frontend apps on my machine. The first one that I had already setup on my laptop was the main website. I started randomly opening all the pages, tried creating a service request. Just when I tried creating a service request for some random category, the network request stalled and, for the first time in life, I was happy to see an error in browser console - \"],[0,[8],1,\"504 Gateway Timeout\"],[0,[],0,\". I screamed out \"],[0,[1],1,\"\\\"Gauri! I could reproduce the issue on my machine!\\\"\"],[0,[],0,\". I killed the server process, spawned it again, created the same request and the server timed out again. My happiness had no bounds at that time! By this time the other guys in our team also came in one by one and started maniacally glaring into their laptops, browsing through the code they wrote, nervously thinking whether their code was the culprit. Meanwhile, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was on her newly acquired routine on the production server - monitor, kill, spawn again, repeat.\"]]],[1,\"p\",[[0,[],0,\"But, then came a sudden twist. My fellow teammate tried created a service request on his machine and it worked. Some guy created one on staging and it worked. Hell, someone created one on production too and it worked! In a second, all my happiness got flushed out and I was back to stage one. To my utter disgusting surprise, even I couldn't reproduce it on my machine now. I almost surrendered and gave in for the idea of rolling back the release, but then I checked why it went 100% CPU for that specific case. I furiously kept hitting the back button on the browser until I reached that page where I was able to reproduce the issue. And voila! It went 100% again.\"]]],[1,\"p\",[[0,[],0,\"It was for the plumber category that the issue got reproduced. I tried to replicate it on staging, couldn't reproduce. I tried it on my teammate's machine, couldn't replicate it. Tried on production, went 100% again. I wanted to double check whether this was because of my request and not someone else's, I reproduced it 10 times in a row. And yes, it was reproduced exactly when I opened the plumber category page. I knew it was not an environment specific issue for sure. Meanwhile I had isolated the code block where this was happening and that's where I got the breakthrough.\"]]],[1,\"h1\",[[0,[],0,\"Digging into the code\"]]],[1,\"p\",[[0,[],0,\"While our investigation was still going on, it was well past 11AM now. I could glance at the other side where the operations team was seated to find them browsing Facebook, playing games, some busy doing work not related to the dashboard, some falling back to trusted old Excel sheets. Overall, it was a very depressing scene wherein the operations team and customer support teams weren't able to do their work because of some fuck up on our end. I felt really ashamed of myself as I was still not able to debug the issue.\"]]],[1,\"p\",[[0,[],0,\"While reading the relevant code, the problematic part was a function which looked  like this,\"]]],[10,2],[10,3],[1,\"p\",[[0,[],0,\"A \"],[0,[6],1,\"while\"],[0,[],0,\" loop with an unclear loop invariant. What could possibly go wrong! But actually, nothing in this code was incorrect. The conditions were correct it would give right output for a lot of cases which I had generated in my mind. Let's say, for work timings \"],[0,[6],1,\"9-18\"],[0,[],0,\" (9AM in the morning till 6PM in the evening) and duration of \"],[0,[6],1,\"30\"],[0,[],0,\" minutes per slot, the above function would generate the following output,\"]]],[10,4],[1,\"p\",[[0,[],0,\"Then I looked up why it was failing for the plumber category. I checked the database and got the entry timeslot definitions. The work timings were \"],[0,[6],1,\"9-23\"],[0,[],0,\" (9AM in the morning till 11PM at night) and duration was \"],[0,[6],1,\"60\"],[0,[],0,\" minutes. I mentally evaluated the code and I still couldn't get what was happening  here. Meanwhile, the guy who had written this code was pulling his hair out trying to understand what's happening here while staring at my screen. Then it clicked! It was the biggest WTF moment of my life. I figured out why it failed and I started laughing hysterically. Everyone was astonished at first, giving me an eager look, waiting for me to stop laughing so that they get to know what the hell this issue really was. The guy who wrote the code started shaking me fiercely, \"],[0,[1],1,\"\\\"Tejas, what the hell happened? Tell me! What was the issue? Please tell me ASAP. Stop laughing, you moron!\\\"\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"I somehow caught my breath and regained by senses, and saw the entire section of the office was staring at me - our team, HR, product managers, a few guys from the operations team, marketing guys, and even our CEO - all of them waiting for that one answer. I quickly stabilized myself, looked at that helpless guy and started asking him simple date and time arithmetic,\"]]],[1,\"blockquote\",[[0,[8],1,\"Me:\"],[0,[],0,\" How much is 9 AM + 1 hour?\"],[1,[],0,0],[0,[8],1,\"Him:\"],[0,[],0,\" Stop this stupid thing. Tell me what happened!\"],[1,[],0,1],[0,[8],1,\"Me:\"],[0,[],0,\" You will figure out yourself. Just give me the answer.\"],[1,[],0,2],[0,[8],1,\"Him:\"],[0,[],0,\" 10AM\"],[1,[],0,3],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,4],[0,[8],1,\"Him:\"],[0,[],0,\" 11 AM.\"],[1,[],0,5],[0,[8],1,\"Me:\"],[0,[],0,\" Okay. What's 10PM  + 1 hour?\"],[1,[],0,6],[0,[8],1,\"Him:\"],[0,[],0,\" 11PM\"],[1,[],0,7],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,8],[0,[8],1,\"Him:\"],[0,[],0,\" 12AM.\"],[1,[],0,9],[0,[8],1,\"Me:\"],[0,[],0,\" No. In 24 hour format?\"],[1,[],0,10],[0,[8],1,\"Him:\"],[0,[],0,\" 0 hours. Wait! oh... fuck!\"],[1,[],0,11],[0,[8],1,\"Me:\"],[0,[],0,\" Yes! Python \"],[0,[6],1,\"time\"],[0,[],0,\" objects use 24-hour format instead of 12-hour format. And 0 hours is still less than 23 hours, which still satisfies the loop criteria. Since time is cyclic, this condition will always be true and thus your while loop becomes an infinite loop. Moreover, you're yielding the timeslots at each iteration which explains the slow rise in RAM usage, and infinite loop explains why CPU went 100%.\"]]],[1,\"p\",[[0,[],0,\"It was the biggest \"],[0,[1],1,\"'Aha'\"],[0,[],0,\" moment on the floor. I could see a lot of them holding their heads and some still processing what I explained. Of all, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was giving her widest smile. One by one I was giving an explanation to everyone what happened and how it became an infinite loop. The poor guy put his head down on the table thinking how he couldn't catch this one case and even he gave a smile in the end.\"]]],[1,\"p\",[[0,[],0,\"The reason it was never captured on his machine or on the staging server was because no one had tested that condition! Whereas, just the night before the deployment, I had dumped the production data for categories on my local database for testing out a few things. But I never tested the website, so it wasn't caught even on my machine.\"]]],[1,\"h1\",[[0,[],0,\"Resolution\"]]],[1,\"p\",[[0,[],0,\"It was \"],[0,[1],1,\"really\"],[0,[],0,\" simple. Just compare the \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"time\"],[0,[],0,\" objects so that at 12AM, the day also increments which no longer satisfies the loop conditions and the loop breaks out. \"]]],[1,\"p\",[[0,[],0,\"The change was quickly made, tested on the same category. This time it worked without blowing the CPU usage off the roof. I still didn't understand why did he prefer comparing \"],[0,[6],1,\"time\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects. But it's fine. The patch was pushed on production and it worked correctly now for that same category. All dashboards were up and working and everybody, after enjoying their little free time, were back to their work. It was 12PM by now. I was definitely a zombie at this point. I spend another few hours figuring out other such pieces in code along with other team members and finally left for home \"],[0,[1],1,\"early\"],[0,[],0,\" at 4PM.\"]]],[10,5],[1,\"h1\",[[0,[],0,\"Important takeaways\"]]],[3,\"ul\",[[[0,[],0,\"NEVER EVER DO BIG BANG RELEASES! Release incrementally, in small chunks. It's easier to find needle among a few sticks of hay than an entire haystack.\"]],[[0,[],0,\"Logging is crucial. Learn how to log. Though I personally would not recommend, but log at every checkpoint in the code. If feel you would be inundated with logs, use log levels (\"],[0,[1],1,\"DEBUG\"],[0,[],0,\", \"],[0,[1],1,\"INFO\"],[0,[],0,\", \"],[0,[1],1,\"WARNING\"],[0,[],0,\", \"],[0,[1],1,\"ERROR\"],[0,[],0,\") and configure it with environment flags.\"]],[[0,[],0,\" No matter how rigorous QA testing you do, some things still escape the eyes of all. We can't help it. But at least ensure that all the cases already defined by the business teams are fully covered in the tests.\"]],[[0,[],0,\"Software engineers are humans. They can't be right all the time. Neither can someone think of all possible edge cases that may arise in the code, let alone something that would be defined by the end user. Empathize them and understand that such issues are not because they are incompetent but rather something which was inevitable. Rather I would think of that incident this way - of the 10K+ lines of code that went on production, only one line was the culprit.\"]],[[0,[],0,\"To this day, I really appreciate \"],[0,[1],1,\"Gauri\"],[0,[],0,\"'s stand. She's very strict in maintaining code quality and business logic implementation, and scolded us a lot for our mistakes. But in that moment, she was the only one who was fighting for us against the whole company and gave us as much time as she could afford. Not only her, even our CEO was very relaxed and despite knowing that every minute that we spent debugging this issue costed him money, he still supported us and didn't freak out either. Things would have gone horribly wrong if it wasn't for them. As a manager, stressing out your teams in such situations just makes everything worse. The team needs someone who would shield them from everyone else while they just focus on fixing the issue.\"]]]]]}","created_at_ts":1544299682391,"created_at":"2018-12-08 20:08:02"},{"id":"5c0c2784ec0bfe1f862bf25b","post_id":"5c0c1e7aabc169173fada4cb","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{}],[\"hr\",{}],[\"markdown\",{\"markdown\":\"```python=\\nfrom datetime import datetime, time, date\\n\\nfrom dateutil.relativedelta import relativedelta\\n\\ndef get_next_slot(work_timings, duration):\\n    start_hour, end_hour = map(int, work_timings.split('-'))\\n    start_datetime = datetime.combine(date.today(), time(hour=start_hour))\\n    end_datetime = datetime.combine(date.today(), time(hour=end_hour))\\n    slot = relativedelta(minutes=duration)\\n\\n    while start_datetime.time() <= end_datetime.time():\\n        end_slot = start_datetime + relativedelta(minutes=duration)\\n\\n        yield start_datetime.time(), end_slot.time()\\n        start_datetime = end_slot\\n```\"}],[\"html\",{\"html\":\"<p>\\n    <small><strong>NOTE:</strong> The above snippet is not the exact piece of code that was causing the issue. This is a workable example written from the memory I had of that incident.</small>\\n</p>\"}],[\"code\",{\"code\":\"(datetime.time(9, 0), datetime.time(9, 30))\\n(datetime.time(9, 30), datetime.time(10, 0))\\n(datetime.time(10, 0), datetime.time(10, 30))\\n(datetime.time(10, 30), datetime.time(11, 0))\\n(datetime.time(11, 0), datetime.time(11, 30))\\n(datetime.time(11, 30), datetime.time(12, 0))\\n(datetime.time(12, 0), datetime.time(12, 30))\\n(datetime.time(12, 30), datetime.time(13, 0))\\n(datetime.time(13, 0), datetime.time(13, 30))\\n(datetime.time(13, 30), datetime.time(14, 0))\\n(datetime.time(14, 0), datetime.time(14, 30))\\n(datetime.time(14, 30), datetime.time(15, 0))\\n(datetime.time(15, 0), datetime.time(15, 30))\\n(datetime.time(15, 30), datetime.time(16, 0))\\n(datetime.time(16, 0), datetime.time(16, 30))\\n(datetime.time(16, 30), datetime.time(17, 0))\\n(datetime.time(17, 0), datetime.time(17, 30))\\n(datetime.time(17, 30), datetime.time(18, 0))\\n(datetime.time(18, 0), datetime.time(18, 30))\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.linkedin.com/company/localoye/\"]],[\"em\"],[\"a\",[\"href\",\"https://www.djangoproject.com/\"]],[\"a\",[\"href\",\"https://www.mysql.com/\"]],[\"a\",[\"href\",\"https://danielkummer.github.io/git-flow-cheatsheet/\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man1/top.1.html\"]],[\"code\"],[\"a\",[\"href\",\"https://fabric.io/kits/android/crashlytics\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"This is a debugging story at my first job at \"],[0,[0],1,\"LocalOye\"],[0,[],0,\", where we encountered a bug which I still consider to be one of the best I've ever encountered.\"]]],[10,0],[1,\"h1\",[[0,[],0,\"Background\"]]],[1,\"p\",[[0,[],0,\"LocalOye was a mass-market services aggregator startup (now shutdown). We connected the service providers (plumbers, electricians, carpenters, yoga trainers, etc.) to the consumers through our app. \"]]],[1,\"p\",[[0,[],0,\"Like all tech startups in their early booming days, ours too was on a feature spree. We had around half a dozen of major features rolling out in a single release. We used to call these as \"],[0,[1],1,\"big bang releases\"],[0,[],0,\". Our tech stack was \"],[0,[2],1,\"Django\"],[0,[],0,\" with \"],[0,[3],1,\"MySQL\"],[0,[],0,\" and the entire system was split into a bunch of microservices.\"]]],[1,\"p\",[[0,[],0,\"We were rolling out a bunch of features, but for sake brevity, let's just focus on the one that caused the issue. When booking for an appointment for a service, the customer has to answer a bunch of questions including the type of service, location, cost range, timing, etc. We introduced something called as variable time slots where providers can define their own time slots for the whole day, assign the time range they will be working in and the size of a time slot per customer.\"]]],[1,\"p\",[[0,[],0,\"There were around 19 \"],[0,[4],1,\"feature branches\"],[0,[],0,\" written by our team of 6 backend engineers, which were supposed to be merged and pushed on production and I was given this messy work. After fighting the nightmarish merge conflicts, last minute fixes, syntax errors (on staging!), cyclic dependencies and migration conflicts, I somehow managed to get it all in one branch. It was also my longest day at work (37 hours, though I'm no longer proud of this achievement). Yet we were on an ass-on-fire situation because the deployment was still not done.\"]]],[1,\"p\",[[0,[],0,\"Finally, the next day we got a green flag from QA and we're ready to deploy. Like all our major releases, this was gonna go on production at night. We still didn't have CI/CD in place, so all deployments were manual (login to the instance, pull the code, restart server). We decided the deployment to be done at around 4 AM since the load was minimal and if anything goes haywire, we had minimal loss. We had stayed back in the office including the backend team, frontend team, our backend lead (\"],[0,[1],1,\"Gauri\"],[0,[],0,\") and head of technology (\"],[0,[1],1,\"Vivek\"],[0,[],0,\"). \"]]],[1,\"p\",[[0,[],0,\"The deployment happened at around 6 AM and we did a basic test whether everything was working fine. It seemed the deployment was a success. We felt relieved! Everyone was almost half asleep at this point and were really happy that they finally got this release done and now they can cozily lay back on their beds and enjoy their well deserved sleep. I was particularly a zombie at this point since I just had a 7 hour sleep after that humongous 37 hour stint and I was up again for 16 hours now. Soon everyone packed their bags and left one by one. Me and Gauri stayed back. While she wrote the \"],[0,[1],1,\"\\\"Deployment successful\\\"\"],[0,[],0,\" email, marking our product managers, business teams and CEO, I was busy closing my code editors, terminals, ticking off points on the deployment checklist and, finally, shutting down my laptop.\"]]],[10,1],[1,\"h1\",[[0,[],0,\"One by one, things fell apart\"]]],[1,\"p\",[[0,[],0,\"Everything was nice and happy and we decided to step down for a quick breakfast. While coming back, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" got a nice good morning call from \"],[0,[1],1,\"Vivek\"],[0,[],0,\" informing that he was getting API timeout errors on web. All AJAX calls to the server waited for 30 seconds (default for HTTP requests) and would return with a timeout error. We quickly headed back to the office, turned on our laptops and started monitoring our servers using the all time reliable Linux's \"],[0,[5],1,\"top\"],[0,[],0,\"! One of the servers that hosted our microserivce, which is responsible for reading data from server and contained most of the business logic, shot to 100% CPU. We waited for sometime, but it still didn't seem to settle. Since it affected all other microservices, we spent minimal time investigating and \"],[0,[1],1,\"Gauri\"],[0,[],0,\" just \"],[0,[6],1,\"kill -9\"],[0,[],0,\"'d  the service processes and spawned them again. We again monitored for 15-20 minutes. Nothing went wrong now. All seemed fine.\"]]],[1,\"p\",[[0,[],0,\"We thought that was some random one-off error. Might be some edge case. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called back \"],[0,[1],1,\"Vivek\"],[0,[],0,\" and notified him that the server was all fine and he should test again. After a quick test, \"],[0,[1],1,\"Vivek\"],[0,[],0,\" gave a confirmation that it was all okay now. We were relieved but super confused. In the end, we said \"],[0,[1],1,\"\\\"chuck it\\\"\"],[0,[],0,\" and moved on. By this time, our operations team and customer support team started coming to office one by one, astonished to see both of us still in office. It was 8 AM now.\"]]],[1,\"p\",[[0,[],0,\"Just when I closed my terminal, one of the guys from the operations came to our desk and informed that all the dashboards are empty. Nothing was showing up, these guys couldn't even open up a single service request on the dashboard. I went with him to investigate (using our beloved Chome Developer Tools) and found the same error \"],[0,[1],1,\"Vivek\"],[0,[],0,\" was getting earlier. APIs were timing out. I quickly ran to \"],[0,[1],1,\"Gauri\"],[0,[],0,\" and asked her to monitor the servers and bam! The CPU was again on 100%. Now I almost started freaking out. As a software engineer, I feel disgraced when something I build doesn't work and the end user is affected. I started thinking of all possible places where I could have gone wrong - \"],[0,[1],1,\"\\\"Perhaps the merge didn't end well. What if there's a cyclic dependency which is causing the Python interpreter to freak out? Maybe I removed some essential piece of code in merge conflicts which is causing this issue? Did internet just go off on Digital Ocean servers?\\\"\"],[0,[],0,\". And there stood \"],[0,[1],1,\"Gauri\"],[0,[],0,\", as calm as the sea, steadfast, neatly monitoring any patterns in this behavior and without even the slightest bit of stress on her face, and comforting me that there's nothing to panic and I should stay calm. She found that, not only the CPU went 100%, even the RAM usage slowly went from 15% to 78%! She again killed the processes and started again and everything went back to normal.\"]]],[1,\"p\",[[0,[],0,\"I was puzzled beyond imagination. My first thought was to review the all the code that went on production. Yes, all of it! All code in those 19 feature branches, which would amount to around 10K lines. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me to add logs everywhere - start and end of function body, API endpoints, RPC calls, etc. I quickly managed to do it, at least in the new code that was deployed. But we were running out of time. It was 9AM and people from other teams were arriving one by one only to find an occasional service disruption. At this point, we didn't even bother checking the \"],[0,[7],1,\"Crashlytics\"],[0,[],0,\" dashboard because even the app was getting the same timeout errors. Our main website opened with an empty header since that's where we displayed the service categories we provided, since the API for that too was getting timed out. The frequency of this disruption exacerbated as the day progressed and more and more users started using the app. \"]]],[1,\"p\",[[0,[],0,\"The thing is, no one had any idea what caused it. Being amateur developers, we made one of the most common beginner mistakes - insufficient logging. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called up everyone in the team to come to office as soon as they can and it as a \"],[0,[1],1,\"P0\"],[0,[],0,\" situation. Most of them were in their deep sleep at this point and the few who answered also started panicking like crazy. While everyone was on their way, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me the last thing I wanted to hear - \"],[0,[1],1,\"\\\"Let's rollback the release.\\\"\"],[0,[],0,\". This was even more disgraceful. Something that you built was so bad that it had to be taken down. The release was already delayed by three days and I didn't want to get it delayed any further. I resisted and asked for a bit more time. Seeing that I hadn't given on this hopeless situation, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" also decided to give me another hour and if nothing happens, she would rollback the release at 11AM.\"]]],[1,\"h1\",[[0,[],0,\"Finally, a ray of hope\"]]],[1,\"p\",[[0,[],0,\"After mindlessly testing and hopelessly trying to reproduce the issue on my local environment, I decided to test all the frontend apps on my machine. The first one that I had already setup on my laptop was the main website. I started randomly opening all the pages, tried creating a service request. Just when I tried creating a service request for some random category, the network request stalled and, for the first time in life, I was happy to see an error in browser console - \"],[0,[8],1,\"504 Gateway Timeout\"],[0,[],0,\". I screamed out \"],[0,[1],1,\"\\\"Gauri! I could reproduce the issue on my machine!\\\"\"],[0,[],0,\". I killed the server process, spawned it again, created the same request and the server timed out again. My happiness had no bounds at that time! By this time the other guys in our team also came in one by one and started maniacally glaring into their laptops, browsing through the code they wrote, nervously thinking whether their code was the culprit. Meanwhile, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was on her newly acquired routine on the production server - monitor, kill, spawn again, repeat.\"]]],[1,\"p\",[[0,[],0,\"But, then came a sudden twist. My fellow teammate tried created a service request on his machine and it worked. Some guy created one on staging and it worked. Hell, someone created one on production too and it worked! In a second, all my happiness got flushed out and I was back to stage one. To my utter disgusting surprise, even I couldn't reproduce it on my machine now. I almost surrendered and gave in for the idea of rolling back the release, but then I checked why it went 100% CPU for that specific case. I furiously kept hitting the back button on the browser until I reached that page where I was able to reproduce the issue. And voila! It went 100% again.\"]]],[1,\"p\",[[0,[],0,\"It was for the plumber category that the issue got reproduced. I tried to replicate it on staging, couldn't reproduce. I tried it on my teammate's machine, couldn't replicate it. Tried on production, went 100% again. I wanted to double check whether this was because of my request and not someone else's, I reproduced it 10 times in a row. And yes, it was reproduced exactly when I opened the plumber category page. I knew it was not an environment specific issue for sure. Meanwhile I had isolated the code block where this was happening and that's where I got the breakthrough.\"]]],[1,\"h1\",[[0,[],0,\"Digging into the code\"]]],[1,\"p\",[[0,[],0,\"While our investigation was still going on, it was well past 11AM now. I could glance at the other side where the operations team was seated to find them browsing Facebook, playing games, some busy doing work not related to the dashboard, some falling back to trusted old Excel sheets. Overall, it was a very depressing scene wherein the operations team and customer support teams weren't able to do their work because of some fuck up on our end. I felt really ashamed of myself as I was still not able to debug the issue.\"]]],[1,\"p\",[[0,[],0,\"While reading the relevant code, the problematic part was a function which looked  like this,\"]]],[10,2],[10,3],[1,\"p\",[[0,[],0,\"A \"],[0,[6],1,\"while\"],[0,[],0,\" loop with an unclear loop invariant. What could possibly go wrong! But actually, nothing in this code was incorrect. The conditions were correct it would give right output for a lot of cases which I had generated in my mind. Let's say, for work timings \"],[0,[6],1,\"9-18\"],[0,[],0,\" (9AM in the morning till 6PM in the evening) and duration of \"],[0,[6],1,\"30\"],[0,[],0,\" minutes per slot, the above function would generate the following output,\"]]],[10,4],[1,\"p\",[[0,[],0,\"Then I looked up why it was failing for the plumber category. I checked the database and got the entry timeslot definitions. The work timings were \"],[0,[6],1,\"9-23\"],[0,[],0,\" (9AM in the morning till 11PM at night) and duration was \"],[0,[6],1,\"60\"],[0,[],0,\" minutes. I mentally evaluated the code and I still couldn't get what was happening  here. Meanwhile, the guy who had written this code was pulling his hair out trying to understand what's happening here while staring at my screen. Then it clicked! It was the biggest WTF moment of my life. I figured out why it failed and I started laughing hysterically. Everyone was astonished at first, giving me an eager look, waiting for me to stop laughing so that they get to know what the hell this issue really was. The guy who wrote the code started shaking me fiercely, \"],[0,[1],1,\"\\\"Tejas, what the hell happened? Tell me! What was the issue? Please tell me ASAP. Stop laughing, you moron!\\\"\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"I somehow caught my breath and regained by senses, and saw the entire section of the office was staring at me - our team, HR, product managers, a few guys from the operations team, marketing guys, and even our CEO - all of them waiting for that one answer. I quickly stabilized myself, looked at that helpless guy and started asking him simple date and time arithmetic,\"]]],[1,\"blockquote\",[[0,[8],1,\"Me:\"],[0,[],0,\" How much is 9 AM + 1 hour?\"],[1,[],0,0],[0,[8],1,\"Him:\"],[0,[],0,\" Stop this stupid thing. Tell me what happened!\"],[1,[],0,1],[0,[8],1,\"Me:\"],[0,[],0,\" You will figure out yourself. Just give me the answer.\"],[1,[],0,2],[0,[8],1,\"Him:\"],[0,[],0,\" 10AM\"],[1,[],0,3],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,4],[0,[8],1,\"Him:\"],[0,[],0,\" 11 AM.\"],[1,[],0,5],[0,[8],1,\"Me:\"],[0,[],0,\" Okay. What's 10PM  + 1 hour?\"],[1,[],0,6],[0,[8],1,\"Him:\"],[0,[],0,\" 11PM\"],[1,[],0,7],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,8],[0,[8],1,\"Him:\"],[0,[],0,\" 12AM.\"],[1,[],0,9],[0,[8],1,\"Me:\"],[0,[],0,\" No. In 24 hour format?\"],[1,[],0,10],[0,[8],1,\"Him:\"],[0,[],0,\" 0 hours. Wait! oh... fuck!\"],[1,[],0,11],[0,[8],1,\"Me:\"],[0,[],0,\" Yes! Python \"],[0,[6],1,\"time\"],[0,[],0,\" objects use 24-hour format instead of 12-hour format. And 0 hours is still less than 23 hours, which still satisfies the loop criteria. Since time is cyclic, this condition will always be true and thus your while loop becomes an infinite loop. Moreover, you're yielding the timeslots at each iteration which explains the slow rise in RAM usage, and infinite loop explains why CPU went 100%.\"]]],[1,\"p\",[[0,[],0,\"It was the biggest \"],[0,[1],1,\"'Aha'\"],[0,[],0,\" moment on the floor. I could see a lot of them holding their heads and some still processing what I explained. Of all, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was giving her widest smile. One by one I was giving an explanation to everyone what happened and how it became an infinite loop. The poor guy put his head down on the table thinking how he couldn't catch this one case and even he gave a smile in the end.\"]]],[1,\"p\",[[0,[],0,\"The reason it was never captured on his machine or on the staging server was because no one had tested that condition! Whereas, just the night before the deployment, I had dumped the production data for categories on my local database for testing out a few things. But I never tested the website, so it wasn't caught even on my machine.\"]]],[1,\"h1\",[[0,[],0,\"Resolution\"]]],[1,\"p\",[[0,[],0,\"It was \"],[0,[1],1,\"really\"],[0,[],0,\" simple. Just compare the \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"time\"],[0,[],0,\" objects so that at 12AM, the day also increments which no longer satisfies the loop conditions and the loop breaks out. \"]]],[1,\"p\",[[0,[],0,\"The change was quickly made, tested on the same category. This time it worked without blowing the CPU usage off the roof. I still didn't understand why did he prefer comparing \"],[0,[6],1,\"time\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects. But it's fine. The patch was pushed on production and it worked correctly now for that same category. All dashboards were up and working and everybody, after enjoying their little free time, were back to their work. It was 12PM by now. I was definitely a zombie at this point. I spend another few hours figuring out other such pieces in code along with other team members and finally left for home \"],[0,[1],1,\"early\"],[0,[],0,\" at 4PM.\"]]],[10,5],[1,\"h1\",[[0,[],0,\"Important takeaways\"]]],[3,\"ul\",[[[0,[],0,\"NEVER EVER DO BIG BANG RELEASES! Release incrementally, in small chunks. It's easier to find needle among a few sticks of hay than an entire haystack.\"]],[[0,[],0,\"Logging is crucial. Learn how to log. Though I personally would not recommend, but log at every checkpoint in the code. If feel you would be inundated with logs, use log levels (\"],[0,[1],1,\"DEBUG\"],[0,[],0,\", \"],[0,[1],1,\"INFO\"],[0,[],0,\", \"],[0,[1],1,\"WARNING\"],[0,[],0,\", \"],[0,[1],1,\"ERROR\"],[0,[],0,\") and configure it with environment flags.\"]],[[0,[],0,\" No matter how rigorous QA testing you do, some things still escape the eyes of all. We can't help it. But at least ensure that all the cases already defined by the business teams are fully covered in the tests.\"]],[[0,[],0,\"Software engineers are humans. They can't be right all the time. Neither can someone think of all possible edge cases that may arise in the code, let alone something that would be defined by the end user. Empathize them and understand that such issues are not because they are incompetent but rather something which was inevitable. Rather I would think of that incident this way - of the 10K+ lines of code that went on production, only one line was the culprit.\"]],[[0,[],0,\"To this day, I really appreciate \"],[0,[1],1,\"Gauri\"],[0,[],0,\"'s stand. She's very strict in maintaining code quality and business logic implementation, and scolded us a lot for our mistakes. But in that moment, she was the only one who was fighting for us against the whole company and gave us as much time as she could afford. Not only her, even our CEO was very relaxed and despite knowing that every minute that we spent debugging this issue costed him money, he still supported us and didn't freak out either. Things would have gone horribly wrong if it wasn't for them. As a manager, stressing out your teams in such situations just makes everything worse. The team needs someone who would shield them from everyone else while they just focus on fixing the issue.\"]]]]]}","created_at_ts":1544300419949,"created_at":"2018-12-08 20:20:20"},{"id":"5c0c27a4ec0bfe1f862bf25c","post_id":"5c0c1e7aabc169173fada4cb","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{}],[\"hr\",{}],[\"markdown\",{\"markdown\":\"```=python\\nfrom datetime import datetime, time, date\\n\\nfrom dateutil.relativedelta import relativedelta\\n\\ndef get_next_slot(work_timings, duration):\\n    start_hour, end_hour = map(int, work_timings.split('-'))\\n    start_datetime = datetime.combine(date.today(), time(hour=start_hour))\\n    end_datetime = datetime.combine(date.today(), time(hour=end_hour))\\n    slot = relativedelta(minutes=duration)\\n\\n    while start_datetime.time() <= end_datetime.time():\\n        end_slot = start_datetime + relativedelta(minutes=duration)\\n\\n        yield start_datetime.time(), end_slot.time()\\n        start_datetime = end_slot\\n```\"}],[\"html\",{\"html\":\"<p>\\n    <small><strong>NOTE:</strong> The above snippet is not the exact piece of code that was causing the issue. This is a workable example written from the memory I had of that incident.</small>\\n</p>\"}],[\"code\",{\"code\":\"(datetime.time(9, 0), datetime.time(9, 30))\\n(datetime.time(9, 30), datetime.time(10, 0))\\n(datetime.time(10, 0), datetime.time(10, 30))\\n(datetime.time(10, 30), datetime.time(11, 0))\\n(datetime.time(11, 0), datetime.time(11, 30))\\n(datetime.time(11, 30), datetime.time(12, 0))\\n(datetime.time(12, 0), datetime.time(12, 30))\\n(datetime.time(12, 30), datetime.time(13, 0))\\n(datetime.time(13, 0), datetime.time(13, 30))\\n(datetime.time(13, 30), datetime.time(14, 0))\\n(datetime.time(14, 0), datetime.time(14, 30))\\n(datetime.time(14, 30), datetime.time(15, 0))\\n(datetime.time(15, 0), datetime.time(15, 30))\\n(datetime.time(15, 30), datetime.time(16, 0))\\n(datetime.time(16, 0), datetime.time(16, 30))\\n(datetime.time(16, 30), datetime.time(17, 0))\\n(datetime.time(17, 0), datetime.time(17, 30))\\n(datetime.time(17, 30), datetime.time(18, 0))\\n(datetime.time(18, 0), datetime.time(18, 30))\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.linkedin.com/company/localoye/\"]],[\"em\"],[\"a\",[\"href\",\"https://www.djangoproject.com/\"]],[\"a\",[\"href\",\"https://www.mysql.com/\"]],[\"a\",[\"href\",\"https://danielkummer.github.io/git-flow-cheatsheet/\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man1/top.1.html\"]],[\"code\"],[\"a\",[\"href\",\"https://fabric.io/kits/android/crashlytics\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"This is a debugging story at my first job at \"],[0,[0],1,\"LocalOye\"],[0,[],0,\", where we encountered a bug which I still consider to be one of the best I've ever encountered.\"]]],[10,0],[1,\"h1\",[[0,[],0,\"Background\"]]],[1,\"p\",[[0,[],0,\"LocalOye was a mass-market services aggregator startup (now shutdown). We connected the service providers (plumbers, electricians, carpenters, yoga trainers, etc.) to the consumers through our app. \"]]],[1,\"p\",[[0,[],0,\"Like all tech startups in their early booming days, ours too was on a feature spree. We had around half a dozen of major features rolling out in a single release. We used to call these as \"],[0,[1],1,\"big bang releases\"],[0,[],0,\". Our tech stack was \"],[0,[2],1,\"Django\"],[0,[],0,\" with \"],[0,[3],1,\"MySQL\"],[0,[],0,\" and the entire system was split into a bunch of microservices.\"]]],[1,\"p\",[[0,[],0,\"We were rolling out a bunch of features, but for sake brevity, let's just focus on the one that caused the issue. When booking for an appointment for a service, the customer has to answer a bunch of questions including the type of service, location, cost range, timing, etc. We introduced something called as variable time slots where providers can define their own time slots for the whole day, assign the time range they will be working in and the size of a time slot per customer.\"]]],[1,\"p\",[[0,[],0,\"There were around 19 \"],[0,[4],1,\"feature branches\"],[0,[],0,\" written by our team of 6 backend engineers, which were supposed to be merged and pushed on production and I was given this messy work. After fighting the nightmarish merge conflicts, last minute fixes, syntax errors (on staging!), cyclic dependencies and migration conflicts, I somehow managed to get it all in one branch. It was also my longest day at work (37 hours, though I'm no longer proud of this achievement). Yet we were on an ass-on-fire situation because the deployment was still not done.\"]]],[1,\"p\",[[0,[],0,\"Finally, the next day we got a green flag from QA and we're ready to deploy. Like all our major releases, this was gonna go on production at night. We still didn't have CI/CD in place, so all deployments were manual (login to the instance, pull the code, restart server). We decided the deployment to be done at around 4 AM since the load was minimal and if anything goes haywire, we had minimal loss. We had stayed back in the office including the backend team, frontend team, our backend lead (\"],[0,[1],1,\"Gauri\"],[0,[],0,\") and head of technology (\"],[0,[1],1,\"Vivek\"],[0,[],0,\"). \"]]],[1,\"p\",[[0,[],0,\"The deployment happened at around 6 AM and we did a basic test whether everything was working fine. It seemed the deployment was a success. We felt relieved! Everyone was almost half asleep at this point and were really happy that they finally got this release done and now they can cozily lay back on their beds and enjoy their well deserved sleep. I was particularly a zombie at this point since I just had a 7 hour sleep after that humongous 37 hour stint and I was up again for 16 hours now. Soon everyone packed their bags and left one by one. Me and Gauri stayed back. While she wrote the \"],[0,[1],1,\"\\\"Deployment successful\\\"\"],[0,[],0,\" email, marking our product managers, business teams and CEO, I was busy closing my code editors, terminals, ticking off points on the deployment checklist and, finally, shutting down my laptop.\"]]],[10,1],[1,\"h1\",[[0,[],0,\"One by one, things fell apart\"]]],[1,\"p\",[[0,[],0,\"Everything was nice and happy and we decided to step down for a quick breakfast. While coming back, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" got a nice good morning call from \"],[0,[1],1,\"Vivek\"],[0,[],0,\" informing that he was getting API timeout errors on web. All AJAX calls to the server waited for 30 seconds (default for HTTP requests) and would return with a timeout error. We quickly headed back to the office, turned on our laptops and started monitoring our servers using the all time reliable Linux's \"],[0,[5],1,\"top\"],[0,[],0,\"! One of the servers that hosted our microserivce, which is responsible for reading data from server and contained most of the business logic, shot to 100% CPU. We waited for sometime, but it still didn't seem to settle. Since it affected all other microservices, we spent minimal time investigating and \"],[0,[1],1,\"Gauri\"],[0,[],0,\" just \"],[0,[6],1,\"kill -9\"],[0,[],0,\"'d  the service processes and spawned them again. We again monitored for 15-20 minutes. Nothing went wrong now. All seemed fine.\"]]],[1,\"p\",[[0,[],0,\"We thought that was some random one-off error. Might be some edge case. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called back \"],[0,[1],1,\"Vivek\"],[0,[],0,\" and notified him that the server was all fine and he should test again. After a quick test, \"],[0,[1],1,\"Vivek\"],[0,[],0,\" gave a confirmation that it was all okay now. We were relieved but super confused. In the end, we said \"],[0,[1],1,\"\\\"chuck it\\\"\"],[0,[],0,\" and moved on. By this time, our operations team and customer support team started coming to office one by one, astonished to see both of us still in office. It was 8 AM now.\"]]],[1,\"p\",[[0,[],0,\"Just when I closed my terminal, one of the guys from the operations came to our desk and informed that all the dashboards are empty. Nothing was showing up, these guys couldn't even open up a single service request on the dashboard. I went with him to investigate (using our beloved Chome Developer Tools) and found the same error \"],[0,[1],1,\"Vivek\"],[0,[],0,\" was getting earlier. APIs were timing out. I quickly ran to \"],[0,[1],1,\"Gauri\"],[0,[],0,\" and asked her to monitor the servers and bam! The CPU was again on 100%. Now I almost started freaking out. As a software engineer, I feel disgraced when something I build doesn't work and the end user is affected. I started thinking of all possible places where I could have gone wrong - \"],[0,[1],1,\"\\\"Perhaps the merge didn't end well. What if there's a cyclic dependency which is causing the Python interpreter to freak out? Maybe I removed some essential piece of code in merge conflicts which is causing this issue? Did internet just go off on Digital Ocean servers?\\\"\"],[0,[],0,\". And there stood \"],[0,[1],1,\"Gauri\"],[0,[],0,\", as calm as the sea, steadfast, neatly monitoring any patterns in this behavior and without even the slightest bit of stress on her face, and comforting me that there's nothing to panic and I should stay calm. She found that, not only the CPU went 100%, even the RAM usage slowly went from 15% to 78%! She again killed the processes and started again and everything went back to normal.\"]]],[1,\"p\",[[0,[],0,\"I was puzzled beyond imagination. My first thought was to review the all the code that went on production. Yes, all of it! All code in those 19 feature branches, which would amount to around 10K lines. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me to add logs everywhere - start and end of function body, API endpoints, RPC calls, etc. I quickly managed to do it, at least in the new code that was deployed. But we were running out of time. It was 9AM and people from other teams were arriving one by one only to find an occasional service disruption. At this point, we didn't even bother checking the \"],[0,[7],1,\"Crashlytics\"],[0,[],0,\" dashboard because even the app was getting the same timeout errors. Our main website opened with an empty header since that's where we displayed the service categories we provided, since the API for that too was getting timed out. The frequency of this disruption exacerbated as the day progressed and more and more users started using the app. \"]]],[1,\"p\",[[0,[],0,\"The thing is, no one had any idea what caused it. Being amateur developers, we made one of the most common beginner mistakes - insufficient logging. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called up everyone in the team to come to office as soon as they can and it as a \"],[0,[1],1,\"P0\"],[0,[],0,\" situation. Most of them were in their deep sleep at this point and the few who answered also started panicking like crazy. While everyone was on their way, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me the last thing I wanted to hear - \"],[0,[1],1,\"\\\"Let's rollback the release.\\\"\"],[0,[],0,\". This was even more disgraceful. Something that you built was so bad that it had to be taken down. The release was already delayed by three days and I didn't want to get it delayed any further. I resisted and asked for a bit more time. Seeing that I hadn't given on this hopeless situation, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" also decided to give me another hour and if nothing happens, she would rollback the release at 11AM.\"]]],[1,\"h1\",[[0,[],0,\"Finally, a ray of hope\"]]],[1,\"p\",[[0,[],0,\"After mindlessly testing and hopelessly trying to reproduce the issue on my local environment, I decided to test all the frontend apps on my machine. The first one that I had already setup on my laptop was the main website. I started randomly opening all the pages, tried creating a service request. Just when I tried creating a service request for some random category, the network request stalled and, for the first time in life, I was happy to see an error in browser console - \"],[0,[8],1,\"504 Gateway Timeout\"],[0,[],0,\". I screamed out \"],[0,[1],1,\"\\\"Gauri! I could reproduce the issue on my machine!\\\"\"],[0,[],0,\". I killed the server process, spawned it again, created the same request and the server timed out again. My happiness had no bounds at that time! By this time the other guys in our team also came in one by one and started maniacally glaring into their laptops, browsing through the code they wrote, nervously thinking whether their code was the culprit. Meanwhile, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was on her newly acquired routine on the production server - monitor, kill, spawn again, repeat.\"]]],[1,\"p\",[[0,[],0,\"But, then came a sudden twist. My fellow teammate tried created a service request on his machine and it worked. Some guy created one on staging and it worked. Hell, someone created one on production too and it worked! In a second, all my happiness got flushed out and I was back to stage one. To my utter disgusting surprise, even I couldn't reproduce it on my machine now. I almost surrendered and gave in for the idea of rolling back the release, but then I checked why it went 100% CPU for that specific case. I furiously kept hitting the back button on the browser until I reached that page where I was able to reproduce the issue. And voila! It went 100% again.\"]]],[1,\"p\",[[0,[],0,\"It was for the plumber category that the issue got reproduced. I tried to replicate it on staging, couldn't reproduce. I tried it on my teammate's machine, couldn't replicate it. Tried on production, went 100% again. I wanted to double check whether this was because of my request and not someone else's, I reproduced it 10 times in a row. And yes, it was reproduced exactly when I opened the plumber category page. I knew it was not an environment specific issue for sure. Meanwhile I had isolated the code block where this was happening and that's where I got the breakthrough.\"]]],[1,\"h1\",[[0,[],0,\"Digging into the code\"]]],[1,\"p\",[[0,[],0,\"While our investigation was still going on, it was well past 11AM now. I could glance at the other side where the operations team was seated to find them browsing Facebook, playing games, some busy doing work not related to the dashboard, some falling back to trusted old Excel sheets. Overall, it was a very depressing scene wherein the operations team and customer support teams weren't able to do their work because of some fuck up on our end. I felt really ashamed of myself as I was still not able to debug the issue.\"]]],[1,\"p\",[[0,[],0,\"While reading the relevant code, the problematic part was a function which looked  like this,\"]]],[10,2],[10,3],[1,\"p\",[[0,[],0,\"A \"],[0,[6],1,\"while\"],[0,[],0,\" loop with an unclear loop invariant. What could possibly go wrong! But actually, nothing in this code was incorrect. The conditions were correct it would give right output for a lot of cases which I had generated in my mind. Let's say, for work timings \"],[0,[6],1,\"9-18\"],[0,[],0,\" (9AM in the morning till 6PM in the evening) and duration of \"],[0,[6],1,\"30\"],[0,[],0,\" minutes per slot, the above function would generate the following output,\"]]],[10,4],[1,\"p\",[[0,[],0,\"Then I looked up why it was failing for the plumber category. I checked the database and got the entry timeslot definitions. The work timings were \"],[0,[6],1,\"9-23\"],[0,[],0,\" (9AM in the morning till 11PM at night) and duration was \"],[0,[6],1,\"60\"],[0,[],0,\" minutes. I mentally evaluated the code and I still couldn't get what was happening  here. Meanwhile, the guy who had written this code was pulling his hair out trying to understand what's happening here while staring at my screen. Then it clicked! It was the biggest WTF moment of my life. I figured out why it failed and I started laughing hysterically. Everyone was astonished at first, giving me an eager look, waiting for me to stop laughing so that they get to know what the hell this issue really was. The guy who wrote the code started shaking me fiercely, \"],[0,[1],1,\"\\\"Tejas, what the hell happened? Tell me! What was the issue? Please tell me ASAP. Stop laughing, you moron!\\\"\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"I somehow caught my breath and regained by senses, and saw the entire section of the office was staring at me - our team, HR, product managers, a few guys from the operations team, marketing guys, and even our CEO - all of them waiting for that one answer. I quickly stabilized myself, looked at that helpless guy and started asking him simple date and time arithmetic,\"]]],[1,\"blockquote\",[[0,[8],1,\"Me:\"],[0,[],0,\" How much is 9 AM + 1 hour?\"],[1,[],0,0],[0,[8],1,\"Him:\"],[0,[],0,\" Stop this stupid thing. Tell me what happened!\"],[1,[],0,1],[0,[8],1,\"Me:\"],[0,[],0,\" You will figure out yourself. Just give me the answer.\"],[1,[],0,2],[0,[8],1,\"Him:\"],[0,[],0,\" 10AM\"],[1,[],0,3],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,4],[0,[8],1,\"Him:\"],[0,[],0,\" 11 AM.\"],[1,[],0,5],[0,[8],1,\"Me:\"],[0,[],0,\" Okay. What's 10PM  + 1 hour?\"],[1,[],0,6],[0,[8],1,\"Him:\"],[0,[],0,\" 11PM\"],[1,[],0,7],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,8],[0,[8],1,\"Him:\"],[0,[],0,\" 12AM.\"],[1,[],0,9],[0,[8],1,\"Me:\"],[0,[],0,\" No. In 24 hour format?\"],[1,[],0,10],[0,[8],1,\"Him:\"],[0,[],0,\" 0 hours. Wait! oh... fuck!\"],[1,[],0,11],[0,[8],1,\"Me:\"],[0,[],0,\" Yes! Python \"],[0,[6],1,\"time\"],[0,[],0,\" objects use 24-hour format instead of 12-hour format. And 0 hours is still less than 23 hours, which still satisfies the loop criteria. Since time is cyclic, this condition will always be true and thus your while loop becomes an infinite loop. Moreover, you're yielding the timeslots at each iteration which explains the slow rise in RAM usage, and infinite loop explains why CPU went 100%.\"]]],[1,\"p\",[[0,[],0,\"It was the biggest \"],[0,[1],1,\"'Aha'\"],[0,[],0,\" moment on the floor. I could see a lot of them holding their heads and some still processing what I explained. Of all, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was giving her widest smile. One by one I was giving an explanation to everyone what happened and how it became an infinite loop. The poor guy put his head down on the table thinking how he couldn't catch this one case and even he gave a smile in the end.\"]]],[1,\"p\",[[0,[],0,\"The reason it was never captured on his machine or on the staging server was because no one had tested that condition! Whereas, just the night before the deployment, I had dumped the production data for categories on my local database for testing out a few things. But I never tested the website, so it wasn't caught even on my machine.\"]]],[1,\"h1\",[[0,[],0,\"Resolution\"]]],[1,\"p\",[[0,[],0,\"It was \"],[0,[1],1,\"really\"],[0,[],0,\" simple. Just compare the \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"time\"],[0,[],0,\" objects so that at 12AM, the day also increments which no longer satisfies the loop conditions and the loop breaks out. \"]]],[1,\"p\",[[0,[],0,\"The change was quickly made, tested on the same category. This time it worked without blowing the CPU usage off the roof. I still didn't understand why did he prefer comparing \"],[0,[6],1,\"time\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects. But it's fine. The patch was pushed on production and it worked correctly now for that same category. All dashboards were up and working and everybody, after enjoying their little free time, were back to their work. It was 12PM by now. I was definitely a zombie at this point. I spend another few hours figuring out other such pieces in code along with other team members and finally left for home \"],[0,[1],1,\"early\"],[0,[],0,\" at 4PM.\"]]],[10,5],[1,\"h1\",[[0,[],0,\"Important takeaways\"]]],[3,\"ul\",[[[0,[],0,\"NEVER EVER DO BIG BANG RELEASES! Release incrementally, in small chunks. It's easier to find needle among a few sticks of hay than an entire haystack.\"]],[[0,[],0,\"Logging is crucial. Learn how to log. Though I personally would not recommend, but log at every checkpoint in the code. If feel you would be inundated with logs, use log levels (\"],[0,[1],1,\"DEBUG\"],[0,[],0,\", \"],[0,[1],1,\"INFO\"],[0,[],0,\", \"],[0,[1],1,\"WARNING\"],[0,[],0,\", \"],[0,[1],1,\"ERROR\"],[0,[],0,\") and configure it with environment flags.\"]],[[0,[],0,\" No matter how rigorous QA testing you do, some things still escape the eyes of all. We can't help it. But at least ensure that all the cases already defined by the business teams are fully covered in the tests.\"]],[[0,[],0,\"Software engineers are humans. They can't be right all the time. Neither can someone think of all possible edge cases that may arise in the code, let alone something that would be defined by the end user. Empathize them and understand that such issues are not because they are incompetent but rather something which was inevitable. Rather I would think of that incident this way - of the 10K+ lines of code that went on production, only one line was the culprit.\"]],[[0,[],0,\"To this day, I really appreciate \"],[0,[1],1,\"Gauri\"],[0,[],0,\"'s stand. She's very strict in maintaining code quality and business logic implementation, and scolded us a lot for our mistakes. But in that moment, she was the only one who was fighting for us against the whole company and gave us as much time as she could afford. Not only her, even our CEO was very relaxed and despite knowing that every minute that we spent debugging this issue costed him money, he still supported us and didn't freak out either. Things would have gone horribly wrong if it wasn't for them. As a manager, stressing out your teams in such situations just makes everything worse. The team needs someone who would shield them from everyone else while they just focus on fixing the issue.\"]]]]]}","created_at_ts":1544300452239,"created_at":"2018-12-08 20:20:52"},{"id":"5c0c27f7ec0bfe1f862bf25d","post_id":"5c0c1e7aabc169173fada4cb","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{}],[\"hr\",{}],[\"markdown\",{\"markdown\":\"```python line-numbers\\nfrom datetime import datetime, time, date\\n\\nfrom dateutil.relativedelta import relativedelta\\n\\ndef get_next_slot(work_timings, duration):\\n    start_hour, end_hour = map(int, work_timings.split('-'))\\n    start_datetime = datetime.combine(date.today(), time(hour=start_hour))\\n    end_datetime = datetime.combine(date.today(), time(hour=end_hour))\\n    slot = relativedelta(minutes=duration)\\n\\n    while start_datetime.time() <= end_datetime.time():\\n        end_slot = start_datetime + relativedelta(minutes=duration)\\n\\n        yield start_datetime.time(), end_slot.time()\\n        start_datetime = end_slot\\n```\"}],[\"html\",{\"html\":\"<p>\\n    <small><strong>NOTE:</strong> The above snippet is not the exact piece of code that was causing the issue. This is a workable example written from the memory I had of that incident.</small>\\n</p>\"}],[\"code\",{\"code\":\"(datetime.time(9, 0), datetime.time(9, 30))\\n(datetime.time(9, 30), datetime.time(10, 0))\\n(datetime.time(10, 0), datetime.time(10, 30))\\n(datetime.time(10, 30), datetime.time(11, 0))\\n(datetime.time(11, 0), datetime.time(11, 30))\\n(datetime.time(11, 30), datetime.time(12, 0))\\n(datetime.time(12, 0), datetime.time(12, 30))\\n(datetime.time(12, 30), datetime.time(13, 0))\\n(datetime.time(13, 0), datetime.time(13, 30))\\n(datetime.time(13, 30), datetime.time(14, 0))\\n(datetime.time(14, 0), datetime.time(14, 30))\\n(datetime.time(14, 30), datetime.time(15, 0))\\n(datetime.time(15, 0), datetime.time(15, 30))\\n(datetime.time(15, 30), datetime.time(16, 0))\\n(datetime.time(16, 0), datetime.time(16, 30))\\n(datetime.time(16, 30), datetime.time(17, 0))\\n(datetime.time(17, 0), datetime.time(17, 30))\\n(datetime.time(17, 30), datetime.time(18, 0))\\n(datetime.time(18, 0), datetime.time(18, 30))\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.linkedin.com/company/localoye/\"]],[\"em\"],[\"a\",[\"href\",\"https://www.djangoproject.com/\"]],[\"a\",[\"href\",\"https://www.mysql.com/\"]],[\"a\",[\"href\",\"https://danielkummer.github.io/git-flow-cheatsheet/\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man1/top.1.html\"]],[\"code\"],[\"a\",[\"href\",\"https://fabric.io/kits/android/crashlytics\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"This is a debugging story at my first job at \"],[0,[0],1,\"LocalOye\"],[0,[],0,\", where we encountered a bug which I still consider to be one of the best I've ever encountered.\"]]],[10,0],[1,\"h1\",[[0,[],0,\"Background\"]]],[1,\"p\",[[0,[],0,\"LocalOye was a mass-market services aggregator startup (now shutdown). We connected the service providers (plumbers, electricians, carpenters, yoga trainers, etc.) to the consumers through our app. \"]]],[1,\"p\",[[0,[],0,\"Like all tech startups in their early booming days, ours too was on a feature spree. We had around half a dozen of major features rolling out in a single release. We used to call these as \"],[0,[1],1,\"big bang releases\"],[0,[],0,\". Our tech stack was \"],[0,[2],1,\"Django\"],[0,[],0,\" with \"],[0,[3],1,\"MySQL\"],[0,[],0,\" and the entire system was split into a bunch of microservices.\"]]],[1,\"p\",[[0,[],0,\"We were rolling out a bunch of features, but for sake brevity, let's just focus on the one that caused the issue. When booking for an appointment for a service, the customer has to answer a bunch of questions including the type of service, location, cost range, timing, etc. We introduced something called as variable time slots where providers can define their own time slots for the whole day, assign the time range they will be working in and the size of a time slot per customer.\"]]],[1,\"p\",[[0,[],0,\"There were around 19 \"],[0,[4],1,\"feature branches\"],[0,[],0,\" written by our team of 6 backend engineers, which were supposed to be merged and pushed on production and I was given this messy work. After fighting the nightmarish merge conflicts, last minute fixes, syntax errors (on staging!), cyclic dependencies and migration conflicts, I somehow managed to get it all in one branch. It was also my longest day at work (37 hours, though I'm no longer proud of this achievement). Yet we were on an ass-on-fire situation because the deployment was still not done.\"]]],[1,\"p\",[[0,[],0,\"Finally, the next day we got a green flag from QA and we're ready to deploy. Like all our major releases, this was gonna go on production at night. We still didn't have CI/CD in place, so all deployments were manual (login to the instance, pull the code, restart server). We decided the deployment to be done at around 4 AM since the load was minimal and if anything goes haywire, we had minimal loss. We had stayed back in the office including the backend team, frontend team, our backend lead (\"],[0,[1],1,\"Gauri\"],[0,[],0,\") and head of technology (\"],[0,[1],1,\"Vivek\"],[0,[],0,\"). \"]]],[1,\"p\",[[0,[],0,\"The deployment happened at around 6 AM and we did a basic test whether everything was working fine. It seemed the deployment was a success. We felt relieved! Everyone was almost half asleep at this point and were really happy that they finally got this release done and now they can cozily lay back on their beds and enjoy their well deserved sleep. I was particularly a zombie at this point since I just had a 7 hour sleep after that humongous 37 hour stint and I was up again for 16 hours now. Soon everyone packed their bags and left one by one. Me and Gauri stayed back. While she wrote the \"],[0,[1],1,\"\\\"Deployment successful\\\"\"],[0,[],0,\" email, marking our product managers, business teams and CEO, I was busy closing my code editors, terminals, ticking off points on the deployment checklist and, finally, shutting down my laptop.\"]]],[10,1],[1,\"h1\",[[0,[],0,\"One by one, things fell apart\"]]],[1,\"p\",[[0,[],0,\"Everything was nice and happy and we decided to step down for a quick breakfast. While coming back, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" got a nice good morning call from \"],[0,[1],1,\"Vivek\"],[0,[],0,\" informing that he was getting API timeout errors on web. All AJAX calls to the server waited for 30 seconds (default for HTTP requests) and would return with a timeout error. We quickly headed back to the office, turned on our laptops and started monitoring our servers using the all time reliable Linux's \"],[0,[5],1,\"top\"],[0,[],0,\"! One of the servers that hosted our microserivce, which is responsible for reading data from server and contained most of the business logic, shot to 100% CPU. We waited for sometime, but it still didn't seem to settle. Since it affected all other microservices, we spent minimal time investigating and \"],[0,[1],1,\"Gauri\"],[0,[],0,\" just \"],[0,[6],1,\"kill -9\"],[0,[],0,\"'d  the service processes and spawned them again. We again monitored for 15-20 minutes. Nothing went wrong now. All seemed fine.\"]]],[1,\"p\",[[0,[],0,\"We thought that was some random one-off error. Might be some edge case. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called back \"],[0,[1],1,\"Vivek\"],[0,[],0,\" and notified him that the server was all fine and he should test again. After a quick test, \"],[0,[1],1,\"Vivek\"],[0,[],0,\" gave a confirmation that it was all okay now. We were relieved but super confused. In the end, we said \"],[0,[1],1,\"\\\"chuck it\\\"\"],[0,[],0,\" and moved on. By this time, our operations team and customer support team started coming to office one by one, astonished to see both of us still in office. It was 8 AM now.\"]]],[1,\"p\",[[0,[],0,\"Just when I closed my terminal, one of the guys from the operations came to our desk and informed that all the dashboards are empty. Nothing was showing up, these guys couldn't even open up a single service request on the dashboard. I went with him to investigate (using our beloved Chome Developer Tools) and found the same error \"],[0,[1],1,\"Vivek\"],[0,[],0,\" was getting earlier. APIs were timing out. I quickly ran to \"],[0,[1],1,\"Gauri\"],[0,[],0,\" and asked her to monitor the servers and bam! The CPU was again on 100%. Now I almost started freaking out. As a software engineer, I feel disgraced when something I build doesn't work and the end user is affected. I started thinking of all possible places where I could have gone wrong - \"],[0,[1],1,\"\\\"Perhaps the merge didn't end well. What if there's a cyclic dependency which is causing the Python interpreter to freak out? Maybe I removed some essential piece of code in merge conflicts which is causing this issue? Did internet just go off on Digital Ocean servers?\\\"\"],[0,[],0,\". And there stood \"],[0,[1],1,\"Gauri\"],[0,[],0,\", as calm as the sea, steadfast, neatly monitoring any patterns in this behavior and without even the slightest bit of stress on her face, and comforting me that there's nothing to panic and I should stay calm. She found that, not only the CPU went 100%, even the RAM usage slowly went from 15% to 78%! She again killed the processes and started again and everything went back to normal.\"]]],[1,\"p\",[[0,[],0,\"I was puzzled beyond imagination. My first thought was to review the all the code that went on production. Yes, all of it! All code in those 19 feature branches, which would amount to around 10K lines. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me to add logs everywhere - start and end of function body, API endpoints, RPC calls, etc. I quickly managed to do it, at least in the new code that was deployed. But we were running out of time. It was 9AM and people from other teams were arriving one by one only to find an occasional service disruption. At this point, we didn't even bother checking the \"],[0,[7],1,\"Crashlytics\"],[0,[],0,\" dashboard because even the app was getting the same timeout errors. Our main website opened with an empty header since that's where we displayed the service categories we provided, since the API for that too was getting timed out. The frequency of this disruption exacerbated as the day progressed and more and more users started using the app. \"]]],[1,\"p\",[[0,[],0,\"The thing is, no one had any idea what caused it. Being amateur developers, we made one of the most common beginner mistakes - insufficient logging. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called up everyone in the team to come to office as soon as they can and it as a \"],[0,[1],1,\"P0\"],[0,[],0,\" situation. Most of them were in their deep sleep at this point and the few who answered also started panicking like crazy. While everyone was on their way, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me the last thing I wanted to hear - \"],[0,[1],1,\"\\\"Let's rollback the release.\\\"\"],[0,[],0,\". This was even more disgraceful. Something that you built was so bad that it had to be taken down. The release was already delayed by three days and I didn't want to get it delayed any further. I resisted and asked for a bit more time. Seeing that I hadn't given on this hopeless situation, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" also decided to give me another hour and if nothing happens, she would rollback the release at 11AM.\"]]],[1,\"h1\",[[0,[],0,\"Finally, a ray of hope\"]]],[1,\"p\",[[0,[],0,\"After mindlessly testing and hopelessly trying to reproduce the issue on my local environment, I decided to test all the frontend apps on my machine. The first one that I had already setup on my laptop was the main website. I started randomly opening all the pages, tried creating a service request. Just when I tried creating a service request for some random category, the network request stalled and, for the first time in life, I was happy to see an error in browser console - \"],[0,[8],1,\"504 Gateway Timeout\"],[0,[],0,\". I screamed out \"],[0,[1],1,\"\\\"Gauri! I could reproduce the issue on my machine!\\\"\"],[0,[],0,\". I killed the server process, spawned it again, created the same request and the server timed out again. My happiness had no bounds at that time! By this time the other guys in our team also came in one by one and started maniacally glaring into their laptops, browsing through the code they wrote, nervously thinking whether their code was the culprit. Meanwhile, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was on her newly acquired routine on the production server - monitor, kill, spawn again, repeat.\"]]],[1,\"p\",[[0,[],0,\"But, then came a sudden twist. My fellow teammate tried created a service request on his machine and it worked. Some guy created one on staging and it worked. Hell, someone created one on production too and it worked! In a second, all my happiness got flushed out and I was back to stage one. To my utter disgusting surprise, even I couldn't reproduce it on my machine now. I almost surrendered and gave in for the idea of rolling back the release, but then I checked why it went 100% CPU for that specific case. I furiously kept hitting the back button on the browser until I reached that page where I was able to reproduce the issue. And voila! It went 100% again.\"]]],[1,\"p\",[[0,[],0,\"It was for the plumber category that the issue got reproduced. I tried to replicate it on staging, couldn't reproduce. I tried it on my teammate's machine, couldn't replicate it. Tried on production, went 100% again. I wanted to double check whether this was because of my request and not someone else's, I reproduced it 10 times in a row. And yes, it was reproduced exactly when I opened the plumber category page. I knew it was not an environment specific issue for sure. Meanwhile I had isolated the code block where this was happening and that's where I got the breakthrough.\"]]],[1,\"h1\",[[0,[],0,\"Digging into the code\"]]],[1,\"p\",[[0,[],0,\"While our investigation was still going on, it was well past 11AM now. I could glance at the other side where the operations team was seated to find them browsing Facebook, playing games, some busy doing work not related to the dashboard, some falling back to trusted old Excel sheets. Overall, it was a very depressing scene wherein the operations team and customer support teams weren't able to do their work because of some fuck up on our end. I felt really ashamed of myself as I was still not able to debug the issue.\"]]],[1,\"p\",[[0,[],0,\"While reading the relevant code, the problematic part was a function which looked  like this,\"]]],[10,2],[10,3],[1,\"p\",[[0,[],0,\"A \"],[0,[6],1,\"while\"],[0,[],0,\" loop with an unclear loop invariant. What could possibly go wrong! But actually, nothing in this code was incorrect. The conditions were correct it would give right output for a lot of cases which I had generated in my mind. Let's say, for work timings \"],[0,[6],1,\"9-18\"],[0,[],0,\" (9AM in the morning till 6PM in the evening) and duration of \"],[0,[6],1,\"30\"],[0,[],0,\" minutes per slot, the above function would generate the following output,\"]]],[10,4],[1,\"p\",[[0,[],0,\"Then I looked up why it was failing for the plumber category. I checked the database and got the entry timeslot definitions. The work timings were \"],[0,[6],1,\"9-23\"],[0,[],0,\" (9AM in the morning till 11PM at night) and duration was \"],[0,[6],1,\"60\"],[0,[],0,\" minutes. I mentally evaluated the code and I still couldn't get what was happening  here. Meanwhile, the guy who had written this code was pulling his hair out trying to understand what's happening here while staring at my screen. Then it clicked! It was the biggest WTF moment of my life. I figured out why it failed and I started laughing hysterically. Everyone was astonished at first, giving me an eager look, waiting for me to stop laughing so that they get to know what the hell this issue really was. The guy who wrote the code started shaking me fiercely, \"],[0,[1],1,\"\\\"Tejas, what the hell happened? Tell me! What was the issue? Please tell me ASAP. Stop laughing, you moron!\\\"\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"I somehow caught my breath and regained by senses, and saw the entire section of the office was staring at me - our team, HR, product managers, a few guys from the operations team, marketing guys, and even our CEO - all of them waiting for that one answer. I quickly stabilized myself, looked at that helpless guy and started asking him simple date and time arithmetic,\"]]],[1,\"blockquote\",[[0,[8],1,\"Me:\"],[0,[],0,\" How much is 9 AM + 1 hour?\"],[1,[],0,0],[0,[8],1,\"Him:\"],[0,[],0,\" Stop this stupid thing. Tell me what happened!\"],[1,[],0,1],[0,[8],1,\"Me:\"],[0,[],0,\" You will figure out yourself. Just give me the answer.\"],[1,[],0,2],[0,[8],1,\"Him:\"],[0,[],0,\" 10AM\"],[1,[],0,3],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,4],[0,[8],1,\"Him:\"],[0,[],0,\" 11 AM.\"],[1,[],0,5],[0,[8],1,\"Me:\"],[0,[],0,\" Okay. What's 10PM  + 1 hour?\"],[1,[],0,6],[0,[8],1,\"Him:\"],[0,[],0,\" 11PM\"],[1,[],0,7],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,8],[0,[8],1,\"Him:\"],[0,[],0,\" 12AM.\"],[1,[],0,9],[0,[8],1,\"Me:\"],[0,[],0,\" No. In 24 hour format?\"],[1,[],0,10],[0,[8],1,\"Him:\"],[0,[],0,\" 0 hours. Wait! oh... fuck!\"],[1,[],0,11],[0,[8],1,\"Me:\"],[0,[],0,\" Yes! Python \"],[0,[6],1,\"time\"],[0,[],0,\" objects use 24-hour format instead of 12-hour format. And 0 hours is still less than 23 hours, which still satisfies the loop criteria. Since time is cyclic, this condition will always be true and thus your while loop becomes an infinite loop. Moreover, you're yielding the timeslots at each iteration which explains the slow rise in RAM usage, and infinite loop explains why CPU went 100%.\"]]],[1,\"p\",[[0,[],0,\"It was the biggest \"],[0,[1],1,\"'Aha'\"],[0,[],0,\" moment on the floor. I could see a lot of them holding their heads and some still processing what I explained. Of all, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was giving her widest smile. One by one I was giving an explanation to everyone what happened and how it became an infinite loop. The poor guy put his head down on the table thinking how he couldn't catch this one case and even he gave a smile in the end.\"]]],[1,\"p\",[[0,[],0,\"The reason it was never captured on his machine or on the staging server was because no one had tested that condition! Whereas, just the night before the deployment, I had dumped the production data for categories on my local database for testing out a few things. But I never tested the website, so it wasn't caught even on my machine.\"]]],[1,\"h1\",[[0,[],0,\"Resolution\"]]],[1,\"p\",[[0,[],0,\"It was \"],[0,[1],1,\"really\"],[0,[],0,\" simple. Just compare the \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"time\"],[0,[],0,\" objects so that at 12AM, the day also increments which no longer satisfies the loop conditions and the loop breaks out. \"]]],[1,\"p\",[[0,[],0,\"The change was quickly made, tested on the same category. This time it worked without blowing the CPU usage off the roof. I still didn't understand why did he prefer comparing \"],[0,[6],1,\"time\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects. But it's fine. The patch was pushed on production and it worked correctly now for that same category. All dashboards were up and working and everybody, after enjoying their little free time, were back to their work. It was 12PM by now. I was definitely a zombie at this point. I spend another few hours figuring out other such pieces in code along with other team members and finally left for home \"],[0,[1],1,\"early\"],[0,[],0,\" at 4PM.\"]]],[10,5],[1,\"h1\",[[0,[],0,\"Important takeaways\"]]],[3,\"ul\",[[[0,[],0,\"NEVER EVER DO BIG BANG RELEASES! Release incrementally, in small chunks. It's easier to find needle among a few sticks of hay than an entire haystack.\"]],[[0,[],0,\"Logging is crucial. Learn how to log. Though I personally would not recommend, but log at every checkpoint in the code. If feel you would be inundated with logs, use log levels (\"],[0,[1],1,\"DEBUG\"],[0,[],0,\", \"],[0,[1],1,\"INFO\"],[0,[],0,\", \"],[0,[1],1,\"WARNING\"],[0,[],0,\", \"],[0,[1],1,\"ERROR\"],[0,[],0,\") and configure it with environment flags.\"]],[[0,[],0,\" No matter how rigorous QA testing you do, some things still escape the eyes of all. We can't help it. But at least ensure that all the cases already defined by the business teams are fully covered in the tests.\"]],[[0,[],0,\"Software engineers are humans. They can't be right all the time. Neither can someone think of all possible edge cases that may arise in the code, let alone something that would be defined by the end user. Empathize them and understand that such issues are not because they are incompetent but rather something which was inevitable. Rather I would think of that incident this way - of the 10K+ lines of code that went on production, only one line was the culprit.\"]],[[0,[],0,\"To this day, I really appreciate \"],[0,[1],1,\"Gauri\"],[0,[],0,\"'s stand. She's very strict in maintaining code quality and business logic implementation, and scolded us a lot for our mistakes. But in that moment, she was the only one who was fighting for us against the whole company and gave us as much time as she could afford. Not only her, even our CEO was very relaxed and despite knowing that every minute that we spent debugging this issue costed him money, he still supported us and didn't freak out either. Things would have gone horribly wrong if it wasn't for them. As a manager, stressing out your teams in such situations just makes everything worse. The team needs someone who would shield them from everyone else while they just focus on fixing the issue.\"]]]]]}","created_at_ts":1544300535228,"created_at":"2018-12-08 20:22:15"},{"id":"5c0c28a4ec0bfe1f862bf25e","post_id":"5c0c1e7aabc169173fada4cb","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{}],[\"hr\",{}],[\"markdown\",{\"markdown\":\"```language-python\\nfrom datetime import datetime, time, date\\n\\nfrom dateutil.relativedelta import relativedelta\\n\\ndef get_next_slot(work_timings, duration):\\n    start_hour, end_hour = map(int, work_timings.split('-'))\\n    start_datetime = datetime.combine(date.today(), time(hour=start_hour))\\n    end_datetime = datetime.combine(date.today(), time(hour=end_hour))\\n    slot = relativedelta(minutes=duration)\\n\\n    while start_datetime.time() <= end_datetime.time():\\n        end_slot = start_datetime + relativedelta(minutes=duration)\\n\\n        yield start_datetime.time(), end_slot.time()\\n        start_datetime = end_slot\\n```\"}],[\"html\",{\"html\":\"<p>\\n    <small><strong>NOTE:</strong> The above snippet is not the exact piece of code that was causing the issue. This is a workable example written from the memory I had of that incident.</small>\\n</p>\"}],[\"code\",{\"code\":\"(datetime.time(9, 0), datetime.time(9, 30))\\n(datetime.time(9, 30), datetime.time(10, 0))\\n(datetime.time(10, 0), datetime.time(10, 30))\\n(datetime.time(10, 30), datetime.time(11, 0))\\n(datetime.time(11, 0), datetime.time(11, 30))\\n(datetime.time(11, 30), datetime.time(12, 0))\\n(datetime.time(12, 0), datetime.time(12, 30))\\n(datetime.time(12, 30), datetime.time(13, 0))\\n(datetime.time(13, 0), datetime.time(13, 30))\\n(datetime.time(13, 30), datetime.time(14, 0))\\n(datetime.time(14, 0), datetime.time(14, 30))\\n(datetime.time(14, 30), datetime.time(15, 0))\\n(datetime.time(15, 0), datetime.time(15, 30))\\n(datetime.time(15, 30), datetime.time(16, 0))\\n(datetime.time(16, 0), datetime.time(16, 30))\\n(datetime.time(16, 30), datetime.time(17, 0))\\n(datetime.time(17, 0), datetime.time(17, 30))\\n(datetime.time(17, 30), datetime.time(18, 0))\\n(datetime.time(18, 0), datetime.time(18, 30))\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.linkedin.com/company/localoye/\"]],[\"em\"],[\"a\",[\"href\",\"https://www.djangoproject.com/\"]],[\"a\",[\"href\",\"https://www.mysql.com/\"]],[\"a\",[\"href\",\"https://danielkummer.github.io/git-flow-cheatsheet/\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man1/top.1.html\"]],[\"code\"],[\"a\",[\"href\",\"https://fabric.io/kits/android/crashlytics\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"This is a debugging story at my first job at \"],[0,[0],1,\"LocalOye\"],[0,[],0,\", where we encountered a bug which I still consider to be one of the best I've ever encountered.\"]]],[10,0],[1,\"h1\",[[0,[],0,\"Background\"]]],[1,\"p\",[[0,[],0,\"LocalOye was a mass-market services aggregator startup (now shutdown). We connected the service providers (plumbers, electricians, carpenters, yoga trainers, etc.) to the consumers through our app. \"]]],[1,\"p\",[[0,[],0,\"Like all tech startups in their early booming days, ours too was on a feature spree. We had around half a dozen of major features rolling out in a single release. We used to call these as \"],[0,[1],1,\"big bang releases\"],[0,[],0,\". Our tech stack was \"],[0,[2],1,\"Django\"],[0,[],0,\" with \"],[0,[3],1,\"MySQL\"],[0,[],0,\" and the entire system was split into a bunch of microservices.\"]]],[1,\"p\",[[0,[],0,\"We were rolling out a bunch of features, but for sake brevity, let's just focus on the one that caused the issue. When booking for an appointment for a service, the customer has to answer a bunch of questions including the type of service, location, cost range, timing, etc. We introduced something called as variable time slots where providers can define their own time slots for the whole day, assign the time range they will be working in and the size of a time slot per customer.\"]]],[1,\"p\",[[0,[],0,\"There were around 19 \"],[0,[4],1,\"feature branches\"],[0,[],0,\" written by our team of 6 backend engineers, which were supposed to be merged and pushed on production and I was given this messy work. After fighting the nightmarish merge conflicts, last minute fixes, syntax errors (on staging!), cyclic dependencies and migration conflicts, I somehow managed to get it all in one branch. It was also my longest day at work (37 hours, though I'm no longer proud of this achievement). Yet we were on an ass-on-fire situation because the deployment was still not done.\"]]],[1,\"p\",[[0,[],0,\"Finally, the next day we got a green flag from QA and we're ready to deploy. Like all our major releases, this was gonna go on production at night. We still didn't have CI/CD in place, so all deployments were manual (login to the instance, pull the code, restart server). We decided the deployment to be done at around 4 AM since the load was minimal and if anything goes haywire, we had minimal loss. We had stayed back in the office including the backend team, frontend team, our backend lead (\"],[0,[1],1,\"Gauri\"],[0,[],0,\") and head of technology (\"],[0,[1],1,\"Vivek\"],[0,[],0,\"). \"]]],[1,\"p\",[[0,[],0,\"The deployment happened at around 6 AM and we did a basic test whether everything was working fine. It seemed the deployment was a success. We felt relieved! Everyone was almost half asleep at this point and were really happy that they finally got this release done and now they can cozily lay back on their beds and enjoy their well deserved sleep. I was particularly a zombie at this point since I just had a 7 hour sleep after that humongous 37 hour stint and I was up again for 16 hours now. Soon everyone packed their bags and left one by one. Me and Gauri stayed back. While she wrote the \"],[0,[1],1,\"\\\"Deployment successful\\\"\"],[0,[],0,\" email, marking our product managers, business teams and CEO, I was busy closing my code editors, terminals, ticking off points on the deployment checklist and, finally, shutting down my laptop.\"]]],[10,1],[1,\"h1\",[[0,[],0,\"One by one, things fell apart\"]]],[1,\"p\",[[0,[],0,\"Everything was nice and happy and we decided to step down for a quick breakfast. While coming back, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" got a nice good morning call from \"],[0,[1],1,\"Vivek\"],[0,[],0,\" informing that he was getting API timeout errors on web. All AJAX calls to the server waited for 30 seconds (default for HTTP requests) and would return with a timeout error. We quickly headed back to the office, turned on our laptops and started monitoring our servers using the all time reliable Linux's \"],[0,[5],1,\"top\"],[0,[],0,\"! One of the servers that hosted our microserivce, which is responsible for reading data from server and contained most of the business logic, shot to 100% CPU. We waited for sometime, but it still didn't seem to settle. Since it affected all other microservices, we spent minimal time investigating and \"],[0,[1],1,\"Gauri\"],[0,[],0,\" just \"],[0,[6],1,\"kill -9\"],[0,[],0,\"'d  the service processes and spawned them again. We again monitored for 15-20 minutes. Nothing went wrong now. All seemed fine.\"]]],[1,\"p\",[[0,[],0,\"We thought that was some random one-off error. Might be some edge case. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called back \"],[0,[1],1,\"Vivek\"],[0,[],0,\" and notified him that the server was all fine and he should test again. After a quick test, \"],[0,[1],1,\"Vivek\"],[0,[],0,\" gave a confirmation that it was all okay now. We were relieved but super confused. In the end, we said \"],[0,[1],1,\"\\\"chuck it\\\"\"],[0,[],0,\" and moved on. By this time, our operations team and customer support team started coming to office one by one, astonished to see both of us still in office. It was 8 AM now.\"]]],[1,\"p\",[[0,[],0,\"Just when I closed my terminal, one of the guys from the operations came to our desk and informed that all the dashboards are empty. Nothing was showing up, these guys couldn't even open up a single service request on the dashboard. I went with him to investigate (using our beloved Chome Developer Tools) and found the same error \"],[0,[1],1,\"Vivek\"],[0,[],0,\" was getting earlier. APIs were timing out. I quickly ran to \"],[0,[1],1,\"Gauri\"],[0,[],0,\" and asked her to monitor the servers and bam! The CPU was again on 100%. Now I almost started freaking out. As a software engineer, I feel disgraced when something I build doesn't work and the end user is affected. I started thinking of all possible places where I could have gone wrong - \"],[0,[1],1,\"\\\"Perhaps the merge didn't end well. What if there's a cyclic dependency which is causing the Python interpreter to freak out? Maybe I removed some essential piece of code in merge conflicts which is causing this issue? Did internet just go off on Digital Ocean servers?\\\"\"],[0,[],0,\". And there stood \"],[0,[1],1,\"Gauri\"],[0,[],0,\", as calm as the sea, steadfast, neatly monitoring any patterns in this behavior and without even the slightest bit of stress on her face, and comforting me that there's nothing to panic and I should stay calm. She found that, not only the CPU went 100%, even the RAM usage slowly went from 15% to 78%! She again killed the processes and started again and everything went back to normal.\"]]],[1,\"p\",[[0,[],0,\"I was puzzled beyond imagination. My first thought was to review the all the code that went on production. Yes, all of it! All code in those 19 feature branches, which would amount to around 10K lines. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me to add logs everywhere - start and end of function body, API endpoints, RPC calls, etc. I quickly managed to do it, at least in the new code that was deployed. But we were running out of time. It was 9AM and people from other teams were arriving one by one only to find an occasional service disruption. At this point, we didn't even bother checking the \"],[0,[7],1,\"Crashlytics\"],[0,[],0,\" dashboard because even the app was getting the same timeout errors. Our main website opened with an empty header since that's where we displayed the service categories we provided, since the API for that too was getting timed out. The frequency of this disruption exacerbated as the day progressed and more and more users started using the app. \"]]],[1,\"p\",[[0,[],0,\"The thing is, no one had any idea what caused it. Being amateur developers, we made one of the most common beginner mistakes - insufficient logging. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called up everyone in the team to come to office as soon as they can and it as a \"],[0,[1],1,\"P0\"],[0,[],0,\" situation. Most of them were in their deep sleep at this point and the few who answered also started panicking like crazy. While everyone was on their way, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me the last thing I wanted to hear - \"],[0,[1],1,\"\\\"Let's rollback the release.\\\"\"],[0,[],0,\". This was even more disgraceful. Something that you built was so bad that it had to be taken down. The release was already delayed by three days and I didn't want to get it delayed any further. I resisted and asked for a bit more time. Seeing that I hadn't given on this hopeless situation, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" also decided to give me another hour and if nothing happens, she would rollback the release at 11AM.\"]]],[1,\"h1\",[[0,[],0,\"Finally, a ray of hope\"]]],[1,\"p\",[[0,[],0,\"After mindlessly testing and hopelessly trying to reproduce the issue on my local environment, I decided to test all the frontend apps on my machine. The first one that I had already setup on my laptop was the main website. I started randomly opening all the pages, tried creating a service request. Just when I tried creating a service request for some random category, the network request stalled and, for the first time in life, I was happy to see an error in browser console - \"],[0,[8],1,\"504 Gateway Timeout\"],[0,[],0,\". I screamed out \"],[0,[1],1,\"\\\"Gauri! I could reproduce the issue on my machine!\\\"\"],[0,[],0,\". I killed the server process, spawned it again, created the same request and the server timed out again. My happiness had no bounds at that time! By this time the other guys in our team also came in one by one and started maniacally glaring into their laptops, browsing through the code they wrote, nervously thinking whether their code was the culprit. Meanwhile, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was on her newly acquired routine on the production server - monitor, kill, spawn again, repeat.\"]]],[1,\"p\",[[0,[],0,\"But, then came a sudden twist. My fellow teammate tried created a service request on his machine and it worked. Some guy created one on staging and it worked. Hell, someone created one on production too and it worked! In a second, all my happiness got flushed out and I was back to stage one. To my utter disgusting surprise, even I couldn't reproduce it on my machine now. I almost surrendered and gave in for the idea of rolling back the release, but then I checked why it went 100% CPU for that specific case. I furiously kept hitting the back button on the browser until I reached that page where I was able to reproduce the issue. And voila! It went 100% again.\"]]],[1,\"p\",[[0,[],0,\"It was for the plumber category that the issue got reproduced. I tried to replicate it on staging, couldn't reproduce. I tried it on my teammate's machine, couldn't replicate it. Tried on production, went 100% again. I wanted to double check whether this was because of my request and not someone else's, I reproduced it 10 times in a row. And yes, it was reproduced exactly when I opened the plumber category page. I knew it was not an environment specific issue for sure. Meanwhile I had isolated the code block where this was happening and that's where I got the breakthrough.\"]]],[1,\"h1\",[[0,[],0,\"Digging into the code\"]]],[1,\"p\",[[0,[],0,\"While our investigation was still going on, it was well past 11AM now. I could glance at the other side where the operations team was seated to find them browsing Facebook, playing games, some busy doing work not related to the dashboard, some falling back to trusted old Excel sheets. Overall, it was a very depressing scene wherein the operations team and customer support teams weren't able to do their work because of some fuck up on our end. I felt really ashamed of myself as I was still not able to debug the issue.\"]]],[1,\"p\",[[0,[],0,\"While reading the relevant code, the problematic part was a function which looked  like this,\"]]],[10,2],[10,3],[1,\"p\",[[0,[],0,\"A \"],[0,[6],1,\"while\"],[0,[],0,\" loop with an unclear loop invariant. What could possibly go wrong! But actually, nothing in this code was incorrect. The conditions were correct it would give right output for a lot of cases which I had generated in my mind. Let's say, for work timings \"],[0,[6],1,\"9-18\"],[0,[],0,\" (9AM in the morning till 6PM in the evening) and duration of \"],[0,[6],1,\"30\"],[0,[],0,\" minutes per slot, the above function would generate the following output,\"]]],[10,4],[1,\"p\",[[0,[],0,\"Then I looked up why it was failing for the plumber category. I checked the database and got the entry timeslot definitions. The work timings were \"],[0,[6],1,\"9-23\"],[0,[],0,\" (9AM in the morning till 11PM at night) and duration was \"],[0,[6],1,\"60\"],[0,[],0,\" minutes. I mentally evaluated the code and I still couldn't get what was happening  here. Meanwhile, the guy who had written this code was pulling his hair out trying to understand what's happening here while staring at my screen. Then it clicked! It was the biggest WTF moment of my life. I figured out why it failed and I started laughing hysterically. Everyone was astonished at first, giving me an eager look, waiting for me to stop laughing so that they get to know what the hell this issue really was. The guy who wrote the code started shaking me fiercely, \"],[0,[1],1,\"\\\"Tejas, what the hell happened? Tell me! What was the issue? Please tell me ASAP. Stop laughing, you moron!\\\"\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"I somehow caught my breath and regained by senses, and saw the entire section of the office was staring at me - our team, HR, product managers, a few guys from the operations team, marketing guys, and even our CEO - all of them waiting for that one answer. I quickly stabilized myself, looked at that helpless guy and started asking him simple date and time arithmetic,\"]]],[1,\"blockquote\",[[0,[8],1,\"Me:\"],[0,[],0,\" How much is 9 AM + 1 hour?\"],[1,[],0,0],[0,[8],1,\"Him:\"],[0,[],0,\" Stop this stupid thing. Tell me what happened!\"],[1,[],0,1],[0,[8],1,\"Me:\"],[0,[],0,\" You will figure out yourself. Just give me the answer.\"],[1,[],0,2],[0,[8],1,\"Him:\"],[0,[],0,\" 10AM\"],[1,[],0,3],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,4],[0,[8],1,\"Him:\"],[0,[],0,\" 11 AM.\"],[1,[],0,5],[0,[8],1,\"Me:\"],[0,[],0,\" Okay. What's 10PM  + 1 hour?\"],[1,[],0,6],[0,[8],1,\"Him:\"],[0,[],0,\" 11PM\"],[1,[],0,7],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,8],[0,[8],1,\"Him:\"],[0,[],0,\" 12AM.\"],[1,[],0,9],[0,[8],1,\"Me:\"],[0,[],0,\" No. In 24 hour format?\"],[1,[],0,10],[0,[8],1,\"Him:\"],[0,[],0,\" 0 hours. Wait! oh... fuck!\"],[1,[],0,11],[0,[8],1,\"Me:\"],[0,[],0,\" Yes! Python \"],[0,[6],1,\"time\"],[0,[],0,\" objects use 24-hour format instead of 12-hour format. And 0 hours is still less than 23 hours, which still satisfies the loop criteria. Since time is cyclic, this condition will always be true and thus your while loop becomes an infinite loop. Moreover, you're yielding the timeslots at each iteration which explains the slow rise in RAM usage, and infinite loop explains why CPU went 100%.\"]]],[1,\"p\",[[0,[],0,\"It was the biggest \"],[0,[1],1,\"'Aha'\"],[0,[],0,\" moment on the floor. I could see a lot of them holding their heads and some still processing what I explained. Of all, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was giving her widest smile. One by one I was giving an explanation to everyone what happened and how it became an infinite loop. The poor guy put his head down on the table thinking how he couldn't catch this one case and even he gave a smile in the end.\"]]],[1,\"p\",[[0,[],0,\"The reason it was never captured on his machine or on the staging server was because no one had tested that condition! Whereas, just the night before the deployment, I had dumped the production data for categories on my local database for testing out a few things. But I never tested the website, so it wasn't caught even on my machine.\"]]],[1,\"h1\",[[0,[],0,\"Resolution\"]]],[1,\"p\",[[0,[],0,\"It was \"],[0,[1],1,\"really\"],[0,[],0,\" simple. Just compare the \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"time\"],[0,[],0,\" objects so that at 12AM, the day also increments which no longer satisfies the loop conditions and the loop breaks out. \"]]],[1,\"p\",[[0,[],0,\"The change was quickly made, tested on the same category. This time it worked without blowing the CPU usage off the roof. I still didn't understand why did he prefer comparing \"],[0,[6],1,\"time\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects. But it's fine. The patch was pushed on production and it worked correctly now for that same category. All dashboards were up and working and everybody, after enjoying their little free time, were back to their work. It was 12PM by now. I was definitely a zombie at this point. I spend another few hours figuring out other such pieces in code along with other team members and finally left for home \"],[0,[1],1,\"early\"],[0,[],0,\" at 4PM.\"]]],[10,5],[1,\"h1\",[[0,[],0,\"Important takeaways\"]]],[3,\"ul\",[[[0,[],0,\"NEVER EVER DO BIG BANG RELEASES! Release incrementally, in small chunks. It's easier to find needle among a few sticks of hay than an entire haystack.\"]],[[0,[],0,\"Logging is crucial. Learn how to log. Though I personally would not recommend, but log at every checkpoint in the code. If feel you would be inundated with logs, use log levels (\"],[0,[1],1,\"DEBUG\"],[0,[],0,\", \"],[0,[1],1,\"INFO\"],[0,[],0,\", \"],[0,[1],1,\"WARNING\"],[0,[],0,\", \"],[0,[1],1,\"ERROR\"],[0,[],0,\") and configure it with environment flags.\"]],[[0,[],0,\" No matter how rigorous QA testing you do, some things still escape the eyes of all. We can't help it. But at least ensure that all the cases already defined by the business teams are fully covered in the tests.\"]],[[0,[],0,\"Software engineers are humans. They can't be right all the time. Neither can someone think of all possible edge cases that may arise in the code, let alone something that would be defined by the end user. Empathize them and understand that such issues are not because they are incompetent but rather something which was inevitable. Rather I would think of that incident this way - of the 10K+ lines of code that went on production, only one line was the culprit.\"]],[[0,[],0,\"To this day, I really appreciate \"],[0,[1],1,\"Gauri\"],[0,[],0,\"'s stand. She's very strict in maintaining code quality and business logic implementation, and scolded us a lot for our mistakes. But in that moment, she was the only one who was fighting for us against the whole company and gave us as much time as she could afford. Not only her, even our CEO was very relaxed and despite knowing that every minute that we spent debugging this issue costed him money, he still supported us and didn't freak out either. Things would have gone horribly wrong if it wasn't for them. As a manager, stressing out your teams in such situations just makes everything worse. The team needs someone who would shield them from everyone else while they just focus on fixing the issue.\"]]]]]}","created_at_ts":1544300708935,"created_at":"2018-12-08 20:25:08"},{"id":"5c0c2914ec0bfe1f862bf25f","post_id":"5c0c1e7aabc169173fada4cb","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{}],[\"hr\",{}],[\"html\",{\"html\":\"<p>\\n    <pre>\\n    \\t<code class=\\\"language-python linenumbers\\\">\\nfrom datetime import datetime, time, date\\n\\nfrom dateutil.relativedelta import relativedelta\\n\\ndef get_next_slot(work_timings, duration):\\n    start_hour, end_hour = map(int, work_timings.split('-'))\\n    start_datetime = datetime.combine(date.today(), time(hour=start_hour))\\n    end_datetime = datetime.combine(date.today(), time(hour=end_hour))\\n    slot = relativedelta(minutes=duration)\\n\\n    while start_datetime.time() <= end_datetime.time():\\n        end_slot = start_datetime + relativedelta(minutes=duration)\\n\\n        yield start_datetime.time(), end_slot.time()\\n        start_datetime = end_slot\\n        </code>\\n    </pre>\\n    <small><strong>NOTE:</strong> The above snippet is not the exact piece of code that was causing the issue. This is a workable example written from the memory I had of that incident.</small>\\n</p>\"}],[\"code\",{\"code\":\"(datetime.time(9, 0), datetime.time(9, 30))\\n(datetime.time(9, 30), datetime.time(10, 0))\\n(datetime.time(10, 0), datetime.time(10, 30))\\n(datetime.time(10, 30), datetime.time(11, 0))\\n(datetime.time(11, 0), datetime.time(11, 30))\\n(datetime.time(11, 30), datetime.time(12, 0))\\n(datetime.time(12, 0), datetime.time(12, 30))\\n(datetime.time(12, 30), datetime.time(13, 0))\\n(datetime.time(13, 0), datetime.time(13, 30))\\n(datetime.time(13, 30), datetime.time(14, 0))\\n(datetime.time(14, 0), datetime.time(14, 30))\\n(datetime.time(14, 30), datetime.time(15, 0))\\n(datetime.time(15, 0), datetime.time(15, 30))\\n(datetime.time(15, 30), datetime.time(16, 0))\\n(datetime.time(16, 0), datetime.time(16, 30))\\n(datetime.time(16, 30), datetime.time(17, 0))\\n(datetime.time(17, 0), datetime.time(17, 30))\\n(datetime.time(17, 30), datetime.time(18, 0))\\n(datetime.time(18, 0), datetime.time(18, 30))\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.linkedin.com/company/localoye/\"]],[\"em\"],[\"a\",[\"href\",\"https://www.djangoproject.com/\"]],[\"a\",[\"href\",\"https://www.mysql.com/\"]],[\"a\",[\"href\",\"https://danielkummer.github.io/git-flow-cheatsheet/\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man1/top.1.html\"]],[\"code\"],[\"a\",[\"href\",\"https://fabric.io/kits/android/crashlytics\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"This is a debugging story at my first job at \"],[0,[0],1,\"LocalOye\"],[0,[],0,\", where we encountered a bug which I still consider to be one of the best I've ever encountered.\"]]],[10,0],[1,\"h1\",[[0,[],0,\"Background\"]]],[1,\"p\",[[0,[],0,\"LocalOye was a mass-market services aggregator startup (now shutdown). We connected the service providers (plumbers, electricians, carpenters, yoga trainers, etc.) to the consumers through our app. \"]]],[1,\"p\",[[0,[],0,\"Like all tech startups in their early booming days, ours too was on a feature spree. We had around half a dozen of major features rolling out in a single release. We used to call these as \"],[0,[1],1,\"big bang releases\"],[0,[],0,\". Our tech stack was \"],[0,[2],1,\"Django\"],[0,[],0,\" with \"],[0,[3],1,\"MySQL\"],[0,[],0,\" and the entire system was split into a bunch of microservices.\"]]],[1,\"p\",[[0,[],0,\"We were rolling out a bunch of features, but for sake brevity, let's just focus on the one that caused the issue. When booking for an appointment for a service, the customer has to answer a bunch of questions including the type of service, location, cost range, timing, etc. We introduced something called as variable time slots where providers can define their own time slots for the whole day, assign the time range they will be working in and the size of a time slot per customer.\"]]],[1,\"p\",[[0,[],0,\"There were around 19 \"],[0,[4],1,\"feature branches\"],[0,[],0,\" written by our team of 6 backend engineers, which were supposed to be merged and pushed on production and I was given this messy work. After fighting the nightmarish merge conflicts, last minute fixes, syntax errors (on staging!), cyclic dependencies and migration conflicts, I somehow managed to get it all in one branch. It was also my longest day at work (37 hours, though I'm no longer proud of this achievement). Yet we were on an ass-on-fire situation because the deployment was still not done.\"]]],[1,\"p\",[[0,[],0,\"Finally, the next day we got a green flag from QA and we're ready to deploy. Like all our major releases, this was gonna go on production at night. We still didn't have CI/CD in place, so all deployments were manual (login to the instance, pull the code, restart server). We decided the deployment to be done at around 4 AM since the load was minimal and if anything goes haywire, we had minimal loss. We had stayed back in the office including the backend team, frontend team, our backend lead (\"],[0,[1],1,\"Gauri\"],[0,[],0,\") and head of technology (\"],[0,[1],1,\"Vivek\"],[0,[],0,\"). \"]]],[1,\"p\",[[0,[],0,\"The deployment happened at around 6 AM and we did a basic test whether everything was working fine. It seemed the deployment was a success. We felt relieved! Everyone was almost half asleep at this point and were really happy that they finally got this release done and now they can cozily lay back on their beds and enjoy their well deserved sleep. I was particularly a zombie at this point since I just had a 7 hour sleep after that humongous 37 hour stint and I was up again for 16 hours now. Soon everyone packed their bags and left one by one. Me and Gauri stayed back. While she wrote the \"],[0,[1],1,\"\\\"Deployment successful\\\"\"],[0,[],0,\" email, marking our product managers, business teams and CEO, I was busy closing my code editors, terminals, ticking off points on the deployment checklist and, finally, shutting down my laptop.\"]]],[10,1],[1,\"h1\",[[0,[],0,\"One by one, things fell apart\"]]],[1,\"p\",[[0,[],0,\"Everything was nice and happy and we decided to step down for a quick breakfast. While coming back, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" got a nice good morning call from \"],[0,[1],1,\"Vivek\"],[0,[],0,\" informing that he was getting API timeout errors on web. All AJAX calls to the server waited for 30 seconds (default for HTTP requests) and would return with a timeout error. We quickly headed back to the office, turned on our laptops and started monitoring our servers using the all time reliable Linux's \"],[0,[5],1,\"top\"],[0,[],0,\"! One of the servers that hosted our microserivce, which is responsible for reading data from server and contained most of the business logic, shot to 100% CPU. We waited for sometime, but it still didn't seem to settle. Since it affected all other microservices, we spent minimal time investigating and \"],[0,[1],1,\"Gauri\"],[0,[],0,\" just \"],[0,[6],1,\"kill -9\"],[0,[],0,\"'d  the service processes and spawned them again. We again monitored for 15-20 minutes. Nothing went wrong now. All seemed fine.\"]]],[1,\"p\",[[0,[],0,\"We thought that was some random one-off error. Might be some edge case. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called back \"],[0,[1],1,\"Vivek\"],[0,[],0,\" and notified him that the server was all fine and he should test again. After a quick test, \"],[0,[1],1,\"Vivek\"],[0,[],0,\" gave a confirmation that it was all okay now. We were relieved but super confused. In the end, we said \"],[0,[1],1,\"\\\"chuck it\\\"\"],[0,[],0,\" and moved on. By this time, our operations team and customer support team started coming to office one by one, astonished to see both of us still in office. It was 8 AM now.\"]]],[1,\"p\",[[0,[],0,\"Just when I closed my terminal, one of the guys from the operations came to our desk and informed that all the dashboards are empty. Nothing was showing up, these guys couldn't even open up a single service request on the dashboard. I went with him to investigate (using our beloved Chome Developer Tools) and found the same error \"],[0,[1],1,\"Vivek\"],[0,[],0,\" was getting earlier. APIs were timing out. I quickly ran to \"],[0,[1],1,\"Gauri\"],[0,[],0,\" and asked her to monitor the servers and bam! The CPU was again on 100%. Now I almost started freaking out. As a software engineer, I feel disgraced when something I build doesn't work and the end user is affected. I started thinking of all possible places where I could have gone wrong - \"],[0,[1],1,\"\\\"Perhaps the merge didn't end well. What if there's a cyclic dependency which is causing the Python interpreter to freak out? Maybe I removed some essential piece of code in merge conflicts which is causing this issue? Did internet just go off on Digital Ocean servers?\\\"\"],[0,[],0,\". And there stood \"],[0,[1],1,\"Gauri\"],[0,[],0,\", as calm as the sea, steadfast, neatly monitoring any patterns in this behavior and without even the slightest bit of stress on her face, and comforting me that there's nothing to panic and I should stay calm. She found that, not only the CPU went 100%, even the RAM usage slowly went from 15% to 78%! She again killed the processes and started again and everything went back to normal.\"]]],[1,\"p\",[[0,[],0,\"I was puzzled beyond imagination. My first thought was to review the all the code that went on production. Yes, all of it! All code in those 19 feature branches, which would amount to around 10K lines. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me to add logs everywhere - start and end of function body, API endpoints, RPC calls, etc. I quickly managed to do it, at least in the new code that was deployed. But we were running out of time. It was 9AM and people from other teams were arriving one by one only to find an occasional service disruption. At this point, we didn't even bother checking the \"],[0,[7],1,\"Crashlytics\"],[0,[],0,\" dashboard because even the app was getting the same timeout errors. Our main website opened with an empty header since that's where we displayed the service categories we provided, since the API for that too was getting timed out. The frequency of this disruption exacerbated as the day progressed and more and more users started using the app. \"]]],[1,\"p\",[[0,[],0,\"The thing is, no one had any idea what caused it. Being amateur developers, we made one of the most common beginner mistakes - insufficient logging. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called up everyone in the team to come to office as soon as they can and it as a \"],[0,[1],1,\"P0\"],[0,[],0,\" situation. Most of them were in their deep sleep at this point and the few who answered also started panicking like crazy. While everyone was on their way, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me the last thing I wanted to hear - \"],[0,[1],1,\"\\\"Let's rollback the release.\\\"\"],[0,[],0,\". This was even more disgraceful. Something that you built was so bad that it had to be taken down. The release was already delayed by three days and I didn't want to get it delayed any further. I resisted and asked for a bit more time. Seeing that I hadn't given on this hopeless situation, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" also decided to give me another hour and if nothing happens, she would rollback the release at 11AM.\"]]],[1,\"h1\",[[0,[],0,\"Finally, a ray of hope\"]]],[1,\"p\",[[0,[],0,\"After mindlessly testing and hopelessly trying to reproduce the issue on my local environment, I decided to test all the frontend apps on my machine. The first one that I had already setup on my laptop was the main website. I started randomly opening all the pages, tried creating a service request. Just when I tried creating a service request for some random category, the network request stalled and, for the first time in life, I was happy to see an error in browser console - \"],[0,[8],1,\"504 Gateway Timeout\"],[0,[],0,\". I screamed out \"],[0,[1],1,\"\\\"Gauri! I could reproduce the issue on my machine!\\\"\"],[0,[],0,\". I killed the server process, spawned it again, created the same request and the server timed out again. My happiness had no bounds at that time! By this time the other guys in our team also came in one by one and started maniacally glaring into their laptops, browsing through the code they wrote, nervously thinking whether their code was the culprit. Meanwhile, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was on her newly acquired routine on the production server - monitor, kill, spawn again, repeat.\"]]],[1,\"p\",[[0,[],0,\"But, then came a sudden twist. My fellow teammate tried created a service request on his machine and it worked. Some guy created one on staging and it worked. Hell, someone created one on production too and it worked! In a second, all my happiness got flushed out and I was back to stage one. To my utter disgusting surprise, even I couldn't reproduce it on my machine now. I almost surrendered and gave in for the idea of rolling back the release, but then I checked why it went 100% CPU for that specific case. I furiously kept hitting the back button on the browser until I reached that page where I was able to reproduce the issue. And voila! It went 100% again.\"]]],[1,\"p\",[[0,[],0,\"It was for the plumber category that the issue got reproduced. I tried to replicate it on staging, couldn't reproduce. I tried it on my teammate's machine, couldn't replicate it. Tried on production, went 100% again. I wanted to double check whether this was because of my request and not someone else's, I reproduced it 10 times in a row. And yes, it was reproduced exactly when I opened the plumber category page. I knew it was not an environment specific issue for sure. Meanwhile I had isolated the code block where this was happening and that's where I got the breakthrough.\"]]],[1,\"h1\",[[0,[],0,\"Digging into the code\"]]],[1,\"p\",[[0,[],0,\"While our investigation was still going on, it was well past 11AM now. I could glance at the other side where the operations team was seated to find them browsing Facebook, playing games, some busy doing work not related to the dashboard, some falling back to trusted old Excel sheets. Overall, it was a very depressing scene wherein the operations team and customer support teams weren't able to do their work because of some fuck up on our end. I felt really ashamed of myself as I was still not able to debug the issue.\"]]],[1,\"p\",[[0,[],0,\"While reading the relevant code, the problematic part was a function which looked  like this,\"]]],[10,2],[1,\"p\",[[0,[],0,\"A \"],[0,[6],1,\"while\"],[0,[],0,\" loop with an unclear loop invariant. What could possibly go wrong! But actually, nothing in this code was incorrect. The conditions were correct it would give right output for a lot of cases which I had generated in my mind. Let's say, for work timings \"],[0,[6],1,\"9-18\"],[0,[],0,\" (9AM in the morning till 6PM in the evening) and duration of \"],[0,[6],1,\"30\"],[0,[],0,\" minutes per slot, the above function would generate the following output,\"]]],[10,3],[1,\"p\",[[0,[],0,\"Then I looked up why it was failing for the plumber category. I checked the database and got the entry timeslot definitions. The work timings were \"],[0,[6],1,\"9-23\"],[0,[],0,\" (9AM in the morning till 11PM at night) and duration was \"],[0,[6],1,\"60\"],[0,[],0,\" minutes. I mentally evaluated the code and I still couldn't get what was happening  here. Meanwhile, the guy who had written this code was pulling his hair out trying to understand what's happening here while staring at my screen. Then it clicked! It was the biggest WTF moment of my life. I figured out why it failed and I started laughing hysterically. Everyone was astonished at first, giving me an eager look, waiting for me to stop laughing so that they get to know what the hell this issue really was. The guy who wrote the code started shaking me fiercely, \"],[0,[1],1,\"\\\"Tejas, what the hell happened? Tell me! What was the issue? Please tell me ASAP. Stop laughing, you moron!\\\"\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"I somehow caught my breath and regained by senses, and saw the entire section of the office was staring at me - our team, HR, product managers, a few guys from the operations team, marketing guys, and even our CEO - all of them waiting for that one answer. I quickly stabilized myself, looked at that helpless guy and started asking him simple date and time arithmetic,\"]]],[1,\"blockquote\",[[0,[8],1,\"Me:\"],[0,[],0,\" How much is 9 AM + 1 hour?\"],[1,[],0,0],[0,[8],1,\"Him:\"],[0,[],0,\" Stop this stupid thing. Tell me what happened!\"],[1,[],0,1],[0,[8],1,\"Me:\"],[0,[],0,\" You will figure out yourself. Just give me the answer.\"],[1,[],0,2],[0,[8],1,\"Him:\"],[0,[],0,\" 10AM\"],[1,[],0,3],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,4],[0,[8],1,\"Him:\"],[0,[],0,\" 11 AM.\"],[1,[],0,5],[0,[8],1,\"Me:\"],[0,[],0,\" Okay. What's 10PM  + 1 hour?\"],[1,[],0,6],[0,[8],1,\"Him:\"],[0,[],0,\" 11PM\"],[1,[],0,7],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,8],[0,[8],1,\"Him:\"],[0,[],0,\" 12AM.\"],[1,[],0,9],[0,[8],1,\"Me:\"],[0,[],0,\" No. In 24 hour format?\"],[1,[],0,10],[0,[8],1,\"Him:\"],[0,[],0,\" 0 hours. Wait! oh... fuck!\"],[1,[],0,11],[0,[8],1,\"Me:\"],[0,[],0,\" Yes! Python \"],[0,[6],1,\"time\"],[0,[],0,\" objects use 24-hour format instead of 12-hour format. And 0 hours is still less than 23 hours, which still satisfies the loop criteria. Since time is cyclic, this condition will always be true and thus your while loop becomes an infinite loop. Moreover, you're yielding the timeslots at each iteration which explains the slow rise in RAM usage, and infinite loop explains why CPU went 100%.\"]]],[1,\"p\",[[0,[],0,\"It was the biggest \"],[0,[1],1,\"'Aha'\"],[0,[],0,\" moment on the floor. I could see a lot of them holding their heads and some still processing what I explained. Of all, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was giving her widest smile. One by one I was giving an explanation to everyone what happened and how it became an infinite loop. The poor guy put his head down on the table thinking how he couldn't catch this one case and even he gave a smile in the end.\"]]],[1,\"p\",[[0,[],0,\"The reason it was never captured on his machine or on the staging server was because no one had tested that condition! Whereas, just the night before the deployment, I had dumped the production data for categories on my local database for testing out a few things. But I never tested the website, so it wasn't caught even on my machine.\"]]],[1,\"h1\",[[0,[],0,\"Resolution\"]]],[1,\"p\",[[0,[],0,\"It was \"],[0,[1],1,\"really\"],[0,[],0,\" simple. Just compare the \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"time\"],[0,[],0,\" objects so that at 12AM, the day also increments which no longer satisfies the loop conditions and the loop breaks out. \"]]],[1,\"p\",[[0,[],0,\"The change was quickly made, tested on the same category. This time it worked without blowing the CPU usage off the roof. I still didn't understand why did he prefer comparing \"],[0,[6],1,\"time\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects. But it's fine. The patch was pushed on production and it worked correctly now for that same category. All dashboards were up and working and everybody, after enjoying their little free time, were back to their work. It was 12PM by now. I was definitely a zombie at this point. I spend another few hours figuring out other such pieces in code along with other team members and finally left for home \"],[0,[1],1,\"early\"],[0,[],0,\" at 4PM.\"]]],[10,4],[1,\"h1\",[[0,[],0,\"Important takeaways\"]]],[3,\"ul\",[[[0,[],0,\"NEVER EVER DO BIG BANG RELEASES! Release incrementally, in small chunks. It's easier to find needle among a few sticks of hay than an entire haystack.\"]],[[0,[],0,\"Logging is crucial. Learn how to log. Though I personally would not recommend, but log at every checkpoint in the code. If feel you would be inundated with logs, use log levels (\"],[0,[1],1,\"DEBUG\"],[0,[],0,\", \"],[0,[1],1,\"INFO\"],[0,[],0,\", \"],[0,[1],1,\"WARNING\"],[0,[],0,\", \"],[0,[1],1,\"ERROR\"],[0,[],0,\") and configure it with environment flags.\"]],[[0,[],0,\" No matter how rigorous QA testing you do, some things still escape the eyes of all. We can't help it. But at least ensure that all the cases already defined by the business teams are fully covered in the tests.\"]],[[0,[],0,\"Software engineers are humans. They can't be right all the time. Neither can someone think of all possible edge cases that may arise in the code, let alone something that would be defined by the end user. Empathize them and understand that such issues are not because they are incompetent but rather something which was inevitable. Rather I would think of that incident this way - of the 10K+ lines of code that went on production, only one line was the culprit.\"]],[[0,[],0,\"To this day, I really appreciate \"],[0,[1],1,\"Gauri\"],[0,[],0,\"'s stand. She's very strict in maintaining code quality and business logic implementation, and scolded us a lot for our mistakes. But in that moment, she was the only one who was fighting for us against the whole company and gave us as much time as she could afford. Not only her, even our CEO was very relaxed and despite knowing that every minute that we spent debugging this issue costed him money, he still supported us and didn't freak out either. Things would have gone horribly wrong if it wasn't for them. As a manager, stressing out your teams in such situations just makes everything worse. The team needs someone who would shield them from everyone else while they just focus on fixing the issue.\"]]]]]}","created_at_ts":1544300820811,"created_at":"2018-12-08 20:27:00"},{"id":"5c0c294cec0bfe1f862bf260","post_id":"5c0c1e7aabc169173fada4cb","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{}],[\"hr\",{}],[\"html\",{\"html\":\"<p>\\n    <pre><code class=\\\"language-python linenumbers\\\">from datetime import datetime, time, date\\n\\nfrom dateutil.relativedelta import relativedelta\\n\\ndef get_next_slot(work_timings, duration):\\n    start_hour, end_hour = map(int, work_timings.split('-'))\\n    start_datetime = datetime.combine(date.today(), time(hour=start_hour))\\n    end_datetime = datetime.combine(date.today(), time(hour=end_hour))\\n    slot = relativedelta(minutes=duration)\\n\\n    while start_datetime.time() <= end_datetime.time():\\n        end_slot = start_datetime + relativedelta(minutes=duration)\\n\\n        yield start_datetime.time(), end_slot.time()\\n        start_datetime = end_slot</code></pre>\\n    <small><strong>NOTE:</strong> The above snippet is not the exact piece of code that was causing the issue. This is a workable example written from the memory I had of that incident.</small>\\n</p>\"}],[\"code\",{\"code\":\"(datetime.time(9, 0), datetime.time(9, 30))\\n(datetime.time(9, 30), datetime.time(10, 0))\\n(datetime.time(10, 0), datetime.time(10, 30))\\n(datetime.time(10, 30), datetime.time(11, 0))\\n(datetime.time(11, 0), datetime.time(11, 30))\\n(datetime.time(11, 30), datetime.time(12, 0))\\n(datetime.time(12, 0), datetime.time(12, 30))\\n(datetime.time(12, 30), datetime.time(13, 0))\\n(datetime.time(13, 0), datetime.time(13, 30))\\n(datetime.time(13, 30), datetime.time(14, 0))\\n(datetime.time(14, 0), datetime.time(14, 30))\\n(datetime.time(14, 30), datetime.time(15, 0))\\n(datetime.time(15, 0), datetime.time(15, 30))\\n(datetime.time(15, 30), datetime.time(16, 0))\\n(datetime.time(16, 0), datetime.time(16, 30))\\n(datetime.time(16, 30), datetime.time(17, 0))\\n(datetime.time(17, 0), datetime.time(17, 30))\\n(datetime.time(17, 30), datetime.time(18, 0))\\n(datetime.time(18, 0), datetime.time(18, 30))\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.linkedin.com/company/localoye/\"]],[\"em\"],[\"a\",[\"href\",\"https://www.djangoproject.com/\"]],[\"a\",[\"href\",\"https://www.mysql.com/\"]],[\"a\",[\"href\",\"https://danielkummer.github.io/git-flow-cheatsheet/\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man1/top.1.html\"]],[\"code\"],[\"a\",[\"href\",\"https://fabric.io/kits/android/crashlytics\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"This is a debugging story at my first job at \"],[0,[0],1,\"LocalOye\"],[0,[],0,\", where we encountered a bug which I still consider to be one of the best I've ever encountered.\"]]],[10,0],[1,\"h1\",[[0,[],0,\"Background\"]]],[1,\"p\",[[0,[],0,\"LocalOye was a mass-market services aggregator startup (now shutdown). We connected the service providers (plumbers, electricians, carpenters, yoga trainers, etc.) to the consumers through our app. \"]]],[1,\"p\",[[0,[],0,\"Like all tech startups in their early booming days, ours too was on a feature spree. We had around half a dozen of major features rolling out in a single release. We used to call these as \"],[0,[1],1,\"big bang releases\"],[0,[],0,\". Our tech stack was \"],[0,[2],1,\"Django\"],[0,[],0,\" with \"],[0,[3],1,\"MySQL\"],[0,[],0,\" and the entire system was split into a bunch of microservices.\"]]],[1,\"p\",[[0,[],0,\"We were rolling out a bunch of features, but for sake brevity, let's just focus on the one that caused the issue. When booking for an appointment for a service, the customer has to answer a bunch of questions including the type of service, location, cost range, timing, etc. We introduced something called as variable time slots where providers can define their own time slots for the whole day, assign the time range they will be working in and the size of a time slot per customer.\"]]],[1,\"p\",[[0,[],0,\"There were around 19 \"],[0,[4],1,\"feature branches\"],[0,[],0,\" written by our team of 6 backend engineers, which were supposed to be merged and pushed on production and I was given this messy work. After fighting the nightmarish merge conflicts, last minute fixes, syntax errors (on staging!), cyclic dependencies and migration conflicts, I somehow managed to get it all in one branch. It was also my longest day at work (37 hours, though I'm no longer proud of this achievement). Yet we were on an ass-on-fire situation because the deployment was still not done.\"]]],[1,\"p\",[[0,[],0,\"Finally, the next day we got a green flag from QA and we're ready to deploy. Like all our major releases, this was gonna go on production at night. We still didn't have CI/CD in place, so all deployments were manual (login to the instance, pull the code, restart server). We decided the deployment to be done at around 4 AM since the load was minimal and if anything goes haywire, we had minimal loss. We had stayed back in the office including the backend team, frontend team, our backend lead (\"],[0,[1],1,\"Gauri\"],[0,[],0,\") and head of technology (\"],[0,[1],1,\"Vivek\"],[0,[],0,\"). \"]]],[1,\"p\",[[0,[],0,\"The deployment happened at around 6 AM and we did a basic test whether everything was working fine. It seemed the deployment was a success. We felt relieved! Everyone was almost half asleep at this point and were really happy that they finally got this release done and now they can cozily lay back on their beds and enjoy their well deserved sleep. I was particularly a zombie at this point since I just had a 7 hour sleep after that humongous 37 hour stint and I was up again for 16 hours now. Soon everyone packed their bags and left one by one. Me and Gauri stayed back. While she wrote the \"],[0,[1],1,\"\\\"Deployment successful\\\"\"],[0,[],0,\" email, marking our product managers, business teams and CEO, I was busy closing my code editors, terminals, ticking off points on the deployment checklist and, finally, shutting down my laptop.\"]]],[10,1],[1,\"h1\",[[0,[],0,\"One by one, things fell apart\"]]],[1,\"p\",[[0,[],0,\"Everything was nice and happy and we decided to step down for a quick breakfast. While coming back, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" got a nice good morning call from \"],[0,[1],1,\"Vivek\"],[0,[],0,\" informing that he was getting API timeout errors on web. All AJAX calls to the server waited for 30 seconds (default for HTTP requests) and would return with a timeout error. We quickly headed back to the office, turned on our laptops and started monitoring our servers using the all time reliable Linux's \"],[0,[5],1,\"top\"],[0,[],0,\"! One of the servers that hosted our microserivce, which is responsible for reading data from server and contained most of the business logic, shot to 100% CPU. We waited for sometime, but it still didn't seem to settle. Since it affected all other microservices, we spent minimal time investigating and \"],[0,[1],1,\"Gauri\"],[0,[],0,\" just \"],[0,[6],1,\"kill -9\"],[0,[],0,\"'d  the service processes and spawned them again. We again monitored for 15-20 minutes. Nothing went wrong now. All seemed fine.\"]]],[1,\"p\",[[0,[],0,\"We thought that was some random one-off error. Might be some edge case. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called back \"],[0,[1],1,\"Vivek\"],[0,[],0,\" and notified him that the server was all fine and he should test again. After a quick test, \"],[0,[1],1,\"Vivek\"],[0,[],0,\" gave a confirmation that it was all okay now. We were relieved but super confused. In the end, we said \"],[0,[1],1,\"\\\"chuck it\\\"\"],[0,[],0,\" and moved on. By this time, our operations team and customer support team started coming to office one by one, astonished to see both of us still in office. It was 8 AM now.\"]]],[1,\"p\",[[0,[],0,\"Just when I closed my terminal, one of the guys from the operations came to our desk and informed that all the dashboards are empty. Nothing was showing up, these guys couldn't even open up a single service request on the dashboard. I went with him to investigate (using our beloved Chome Developer Tools) and found the same error \"],[0,[1],1,\"Vivek\"],[0,[],0,\" was getting earlier. APIs were timing out. I quickly ran to \"],[0,[1],1,\"Gauri\"],[0,[],0,\" and asked her to monitor the servers and bam! The CPU was again on 100%. Now I almost started freaking out. As a software engineer, I feel disgraced when something I build doesn't work and the end user is affected. I started thinking of all possible places where I could have gone wrong - \"],[0,[1],1,\"\\\"Perhaps the merge didn't end well. What if there's a cyclic dependency which is causing the Python interpreter to freak out? Maybe I removed some essential piece of code in merge conflicts which is causing this issue? Did internet just go off on Digital Ocean servers?\\\"\"],[0,[],0,\". And there stood \"],[0,[1],1,\"Gauri\"],[0,[],0,\", as calm as the sea, steadfast, neatly monitoring any patterns in this behavior and without even the slightest bit of stress on her face, and comforting me that there's nothing to panic and I should stay calm. She found that, not only the CPU went 100%, even the RAM usage slowly went from 15% to 78%! She again killed the processes and started again and everything went back to normal.\"]]],[1,\"p\",[[0,[],0,\"I was puzzled beyond imagination. My first thought was to review the all the code that went on production. Yes, all of it! All code in those 19 feature branches, which would amount to around 10K lines. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me to add logs everywhere - start and end of function body, API endpoints, RPC calls, etc. I quickly managed to do it, at least in the new code that was deployed. But we were running out of time. It was 9AM and people from other teams were arriving one by one only to find an occasional service disruption. At this point, we didn't even bother checking the \"],[0,[7],1,\"Crashlytics\"],[0,[],0,\" dashboard because even the app was getting the same timeout errors. Our main website opened with an empty header since that's where we displayed the service categories we provided, since the API for that too was getting timed out. The frequency of this disruption exacerbated as the day progressed and more and more users started using the app. \"]]],[1,\"p\",[[0,[],0,\"The thing is, no one had any idea what caused it. Being amateur developers, we made one of the most common beginner mistakes - insufficient logging. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called up everyone in the team to come to office as soon as they can and it as a \"],[0,[1],1,\"P0\"],[0,[],0,\" situation. Most of them were in their deep sleep at this point and the few who answered also started panicking like crazy. While everyone was on their way, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me the last thing I wanted to hear - \"],[0,[1],1,\"\\\"Let's rollback the release.\\\"\"],[0,[],0,\". This was even more disgraceful. Something that you built was so bad that it had to be taken down. The release was already delayed by three days and I didn't want to get it delayed any further. I resisted and asked for a bit more time. Seeing that I hadn't given on this hopeless situation, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" also decided to give me another hour and if nothing happens, she would rollback the release at 11AM.\"]]],[1,\"h1\",[[0,[],0,\"Finally, a ray of hope\"]]],[1,\"p\",[[0,[],0,\"After mindlessly testing and hopelessly trying to reproduce the issue on my local environment, I decided to test all the frontend apps on my machine. The first one that I had already setup on my laptop was the main website. I started randomly opening all the pages, tried creating a service request. Just when I tried creating a service request for some random category, the network request stalled and, for the first time in life, I was happy to see an error in browser console - \"],[0,[8],1,\"504 Gateway Timeout\"],[0,[],0,\". I screamed out \"],[0,[1],1,\"\\\"Gauri! I could reproduce the issue on my machine!\\\"\"],[0,[],0,\". I killed the server process, spawned it again, created the same request and the server timed out again. My happiness had no bounds at that time! By this time the other guys in our team also came in one by one and started maniacally glaring into their laptops, browsing through the code they wrote, nervously thinking whether their code was the culprit. Meanwhile, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was on her newly acquired routine on the production server - monitor, kill, spawn again, repeat.\"]]],[1,\"p\",[[0,[],0,\"But, then came a sudden twist. My fellow teammate tried created a service request on his machine and it worked. Some guy created one on staging and it worked. Hell, someone created one on production too and it worked! In a second, all my happiness got flushed out and I was back to stage one. To my utter disgusting surprise, even I couldn't reproduce it on my machine now. I almost surrendered and gave in for the idea of rolling back the release, but then I checked why it went 100% CPU for that specific case. I furiously kept hitting the back button on the browser until I reached that page where I was able to reproduce the issue. And voila! It went 100% again.\"]]],[1,\"p\",[[0,[],0,\"It was for the plumber category that the issue got reproduced. I tried to replicate it on staging, couldn't reproduce. I tried it on my teammate's machine, couldn't replicate it. Tried on production, went 100% again. I wanted to double check whether this was because of my request and not someone else's, I reproduced it 10 times in a row. And yes, it was reproduced exactly when I opened the plumber category page. I knew it was not an environment specific issue for sure. Meanwhile I had isolated the code block where this was happening and that's where I got the breakthrough.\"]]],[1,\"h1\",[[0,[],0,\"Digging into the code\"]]],[1,\"p\",[[0,[],0,\"While our investigation was still going on, it was well past 11AM now. I could glance at the other side where the operations team was seated to find them browsing Facebook, playing games, some busy doing work not related to the dashboard, some falling back to trusted old Excel sheets. Overall, it was a very depressing scene wherein the operations team and customer support teams weren't able to do their work because of some fuck up on our end. I felt really ashamed of myself as I was still not able to debug the issue.\"]]],[1,\"p\",[[0,[],0,\"While reading the relevant code, the problematic part was a function which looked  like this,\"]]],[10,2],[1,\"p\",[[0,[],0,\"A \"],[0,[6],1,\"while\"],[0,[],0,\" loop with an unclear loop invariant. What could possibly go wrong! But actually, nothing in this code was incorrect. The conditions were correct it would give right output for a lot of cases which I had generated in my mind. Let's say, for work timings \"],[0,[6],1,\"9-18\"],[0,[],0,\" (9AM in the morning till 6PM in the evening) and duration of \"],[0,[6],1,\"30\"],[0,[],0,\" minutes per slot, the above function would generate the following output,\"]]],[10,3],[1,\"p\",[[0,[],0,\"Then I looked up why it was failing for the plumber category. I checked the database and got the entry timeslot definitions. The work timings were \"],[0,[6],1,\"9-23\"],[0,[],0,\" (9AM in the morning till 11PM at night) and duration was \"],[0,[6],1,\"60\"],[0,[],0,\" minutes. I mentally evaluated the code and I still couldn't get what was happening  here. Meanwhile, the guy who had written this code was pulling his hair out trying to understand what's happening here while staring at my screen. Then it clicked! It was the biggest WTF moment of my life. I figured out why it failed and I started laughing hysterically. Everyone was astonished at first, giving me an eager look, waiting for me to stop laughing so that they get to know what the hell this issue really was. The guy who wrote the code started shaking me fiercely, \"],[0,[1],1,\"\\\"Tejas, what the hell happened? Tell me! What was the issue? Please tell me ASAP. Stop laughing, you moron!\\\"\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"I somehow caught my breath and regained by senses, and saw the entire section of the office was staring at me - our team, HR, product managers, a few guys from the operations team, marketing guys, and even our CEO - all of them waiting for that one answer. I quickly stabilized myself, looked at that helpless guy and started asking him simple date and time arithmetic,\"]]],[1,\"blockquote\",[[0,[8],1,\"Me:\"],[0,[],0,\" How much is 9 AM + 1 hour?\"],[1,[],0,0],[0,[8],1,\"Him:\"],[0,[],0,\" Stop this stupid thing. Tell me what happened!\"],[1,[],0,1],[0,[8],1,\"Me:\"],[0,[],0,\" You will figure out yourself. Just give me the answer.\"],[1,[],0,2],[0,[8],1,\"Him:\"],[0,[],0,\" 10AM\"],[1,[],0,3],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,4],[0,[8],1,\"Him:\"],[0,[],0,\" 11 AM.\"],[1,[],0,5],[0,[8],1,\"Me:\"],[0,[],0,\" Okay. What's 10PM  + 1 hour?\"],[1,[],0,6],[0,[8],1,\"Him:\"],[0,[],0,\" 11PM\"],[1,[],0,7],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,8],[0,[8],1,\"Him:\"],[0,[],0,\" 12AM.\"],[1,[],0,9],[0,[8],1,\"Me:\"],[0,[],0,\" No. In 24 hour format?\"],[1,[],0,10],[0,[8],1,\"Him:\"],[0,[],0,\" 0 hours. Wait! oh... fuck!\"],[1,[],0,11],[0,[8],1,\"Me:\"],[0,[],0,\" Yes! Python \"],[0,[6],1,\"time\"],[0,[],0,\" objects use 24-hour format instead of 12-hour format. And 0 hours is still less than 23 hours, which still satisfies the loop criteria. Since time is cyclic, this condition will always be true and thus your while loop becomes an infinite loop. Moreover, you're yielding the timeslots at each iteration which explains the slow rise in RAM usage, and infinite loop explains why CPU went 100%.\"]]],[1,\"p\",[[0,[],0,\"It was the biggest \"],[0,[1],1,\"'Aha'\"],[0,[],0,\" moment on the floor. I could see a lot of them holding their heads and some still processing what I explained. Of all, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was giving her widest smile. One by one I was giving an explanation to everyone what happened and how it became an infinite loop. The poor guy put his head down on the table thinking how he couldn't catch this one case and even he gave a smile in the end.\"]]],[1,\"p\",[[0,[],0,\"The reason it was never captured on his machine or on the staging server was because no one had tested that condition! Whereas, just the night before the deployment, I had dumped the production data for categories on my local database for testing out a few things. But I never tested the website, so it wasn't caught even on my machine.\"]]],[1,\"h1\",[[0,[],0,\"Resolution\"]]],[1,\"p\",[[0,[],0,\"It was \"],[0,[1],1,\"really\"],[0,[],0,\" simple. Just compare the \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"time\"],[0,[],0,\" objects so that at 12AM, the day also increments which no longer satisfies the loop conditions and the loop breaks out. \"]]],[1,\"p\",[[0,[],0,\"The change was quickly made, tested on the same category. This time it worked without blowing the CPU usage off the roof. I still didn't understand why did he prefer comparing \"],[0,[6],1,\"time\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects. But it's fine. The patch was pushed on production and it worked correctly now for that same category. All dashboards were up and working and everybody, after enjoying their little free time, were back to their work. It was 12PM by now. I was definitely a zombie at this point. I spend another few hours figuring out other such pieces in code along with other team members and finally left for home \"],[0,[1],1,\"early\"],[0,[],0,\" at 4PM.\"]]],[10,4],[1,\"h1\",[[0,[],0,\"Important takeaways\"]]],[3,\"ul\",[[[0,[],0,\"NEVER EVER DO BIG BANG RELEASES! Release incrementally, in small chunks. It's easier to find needle among a few sticks of hay than an entire haystack.\"]],[[0,[],0,\"Logging is crucial. Learn how to log. Though I personally would not recommend, but log at every checkpoint in the code. If feel you would be inundated with logs, use log levels (\"],[0,[1],1,\"DEBUG\"],[0,[],0,\", \"],[0,[1],1,\"INFO\"],[0,[],0,\", \"],[0,[1],1,\"WARNING\"],[0,[],0,\", \"],[0,[1],1,\"ERROR\"],[0,[],0,\") and configure it with environment flags.\"]],[[0,[],0,\" No matter how rigorous QA testing you do, some things still escape the eyes of all. We can't help it. But at least ensure that all the cases already defined by the business teams are fully covered in the tests.\"]],[[0,[],0,\"Software engineers are humans. They can't be right all the time. Neither can someone think of all possible edge cases that may arise in the code, let alone something that would be defined by the end user. Empathize them and understand that such issues are not because they are incompetent but rather something which was inevitable. Rather I would think of that incident this way - of the 10K+ lines of code that went on production, only one line was the culprit.\"]],[[0,[],0,\"To this day, I really appreciate \"],[0,[1],1,\"Gauri\"],[0,[],0,\"'s stand. She's very strict in maintaining code quality and business logic implementation, and scolded us a lot for our mistakes. But in that moment, she was the only one who was fighting for us against the whole company and gave us as much time as she could afford. Not only her, even our CEO was very relaxed and despite knowing that every minute that we spent debugging this issue costed him money, he still supported us and didn't freak out either. Things would have gone horribly wrong if it wasn't for them. As a manager, stressing out your teams in such situations just makes everything worse. The team needs someone who would shield them from everyone else while they just focus on fixing the issue.\"]]]]]}","created_at_ts":1544300876870,"created_at":"2018-12-08 20:27:56"},{"id":"5c0c3120ba6ad3207860f457","post_id":"5c0c1e7aabc169173fada4cb","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{}],[\"hr\",{}],[\"html\",{\"html\":\"<pre><code class=\\\"language-python linenumbers\\\">from datetime import datetime, time, date\\n\\nfrom dateutil.relativedelta import relativedelta\\n\\ndef get_next_slot(work_timings, duration):\\n    start_hour, end_hour = map(int, work_timings.split('-'))\\n    start_datetime = datetime.combine(date.today(), time(hour=start_hour))\\n    end_datetime = datetime.combine(date.today(), time(hour=end_hour))\\n    slot = relativedelta(minutes=duration)\\n\\n    while start_datetime.time() <= end_datetime.time():\\n        end_slot = start_datetime + relativedelta(minutes=duration)\\n\\n        yield start_datetime.time(), end_slot.time()\\n        start_datetime = end_slot</code></pre>\\n<p>\\n    <small><strong>NOTE:</strong> The above snippet is not the exact piece of code that was causing the issue. This is a workable example written from the memory I had of that incident.</small>\\n</p>\"}],[\"code\",{\"code\":\"(datetime.time(9, 0), datetime.time(9, 30))\\n(datetime.time(9, 30), datetime.time(10, 0))\\n(datetime.time(10, 0), datetime.time(10, 30))\\n(datetime.time(10, 30), datetime.time(11, 0))\\n(datetime.time(11, 0), datetime.time(11, 30))\\n(datetime.time(11, 30), datetime.time(12, 0))\\n(datetime.time(12, 0), datetime.time(12, 30))\\n(datetime.time(12, 30), datetime.time(13, 0))\\n(datetime.time(13, 0), datetime.time(13, 30))\\n(datetime.time(13, 30), datetime.time(14, 0))\\n(datetime.time(14, 0), datetime.time(14, 30))\\n(datetime.time(14, 30), datetime.time(15, 0))\\n(datetime.time(15, 0), datetime.time(15, 30))\\n(datetime.time(15, 30), datetime.time(16, 0))\\n(datetime.time(16, 0), datetime.time(16, 30))\\n(datetime.time(16, 30), datetime.time(17, 0))\\n(datetime.time(17, 0), datetime.time(17, 30))\\n(datetime.time(17, 30), datetime.time(18, 0))\\n(datetime.time(18, 0), datetime.time(18, 30))\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.linkedin.com/company/localoye/\"]],[\"em\"],[\"a\",[\"href\",\"https://www.djangoproject.com/\"]],[\"a\",[\"href\",\"https://www.mysql.com/\"]],[\"a\",[\"href\",\"https://danielkummer.github.io/git-flow-cheatsheet/\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man1/top.1.html\"]],[\"code\"],[\"a\",[\"href\",\"https://fabric.io/kits/android/crashlytics\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"This is a debugging story at my first job at \"],[0,[0],1,\"LocalOye\"],[0,[],0,\", where we encountered a bug which I still consider to be one of the best I've ever encountered.\"]]],[10,0],[1,\"h1\",[[0,[],0,\"Background\"]]],[1,\"p\",[[0,[],0,\"LocalOye was a mass-market services aggregator startup (now shutdown). We connected the service providers (plumbers, electricians, carpenters, yoga trainers, etc.) to the consumers through our app. \"]]],[1,\"p\",[[0,[],0,\"Like all tech startups in their early booming days, ours too was on a feature spree. We had around half a dozen of major features rolling out in a single release. We used to call these as \"],[0,[1],1,\"big bang releases\"],[0,[],0,\". Our tech stack was \"],[0,[2],1,\"Django\"],[0,[],0,\" with \"],[0,[3],1,\"MySQL\"],[0,[],0,\" and the entire system was split into a bunch of microservices.\"]]],[1,\"p\",[[0,[],0,\"We were rolling out a bunch of features, but for sake brevity, let's just focus on the one that caused the issue. When booking for an appointment for a service, the customer has to answer a bunch of questions including the type of service, location, cost range, timing, etc. We introduced something called as variable time slots where providers can define their own time slots for the whole day, assign the time range they will be working in and the size of a time slot per customer.\"]]],[1,\"p\",[[0,[],0,\"There were around 19 \"],[0,[4],1,\"feature branches\"],[0,[],0,\" written by our team of 6 backend engineers, which were supposed to be merged and pushed on production and I was given this messy work. After fighting the nightmarish merge conflicts, last minute fixes, syntax errors (on staging!), cyclic dependencies and migration conflicts, I somehow managed to get it all in one branch. It was also my longest day at work (37 hours, though I'm no longer proud of this achievement). Yet we were on an ass-on-fire situation because the deployment was still not done.\"]]],[1,\"p\",[[0,[],0,\"Finally, the next day we got a green flag from QA and we're ready to deploy. Like all our major releases, this was gonna go on production at night. We still didn't have CI/CD in place, so all deployments were manual (login to the instance, pull the code, restart server). We decided the deployment to be done at around 4 AM since the load was minimal and if anything goes haywire, we had minimal loss. We had stayed back in the office including the backend team, frontend team, our backend lead (\"],[0,[1],1,\"Gauri\"],[0,[],0,\") and head of technology (\"],[0,[1],1,\"Vivek\"],[0,[],0,\"). \"]]],[1,\"p\",[[0,[],0,\"The deployment happened at around 6 AM and we did a basic test whether everything was working fine. It seemed the deployment was a success. We felt relieved! Everyone was almost half asleep at this point and were really happy that they finally got this release done and now they can cozily lay back on their beds and enjoy their well deserved sleep. I was particularly a zombie at this point since I just had a 7 hour sleep after that humongous 37 hour stint and I was up again for 16 hours now. Soon everyone packed their bags and left one by one. Me and Gauri stayed back. While she wrote the \"],[0,[1],1,\"\\\"Deployment successful\\\"\"],[0,[],0,\" email, marking our product managers, business teams and CEO, I was busy closing my code editors, terminals, ticking off points on the deployment checklist and, finally, shutting down my laptop.\"]]],[10,1],[1,\"h1\",[[0,[],0,\"One by one, things fell apart\"]]],[1,\"p\",[[0,[],0,\"Everything was nice and happy and we decided to step down for a quick breakfast. While coming back, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" got a nice good morning call from \"],[0,[1],1,\"Vivek\"],[0,[],0,\" informing that he was getting API timeout errors on web. All AJAX calls to the server waited for 30 seconds (default for HTTP requests) and would return with a timeout error. We quickly headed back to the office, turned on our laptops and started monitoring our servers using the all time reliable Linux's \"],[0,[5],1,\"top\"],[0,[],0,\"! One of the servers that hosted our microserivce, which is responsible for reading data from server and contained most of the business logic, shot to 100% CPU. We waited for sometime, but it still didn't seem to settle. Since it affected all other microservices, we spent minimal time investigating and \"],[0,[1],1,\"Gauri\"],[0,[],0,\" just \"],[0,[6],1,\"kill -9\"],[0,[],0,\"'d  the service processes and spawned them again. We again monitored for 15-20 minutes. Nothing went wrong now. All seemed fine.\"]]],[1,\"p\",[[0,[],0,\"We thought that was some random one-off error. Might be some edge case. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called back \"],[0,[1],1,\"Vivek\"],[0,[],0,\" and notified him that the server was all fine and he should test again. After a quick test, \"],[0,[1],1,\"Vivek\"],[0,[],0,\" gave a confirmation that it was all okay now. We were relieved but super confused. In the end, we said \"],[0,[1],1,\"\\\"chuck it\\\"\"],[0,[],0,\" and moved on. By this time, our operations team and customer support team started coming to office one by one, astonished to see both of us still in office. It was 8 AM now.\"]]],[1,\"p\",[[0,[],0,\"Just when I closed my terminal, one of the guys from the operations came to our desk and informed that all the dashboards are empty. Nothing was showing up, these guys couldn't even open up a single service request on the dashboard. I went with him to investigate (using our beloved Chome Developer Tools) and found the same error \"],[0,[1],1,\"Vivek\"],[0,[],0,\" was getting earlier. APIs were timing out. I quickly ran to \"],[0,[1],1,\"Gauri\"],[0,[],0,\" and asked her to monitor the servers and bam! The CPU was again on 100%. Now I almost started freaking out. As a software engineer, I feel disgraced when something I build doesn't work and the end user is affected. I started thinking of all possible places where I could have gone wrong - \"],[0,[1],1,\"\\\"Perhaps the merge didn't end well. What if there's a cyclic dependency which is causing the Python interpreter to freak out? Maybe I removed some essential piece of code in merge conflicts which is causing this issue? Did internet just go off on Digital Ocean servers?\\\"\"],[0,[],0,\". And there stood \"],[0,[1],1,\"Gauri\"],[0,[],0,\", as calm as the sea, steadfast, neatly monitoring any patterns in this behavior and without even the slightest bit of stress on her face, and comforting me that there's nothing to panic and I should stay calm. She found that, not only the CPU went 100%, even the RAM usage slowly went from 15% to 78%! She again killed the processes and started again and everything went back to normal.\"]]],[1,\"p\",[[0,[],0,\"I was puzzled beyond imagination. My first thought was to review the all the code that went on production. Yes, all of it! All code in those 19 feature branches, which would amount to around 10K lines. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me to add logs everywhere - start and end of function body, API endpoints, RPC calls, etc. I quickly managed to do it, at least in the new code that was deployed. But we were running out of time. It was 9AM and people from other teams were arriving one by one only to find an occasional service disruption. At this point, we didn't even bother checking the \"],[0,[7],1,\"Crashlytics\"],[0,[],0,\" dashboard because even the app was getting the same timeout errors. Our main website opened with an empty header since that's where we displayed the service categories we provided, since the API for that too was getting timed out. The frequency of this disruption exacerbated as the day progressed and more and more users started using the app. \"]]],[1,\"p\",[[0,[],0,\"The thing is, no one had any idea what caused it. Being amateur developers, we made one of the most common beginner mistakes - insufficient logging. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called up everyone in the team to come to office as soon as they can and it as a \"],[0,[1],1,\"P0\"],[0,[],0,\" situation. Most of them were in their deep sleep at this point and the few who answered also started panicking like crazy. While everyone was on their way, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me the last thing I wanted to hear - \"],[0,[1],1,\"\\\"Let's rollback the release.\\\"\"],[0,[],0,\". This was even more disgraceful. Something that you built was so bad that it had to be taken down. The release was already delayed by three days and I didn't want to get it delayed any further. I resisted and asked for a bit more time. Seeing that I hadn't given on this hopeless situation, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" also decided to give me another hour and if nothing happens, she would rollback the release at 11AM.\"]]],[1,\"h1\",[[0,[],0,\"Finally, a ray of hope\"]]],[1,\"p\",[[0,[],0,\"After mindlessly testing and hopelessly trying to reproduce the issue on my local environment, I decided to test all the frontend apps on my machine. The first one that I had already setup on my laptop was the main website. I started randomly opening all the pages, tried creating a service request. Just when I tried creating a service request for some random category, the network request stalled and, for the first time in life, I was happy to see an error in browser console - \"],[0,[8],1,\"504 Gateway Timeout\"],[0,[],0,\". I screamed out \"],[0,[1],1,\"\\\"Gauri! I could reproduce the issue on my machine!\\\"\"],[0,[],0,\". I killed the server process, spawned it again, created the same request and the server timed out again. My happiness had no bounds at that time! By this time the other guys in our team also came in one by one and started maniacally glaring into their laptops, browsing through the code they wrote, nervously thinking whether their code was the culprit. Meanwhile, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was on her newly acquired routine on the production server - monitor, kill, spawn again, repeat.\"]]],[1,\"p\",[[0,[],0,\"But, then came a sudden twist. My fellow teammate tried created a service request on his machine and it worked. Some guy created one on staging and it worked. Hell, someone created one on production too and it worked! In a second, all my happiness got flushed out and I was back to stage one. To my utter disgusting surprise, even I couldn't reproduce it on my machine now. I almost surrendered and gave in for the idea of rolling back the release, but then I checked why it went 100% CPU for that specific case. I furiously kept hitting the back button on the browser until I reached that page where I was able to reproduce the issue. And voila! It went 100% again.\"]]],[1,\"p\",[[0,[],0,\"It was for the plumber category that the issue got reproduced. I tried to replicate it on staging, couldn't reproduce. I tried it on my teammate's machine, couldn't replicate it. Tried on production, went 100% again. I wanted to double check whether this was because of my request and not someone else's, I reproduced it 10 times in a row. And yes, it was reproduced exactly when I opened the plumber category page. I knew it was not an environment specific issue for sure. Meanwhile I had isolated the code block where this was happening and that's where I got the breakthrough.\"]]],[1,\"h1\",[[0,[],0,\"Digging into the code\"]]],[1,\"p\",[[0,[],0,\"While our investigation was still going on, it was well past 11AM now. I could glance at the other side where the operations team was seated to find them browsing Facebook, playing games, some busy doing work not related to the dashboard, some falling back to trusted old Excel sheets. Overall, it was a very depressing scene wherein the operations team and customer support teams weren't able to do their work because of some fuck up on our end. I felt really ashamed of myself as I was still not able to debug the issue.\"]]],[1,\"p\",[[0,[],0,\"While reading the relevant code, the problematic part was a function which looked  like this,\"]]],[10,2],[1,\"p\",[[0,[],0,\"A \"],[0,[6],1,\"while\"],[0,[],0,\" loop with an unclear loop invariant. What could possibly go wrong! But actually, nothing in this code was incorrect. The conditions were correct it would give right output for a lot of cases which I had generated in my mind. Let's say, for work timings \"],[0,[6],1,\"9-18\"],[0,[],0,\" (9AM in the morning till 6PM in the evening) and duration of \"],[0,[6],1,\"30\"],[0,[],0,\" minutes per slot, the above function would generate the following output,\"]]],[10,3],[1,\"p\",[[0,[],0,\"Then I looked up why it was failing for the plumber category. I checked the database and got the entry timeslot definitions. The work timings were \"],[0,[6],1,\"9-23\"],[0,[],0,\" (9AM in the morning till 11PM at night) and duration was \"],[0,[6],1,\"60\"],[0,[],0,\" minutes. I mentally evaluated the code and I still couldn't get what was happening  here. Meanwhile, the guy who had written this code was pulling his hair out trying to understand what's happening here while staring at my screen. Then it clicked! It was the biggest WTF moment of my life. I figured out why it failed and I started laughing hysterically. Everyone was astonished at first, giving me an eager look, waiting for me to stop laughing so that they get to know what the hell this issue really was. The guy who wrote the code started shaking me fiercely, \"],[0,[1],1,\"\\\"Tejas, what the hell happened? Tell me! What was the issue? Please tell me ASAP. Stop laughing, you moron!\\\"\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"I somehow caught my breath and regained by senses, and saw the entire section of the office was staring at me - our team, HR, product managers, a few guys from the operations team, marketing guys, and even our CEO - all of them waiting for that one answer. I quickly stabilized myself, looked at that helpless guy and started asking him simple date and time arithmetic,\"]]],[1,\"blockquote\",[[0,[8],1,\"Me:\"],[0,[],0,\" How much is 9 AM + 1 hour?\"],[1,[],0,0],[0,[8],1,\"Him:\"],[0,[],0,\" Stop this stupid thing. Tell me what happened!\"],[1,[],0,1],[0,[8],1,\"Me:\"],[0,[],0,\" You will figure out yourself. Just give me the answer.\"],[1,[],0,2],[0,[8],1,\"Him:\"],[0,[],0,\" 10AM\"],[1,[],0,3],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,4],[0,[8],1,\"Him:\"],[0,[],0,\" 11 AM.\"],[1,[],0,5],[0,[8],1,\"Me:\"],[0,[],0,\" Okay. What's 10PM  + 1 hour?\"],[1,[],0,6],[0,[8],1,\"Him:\"],[0,[],0,\" 11PM\"],[1,[],0,7],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,8],[0,[8],1,\"Him:\"],[0,[],0,\" 12AM.\"],[1,[],0,9],[0,[8],1,\"Me:\"],[0,[],0,\" No. In 24 hour format?\"],[1,[],0,10],[0,[8],1,\"Him:\"],[0,[],0,\" 0 hours. Wait! oh... fuck!\"],[1,[],0,11],[0,[8],1,\"Me:\"],[0,[],0,\" Yes! Python \"],[0,[6],1,\"time\"],[0,[],0,\" objects use 24-hour format instead of 12-hour format. And 0 hours is still less than 23 hours, which still satisfies the loop criteria. Since time is cyclic, this condition will always be true and thus your while loop becomes an infinite loop. Moreover, you're yielding the timeslots at each iteration which explains the slow rise in RAM usage, and infinite loop explains why CPU went 100%.\"]]],[1,\"p\",[[0,[],0,\"It was the biggest \"],[0,[1],1,\"'Aha'\"],[0,[],0,\" moment on the floor. I could see a lot of them holding their heads and some still processing what I explained. Of all, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was giving her widest smile. One by one I was giving an explanation to everyone what happened and how it became an infinite loop. The poor guy put his head down on the table thinking how he couldn't catch this one case and even he gave a smile in the end.\"]]],[1,\"p\",[[0,[],0,\"The reason it was never captured on his machine or on the staging server was because no one had tested that condition! Whereas, just the night before the deployment, I had dumped the production data for categories on my local database for testing out a few things. But I never tested the website, so it wasn't caught even on my machine.\"]]],[1,\"h1\",[[0,[],0,\"Resolution\"]]],[1,\"p\",[[0,[],0,\"It was \"],[0,[1],1,\"really\"],[0,[],0,\" simple. Just compare the \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"time\"],[0,[],0,\" objects so that at 12AM, the day also increments which no longer satisfies the loop conditions and the loop breaks out. \"]]],[1,\"p\",[[0,[],0,\"The change was quickly made, tested on the same category. This time it worked without blowing the CPU usage off the roof. I still didn't understand why did he prefer comparing \"],[0,[6],1,\"time\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects. But it's fine. The patch was pushed on production and it worked correctly now for that same category. All dashboards were up and working and everybody, after enjoying their little free time, were back to their work. It was 12PM by now. I was definitely a zombie at this point. I spend another few hours figuring out other such pieces in code along with other team members and finally left for home \"],[0,[1],1,\"early\"],[0,[],0,\" at 4PM.\"]]],[10,4],[1,\"h1\",[[0,[],0,\"Important takeaways\"]]],[3,\"ul\",[[[0,[],0,\"NEVER EVER DO BIG BANG RELEASES! Release incrementally, in small chunks. It's easier to find needle among a few sticks of hay than an entire haystack.\"]],[[0,[],0,\"Logging is crucial. Learn how to log. Though I personally would not recommend, but log at every checkpoint in the code. If feel you would be inundated with logs, use log levels (\"],[0,[1],1,\"DEBUG\"],[0,[],0,\", \"],[0,[1],1,\"INFO\"],[0,[],0,\", \"],[0,[1],1,\"WARNING\"],[0,[],0,\", \"],[0,[1],1,\"ERROR\"],[0,[],0,\") and configure it with environment flags.\"]],[[0,[],0,\" No matter how rigorous QA testing you do, some things still escape the eyes of all. We can't help it. But at least ensure that all the cases already defined by the business teams are fully covered in the tests.\"]],[[0,[],0,\"Software engineers are humans. They can't be right all the time. Neither can someone think of all possible edge cases that may arise in the code, let alone something that would be defined by the end user. Empathize them and understand that such issues are not because they are incompetent but rather something which was inevitable. Rather I would think of that incident this way - of the 10K+ lines of code that went on production, only one line was the culprit.\"]],[[0,[],0,\"To this day, I really appreciate \"],[0,[1],1,\"Gauri\"],[0,[],0,\"'s stand. She's very strict in maintaining code quality and business logic implementation, and scolded us a lot for our mistakes. But in that moment, she was the only one who was fighting for us against the whole company and gave us as much time as she could afford. Not only her, even our CEO was very relaxed and despite knowing that every minute that we spent debugging this issue costed him money, he still supported us and didn't freak out either. Things would have gone horribly wrong if it wasn't for them. As a manager, stressing out your teams in such situations just makes everything worse. The team needs someone who would shield them from everyone else while they just focus on fixing the issue.\"]]]]]}","created_at_ts":1544302879940,"created_at":"2018-12-08 21:01:20"},{"id":"5c0c31b8ba6ad3207860f458","post_id":"5c0c1e7aabc169173fada4cb","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{}],[\"hr\",{}],[\"html\",{\"html\":\"<pre><code class=\\\"language-python linenumbers\\\">from datetime import datetime, time, date\\n\\nfrom dateutil.relativedelta import relativedelta\\n\\ndef get_next_slot(work_timings, duration):\\n    start_hour, end_hour = map(int, work_timings.split('-'))\\n    start_datetime = datetime.combine(date.today(), time(hour=start_hour))\\n    end_datetime = datetime.combine(date.today(), time(hour=end_hour))\\n    slot = relativedelta(minutes=duration)\\n\\n    while start_datetime.time() <= end_datetime.time():\\n        end_slot = start_datetime + relativedelta(minutes=duration)\\n\\n        yield start_datetime.time(), end_slot.time()\\n        start_datetime = end_slot</code></pre>\\n<p>\\n    <small><strong>NOTE:</strong> The above snippet is not the exact piece of code that was causing the issue. This is a workable example written from the memory I had of that incident.</small>\\n</p>\"}],[\"markdown\",{\"markdown\":\"```python\\n(datetime.time(9, 0), datetime.time(9, 30))\\n(datetime.time(9, 30), datetime.time(10, 0))\\n(datetime.time(10, 0), datetime.time(10, 30))\\n(datetime.time(10, 30), datetime.time(11, 0))\\n(datetime.time(11, 0), datetime.time(11, 30))\\n(datetime.time(11, 30), datetime.time(12, 0))\\n(datetime.time(12, 0), datetime.time(12, 30))\\n(datetime.time(12, 30), datetime.time(13, 0))\\n(datetime.time(13, 0), datetime.time(13, 30))\\n(datetime.time(13, 30), datetime.time(14, 0))\\n(datetime.time(14, 0), datetime.time(14, 30))\\n(datetime.time(14, 30), datetime.time(15, 0))\\n(datetime.time(15, 0), datetime.time(15, 30))\\n(datetime.time(15, 30), datetime.time(16, 0))\\n(datetime.time(16, 0), datetime.time(16, 30))\\n(datetime.time(16, 30), datetime.time(17, 0))\\n(datetime.time(17, 0), datetime.time(17, 30))\\n(datetime.time(17, 30), datetime.time(18, 0))\\n(datetime.time(18, 0), datetime.time(18, 30))\\n```\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.linkedin.com/company/localoye/\"]],[\"em\"],[\"a\",[\"href\",\"https://www.djangoproject.com/\"]],[\"a\",[\"href\",\"https://www.mysql.com/\"]],[\"a\",[\"href\",\"https://danielkummer.github.io/git-flow-cheatsheet/\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man1/top.1.html\"]],[\"code\"],[\"a\",[\"href\",\"https://fabric.io/kits/android/crashlytics\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"This is a debugging story at my first job at \"],[0,[0],1,\"LocalOye\"],[0,[],0,\", where we encountered a bug which I still consider to be one of the best I've ever encountered.\"]]],[10,0],[1,\"h1\",[[0,[],0,\"Background\"]]],[1,\"p\",[[0,[],0,\"LocalOye was a mass-market services aggregator startup (now shutdown). We connected the service providers (plumbers, electricians, carpenters, yoga trainers, etc.) to the consumers through our app. \"]]],[1,\"p\",[[0,[],0,\"Like all tech startups in their early booming days, ours too was on a feature spree. We had around half a dozen of major features rolling out in a single release. We used to call these as \"],[0,[1],1,\"big bang releases\"],[0,[],0,\". Our tech stack was \"],[0,[2],1,\"Django\"],[0,[],0,\" with \"],[0,[3],1,\"MySQL\"],[0,[],0,\" and the entire system was split into a bunch of microservices.\"]]],[1,\"p\",[[0,[],0,\"We were rolling out a bunch of features, but for sake brevity, let's just focus on the one that caused the issue. When booking for an appointment for a service, the customer has to answer a bunch of questions including the type of service, location, cost range, timing, etc. We introduced something called as variable time slots where providers can define their own time slots for the whole day, assign the time range they will be working in and the size of a time slot per customer.\"]]],[1,\"p\",[[0,[],0,\"There were around 19 \"],[0,[4],1,\"feature branches\"],[0,[],0,\" written by our team of 6 backend engineers, which were supposed to be merged and pushed on production and I was given this messy work. After fighting the nightmarish merge conflicts, last minute fixes, syntax errors (on staging!), cyclic dependencies and migration conflicts, I somehow managed to get it all in one branch. It was also my longest day at work (37 hours, though I'm no longer proud of this achievement). Yet we were on an ass-on-fire situation because the deployment was still not done.\"]]],[1,\"p\",[[0,[],0,\"Finally, the next day we got a green flag from QA and we're ready to deploy. Like all our major releases, this was gonna go on production at night. We still didn't have CI/CD in place, so all deployments were manual (login to the instance, pull the code, restart server). We decided the deployment to be done at around 4 AM since the load was minimal and if anything goes haywire, we had minimal loss. We had stayed back in the office including the backend team, frontend team, our backend lead (\"],[0,[1],1,\"Gauri\"],[0,[],0,\") and head of technology (\"],[0,[1],1,\"Vivek\"],[0,[],0,\"). \"]]],[1,\"p\",[[0,[],0,\"The deployment happened at around 6 AM and we did a basic test whether everything was working fine. It seemed the deployment was a success. We felt relieved! Everyone was almost half asleep at this point and were really happy that they finally got this release done and now they can cozily lay back on their beds and enjoy their well deserved sleep. I was particularly a zombie at this point since I just had a 7 hour sleep after that humongous 37 hour stint and I was up again for 16 hours now. Soon everyone packed their bags and left one by one. Me and Gauri stayed back. While she wrote the \"],[0,[1],1,\"\\\"Deployment successful\\\"\"],[0,[],0,\" email, marking our product managers, business teams and CEO, I was busy closing my code editors, terminals, ticking off points on the deployment checklist and, finally, shutting down my laptop.\"]]],[10,1],[1,\"h1\",[[0,[],0,\"One by one, things fell apart\"]]],[1,\"p\",[[0,[],0,\"Everything was nice and happy and we decided to step down for a quick breakfast. While coming back, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" got a nice good morning call from \"],[0,[1],1,\"Vivek\"],[0,[],0,\" informing that he was getting API timeout errors on web. All AJAX calls to the server waited for 30 seconds (default for HTTP requests) and would return with a timeout error. We quickly headed back to the office, turned on our laptops and started monitoring our servers using the all time reliable Linux's \"],[0,[5],1,\"top\"],[0,[],0,\"! One of the servers that hosted our microserivce, which is responsible for reading data from server and contained most of the business logic, shot to 100% CPU. We waited for sometime, but it still didn't seem to settle. Since it affected all other microservices, we spent minimal time investigating and \"],[0,[1],1,\"Gauri\"],[0,[],0,\" just \"],[0,[6],1,\"kill -9\"],[0,[],0,\"'d  the service processes and spawned them again. We again monitored for 15-20 minutes. Nothing went wrong now. All seemed fine.\"]]],[1,\"p\",[[0,[],0,\"We thought that was some random one-off error. Might be some edge case. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called back \"],[0,[1],1,\"Vivek\"],[0,[],0,\" and notified him that the server was all fine and he should test again. After a quick test, \"],[0,[1],1,\"Vivek\"],[0,[],0,\" gave a confirmation that it was all okay now. We were relieved but super confused. In the end, we said \"],[0,[1],1,\"\\\"chuck it\\\"\"],[0,[],0,\" and moved on. By this time, our operations team and customer support team started coming to office one by one, astonished to see both of us still in office. It was 8 AM now.\"]]],[1,\"p\",[[0,[],0,\"Just when I closed my terminal, one of the guys from the operations came to our desk and informed that all the dashboards are empty. Nothing was showing up, these guys couldn't even open up a single service request on the dashboard. I went with him to investigate (using our beloved Chome Developer Tools) and found the same error \"],[0,[1],1,\"Vivek\"],[0,[],0,\" was getting earlier. APIs were timing out. I quickly ran to \"],[0,[1],1,\"Gauri\"],[0,[],0,\" and asked her to monitor the servers and bam! The CPU was again on 100%. Now I almost started freaking out. As a software engineer, I feel disgraced when something I build doesn't work and the end user is affected. I started thinking of all possible places where I could have gone wrong - \"],[0,[1],1,\"\\\"Perhaps the merge didn't end well. What if there's a cyclic dependency which is causing the Python interpreter to freak out? Maybe I removed some essential piece of code in merge conflicts which is causing this issue? Did internet just go off on Digital Ocean servers?\\\"\"],[0,[],0,\". And there stood \"],[0,[1],1,\"Gauri\"],[0,[],0,\", as calm as the sea, steadfast, neatly monitoring any patterns in this behavior and without even the slightest bit of stress on her face, and comforting me that there's nothing to panic and I should stay calm. She found that, not only the CPU went 100%, even the RAM usage slowly went from 15% to 78%! She again killed the processes and started again and everything went back to normal.\"]]],[1,\"p\",[[0,[],0,\"I was puzzled beyond imagination. My first thought was to review the all the code that went on production. Yes, all of it! All code in those 19 feature branches, which would amount to around 10K lines. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me to add logs everywhere - start and end of function body, API endpoints, RPC calls, etc. I quickly managed to do it, at least in the new code that was deployed. But we were running out of time. It was 9AM and people from other teams were arriving one by one only to find an occasional service disruption. At this point, we didn't even bother checking the \"],[0,[7],1,\"Crashlytics\"],[0,[],0,\" dashboard because even the app was getting the same timeout errors. Our main website opened with an empty header since that's where we displayed the service categories we provided, since the API for that too was getting timed out. The frequency of this disruption exacerbated as the day progressed and more and more users started using the app. \"]]],[1,\"p\",[[0,[],0,\"The thing is, no one had any idea what caused it. Being amateur developers, we made one of the most common beginner mistakes - insufficient logging. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called up everyone in the team to come to office as soon as they can and it as a \"],[0,[1],1,\"P0\"],[0,[],0,\" situation. Most of them were in their deep sleep at this point and the few who answered also started panicking like crazy. While everyone was on their way, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me the last thing I wanted to hear - \"],[0,[1],1,\"\\\"Let's rollback the release.\\\"\"],[0,[],0,\". This was even more disgraceful. Something that you built was so bad that it had to be taken down. The release was already delayed by three days and I didn't want to get it delayed any further. I resisted and asked for a bit more time. Seeing that I hadn't given on this hopeless situation, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" also decided to give me another hour and if nothing happens, she would rollback the release at 11AM.\"]]],[1,\"h1\",[[0,[],0,\"Finally, a ray of hope\"]]],[1,\"p\",[[0,[],0,\"After mindlessly testing and hopelessly trying to reproduce the issue on my local environment, I decided to test all the frontend apps on my machine. The first one that I had already setup on my laptop was the main website. I started randomly opening all the pages, tried creating a service request. Just when I tried creating a service request for some random category, the network request stalled and, for the first time in life, I was happy to see an error in browser console - \"],[0,[8],1,\"504 Gateway Timeout\"],[0,[],0,\". I screamed out \"],[0,[1],1,\"\\\"Gauri! I could reproduce the issue on my machine!\\\"\"],[0,[],0,\". I killed the server process, spawned it again, created the same request and the server timed out again. My happiness had no bounds at that time! By this time the other guys in our team also came in one by one and started maniacally glaring into their laptops, browsing through the code they wrote, nervously thinking whether their code was the culprit. Meanwhile, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was on her newly acquired routine on the production server - monitor, kill, spawn again, repeat.\"]]],[1,\"p\",[[0,[],0,\"But, then came a sudden twist. My fellow teammate tried created a service request on his machine and it worked. Some guy created one on staging and it worked. Hell, someone created one on production too and it worked! In a second, all my happiness got flushed out and I was back to stage one. To my utter disgusting surprise, even I couldn't reproduce it on my machine now. I almost surrendered and gave in for the idea of rolling back the release, but then I checked why it went 100% CPU for that specific case. I furiously kept hitting the back button on the browser until I reached that page where I was able to reproduce the issue. And voila! It went 100% again.\"]]],[1,\"p\",[[0,[],0,\"It was for the plumber category that the issue got reproduced. I tried to replicate it on staging, couldn't reproduce. I tried it on my teammate's machine, couldn't replicate it. Tried on production, went 100% again. I wanted to double check whether this was because of my request and not someone else's, I reproduced it 10 times in a row. And yes, it was reproduced exactly when I opened the plumber category page. I knew it was not an environment specific issue for sure. Meanwhile I had isolated the code block where this was happening and that's where I got the breakthrough.\"]]],[1,\"h1\",[[0,[],0,\"Digging into the code\"]]],[1,\"p\",[[0,[],0,\"While our investigation was still going on, it was well past 11AM now. I could glance at the other side where the operations team was seated to find them browsing Facebook, playing games, some busy doing work not related to the dashboard, some falling back to trusted old Excel sheets. Overall, it was a very depressing scene wherein the operations team and customer support teams weren't able to do their work because of some fuck up on our end. I felt really ashamed of myself as I was still not able to debug the issue.\"]]],[1,\"p\",[[0,[],0,\"While reading the relevant code, the problematic part was a function which looked  like this,\"]]],[10,2],[1,\"p\",[[0,[],0,\"A \"],[0,[6],1,\"while\"],[0,[],0,\" loop with an unclear loop invariant. What could possibly go wrong! But actually, nothing in this code was incorrect. The conditions were correct it would give right output for a lot of cases which I had generated in my mind. Let's say, for work timings \"],[0,[6],1,\"9-18\"],[0,[],0,\" (9AM in the morning till 6PM in the evening) and duration of \"],[0,[6],1,\"30\"],[0,[],0,\" minutes per slot, the above function would generate the following output,\"]]],[10,3],[1,\"p\",[[0,[],0,\"Then I looked up why it was failing for the plumber category. I checked the database and got the entry timeslot definitions. The work timings were \"],[0,[6],1,\"9-23\"],[0,[],0,\" (9AM in the morning till 11PM at night) and duration was \"],[0,[6],1,\"60\"],[0,[],0,\" minutes. I mentally evaluated the code and I still couldn't get what was happening  here. Meanwhile, the guy who had written this code was pulling his hair out trying to understand what's happening here while staring at my screen. Then it clicked! It was the biggest WTF moment of my life. I figured out why it failed and I started laughing hysterically. Everyone was astonished at first, giving me an eager look, waiting for me to stop laughing so that they get to know what the hell this issue really was. The guy who wrote the code started shaking me fiercely, \"],[0,[1],1,\"\\\"Tejas, what the hell happened? Tell me! What was the issue? Please tell me ASAP. Stop laughing, you moron!\\\"\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"I somehow caught my breath and regained by senses, and saw the entire section of the office was staring at me - our team, HR, product managers, a few guys from the operations team, marketing guys, and even our CEO - all of them waiting for that one answer. I quickly stabilized myself, looked at that helpless guy and started asking him simple date and time arithmetic,\"]]],[1,\"blockquote\",[[0,[8],1,\"Me:\"],[0,[],0,\" How much is 9 AM + 1 hour?\"],[1,[],0,0],[0,[8],1,\"Him:\"],[0,[],0,\" Stop this stupid thing. Tell me what happened!\"],[1,[],0,1],[0,[8],1,\"Me:\"],[0,[],0,\" You will figure out yourself. Just give me the answer.\"],[1,[],0,2],[0,[8],1,\"Him:\"],[0,[],0,\" 10AM\"],[1,[],0,3],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,4],[0,[8],1,\"Him:\"],[0,[],0,\" 11 AM.\"],[1,[],0,5],[0,[8],1,\"Me:\"],[0,[],0,\" Okay. What's 10PM  + 1 hour?\"],[1,[],0,6],[0,[8],1,\"Him:\"],[0,[],0,\" 11PM\"],[1,[],0,7],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,8],[0,[8],1,\"Him:\"],[0,[],0,\" 12AM.\"],[1,[],0,9],[0,[8],1,\"Me:\"],[0,[],0,\" No. In 24 hour format?\"],[1,[],0,10],[0,[8],1,\"Him:\"],[0,[],0,\" 0 hours. Wait! oh... fuck!\"],[1,[],0,11],[0,[8],1,\"Me:\"],[0,[],0,\" Yes! Python \"],[0,[6],1,\"time\"],[0,[],0,\" objects use 24-hour format instead of 12-hour format. And 0 hours is still less than 23 hours, which still satisfies the loop criteria. Since time is cyclic, this condition will always be true and thus your while loop becomes an infinite loop. Moreover, you're yielding the timeslots at each iteration which explains the slow rise in RAM usage, and infinite loop explains why CPU went 100%.\"]]],[1,\"p\",[[0,[],0,\"It was the biggest \"],[0,[1],1,\"'Aha'\"],[0,[],0,\" moment on the floor. I could see a lot of them holding their heads and some still processing what I explained. Of all, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was giving her widest smile. One by one I was giving an explanation to everyone what happened and how it became an infinite loop. The poor guy put his head down on the table thinking how he couldn't catch this one case and even he gave a smile in the end.\"]]],[1,\"p\",[[0,[],0,\"The reason it was never captured on his machine or on the staging server was because no one had tested that condition! Whereas, just the night before the deployment, I had dumped the production data for categories on my local database for testing out a few things. But I never tested the website, so it wasn't caught even on my machine.\"]]],[1,\"h1\",[[0,[],0,\"Resolution\"]]],[1,\"p\",[[0,[],0,\"It was \"],[0,[1],1,\"really\"],[0,[],0,\" simple. Just compare the \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"time\"],[0,[],0,\" objects so that at 12AM, the day also increments which no longer satisfies the loop conditions and the loop breaks out. \"]]],[1,\"p\",[[0,[],0,\"The change was quickly made, tested on the same category. This time it worked without blowing the CPU usage off the roof. I still didn't understand why did he prefer comparing \"],[0,[6],1,\"time\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects. But it's fine. The patch was pushed on production and it worked correctly now for that same category. All dashboards were up and working and everybody, after enjoying their little free time, were back to their work. It was 12PM by now. I was definitely a zombie at this point. I spend another few hours figuring out other such pieces in code along with other team members and finally left for home \"],[0,[1],1,\"early\"],[0,[],0,\" at 4PM.\"]]],[10,4],[1,\"h1\",[[0,[],0,\"Important takeaways\"]]],[3,\"ul\",[[[0,[],0,\"NEVER EVER DO BIG BANG RELEASES! Release incrementally, in small chunks. It's easier to find needle among a few sticks of hay than an entire haystack.\"]],[[0,[],0,\"Logging is crucial. Learn how to log. Though I personally would not recommend, but log at every checkpoint in the code. If feel you would be inundated with logs, use log levels (\"],[0,[1],1,\"DEBUG\"],[0,[],0,\", \"],[0,[1],1,\"INFO\"],[0,[],0,\", \"],[0,[1],1,\"WARNING\"],[0,[],0,\", \"],[0,[1],1,\"ERROR\"],[0,[],0,\") and configure it with environment flags.\"]],[[0,[],0,\" No matter how rigorous QA testing you do, some things still escape the eyes of all. We can't help it. But at least ensure that all the cases already defined by the business teams are fully covered in the tests.\"]],[[0,[],0,\"Software engineers are humans. They can't be right all the time. Neither can someone think of all possible edge cases that may arise in the code, let alone something that would be defined by the end user. Empathize them and understand that such issues are not because they are incompetent but rather something which was inevitable. Rather I would think of that incident this way - of the 10K+ lines of code that went on production, only one line was the culprit.\"]],[[0,[],0,\"To this day, I really appreciate \"],[0,[1],1,\"Gauri\"],[0,[],0,\"'s stand. She's very strict in maintaining code quality and business logic implementation, and scolded us a lot for our mistakes. But in that moment, she was the only one who was fighting for us against the whole company and gave us as much time as she could afford. Not only her, even our CEO was very relaxed and despite knowing that every minute that we spent debugging this issue costed him money, he still supported us and didn't freak out either. Things would have gone horribly wrong if it wasn't for them. As a manager, stressing out your teams in such situations just makes everything worse. The team needs someone who would shield them from everyone else while they just focus on fixing the issue.\"]]]]]}","created_at_ts":1544303031982,"created_at":"2018-12-08 21:03:52"},{"id":"5c0c32b698ff7420cfa2df31","post_id":"5c0c1e7aabc169173fada4cb","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{}],[\"hr\",{}],[\"html\",{\"html\":\"<pre><code class=\\\"language-python line-numbers\\\">from datetime import datetime, time, date\\n\\nfrom dateutil.relativedelta import relativedelta\\n\\ndef get_next_slot(work_timings, duration):\\n    start_hour, end_hour = map(int, work_timings.split('-'))\\n    start_datetime = datetime.combine(date.today(), time(hour=start_hour))\\n    end_datetime = datetime.combine(date.today(), time(hour=end_hour))\\n    slot = relativedelta(minutes=duration)\\n\\n    while start_datetime.time() <= end_datetime.time():\\n        end_slot = start_datetime + relativedelta(minutes=duration)\\n\\n        yield start_datetime.time(), end_slot.time()\\n        start_datetime = end_slot</code></pre>\\n<p>\\n    <small><strong>NOTE:</strong> The above snippet is not the exact piece of code that was causing the issue. This is a workable example written from the memory I had of that incident.</small>\\n</p>\"}],[\"markdown\",{\"markdown\":\"```python\\n(datetime.time(9, 0), datetime.time(9, 30))\\n(datetime.time(9, 30), datetime.time(10, 0))\\n(datetime.time(10, 0), datetime.time(10, 30))\\n(datetime.time(10, 30), datetime.time(11, 0))\\n(datetime.time(11, 0), datetime.time(11, 30))\\n(datetime.time(11, 30), datetime.time(12, 0))\\n(datetime.time(12, 0), datetime.time(12, 30))\\n(datetime.time(12, 30), datetime.time(13, 0))\\n(datetime.time(13, 0), datetime.time(13, 30))\\n(datetime.time(13, 30), datetime.time(14, 0))\\n(datetime.time(14, 0), datetime.time(14, 30))\\n(datetime.time(14, 30), datetime.time(15, 0))\\n(datetime.time(15, 0), datetime.time(15, 30))\\n(datetime.time(15, 30), datetime.time(16, 0))\\n(datetime.time(16, 0), datetime.time(16, 30))\\n(datetime.time(16, 30), datetime.time(17, 0))\\n(datetime.time(17, 0), datetime.time(17, 30))\\n(datetime.time(17, 30), datetime.time(18, 0))\\n(datetime.time(18, 0), datetime.time(18, 30))\\n```\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.linkedin.com/company/localoye/\"]],[\"em\"],[\"a\",[\"href\",\"https://www.djangoproject.com/\"]],[\"a\",[\"href\",\"https://www.mysql.com/\"]],[\"a\",[\"href\",\"https://danielkummer.github.io/git-flow-cheatsheet/\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man1/top.1.html\"]],[\"code\"],[\"a\",[\"href\",\"https://fabric.io/kits/android/crashlytics\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"This is a debugging story at my first job at \"],[0,[0],1,\"LocalOye\"],[0,[],0,\", where we encountered a bug which I still consider to be one of the best I've ever encountered.\"]]],[10,0],[1,\"h1\",[[0,[],0,\"Background\"]]],[1,\"p\",[[0,[],0,\"LocalOye was a mass-market services aggregator startup (now shutdown). We connected the service providers (plumbers, electricians, carpenters, yoga trainers, etc.) to the consumers through our app. \"]]],[1,\"p\",[[0,[],0,\"Like all tech startups in their early booming days, ours too was on a feature spree. We had around half a dozen of major features rolling out in a single release. We used to call these as \"],[0,[1],1,\"big bang releases\"],[0,[],0,\". Our tech stack was \"],[0,[2],1,\"Django\"],[0,[],0,\" with \"],[0,[3],1,\"MySQL\"],[0,[],0,\" and the entire system was split into a bunch of microservices.\"]]],[1,\"p\",[[0,[],0,\"We were rolling out a bunch of features, but for sake brevity, let's just focus on the one that caused the issue. When booking for an appointment for a service, the customer has to answer a bunch of questions including the type of service, location, cost range, timing, etc. We introduced something called as variable time slots where providers can define their own time slots for the whole day, assign the time range they will be working in and the size of a time slot per customer.\"]]],[1,\"p\",[[0,[],0,\"There were around 19 \"],[0,[4],1,\"feature branches\"],[0,[],0,\" written by our team of 6 backend engineers, which were supposed to be merged and pushed on production and I was given this messy work. After fighting the nightmarish merge conflicts, last minute fixes, syntax errors (on staging!), cyclic dependencies and migration conflicts, I somehow managed to get it all in one branch. It was also my longest day at work (37 hours, though I'm no longer proud of this achievement). Yet we were on an ass-on-fire situation because the deployment was still not done.\"]]],[1,\"p\",[[0,[],0,\"Finally, the next day we got a green flag from QA and we're ready to deploy. Like all our major releases, this was gonna go on production at night. We still didn't have CI/CD in place, so all deployments were manual (login to the instance, pull the code, restart server). We decided the deployment to be done at around 4 AM since the load was minimal and if anything goes haywire, we had minimal loss. We had stayed back in the office including the backend team, frontend team, our backend lead (\"],[0,[1],1,\"Gauri\"],[0,[],0,\") and head of technology (\"],[0,[1],1,\"Vivek\"],[0,[],0,\"). \"]]],[1,\"p\",[[0,[],0,\"The deployment happened at around 6 AM and we did a basic test whether everything was working fine. It seemed the deployment was a success. We felt relieved! Everyone was almost half asleep at this point and were really happy that they finally got this release done and now they can cozily lay back on their beds and enjoy their well deserved sleep. I was particularly a zombie at this point since I just had a 7 hour sleep after that humongous 37 hour stint and I was up again for 16 hours now. Soon everyone packed their bags and left one by one. Me and Gauri stayed back. While she wrote the \"],[0,[1],1,\"\\\"Deployment successful\\\"\"],[0,[],0,\" email, marking our product managers, business teams and CEO, I was busy closing my code editors, terminals, ticking off points on the deployment checklist and, finally, shutting down my laptop.\"]]],[10,1],[1,\"h1\",[[0,[],0,\"One by one, things fell apart\"]]],[1,\"p\",[[0,[],0,\"Everything was nice and happy and we decided to step down for a quick breakfast. While coming back, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" got a nice good morning call from \"],[0,[1],1,\"Vivek\"],[0,[],0,\" informing that he was getting API timeout errors on web. All AJAX calls to the server waited for 30 seconds (default for HTTP requests) and would return with a timeout error. We quickly headed back to the office, turned on our laptops and started monitoring our servers using the all time reliable Linux's \"],[0,[5],1,\"top\"],[0,[],0,\"! One of the servers that hosted our microserivce, which is responsible for reading data from server and contained most of the business logic, shot to 100% CPU. We waited for sometime, but it still didn't seem to settle. Since it affected all other microservices, we spent minimal time investigating and \"],[0,[1],1,\"Gauri\"],[0,[],0,\" just \"],[0,[6],1,\"kill -9\"],[0,[],0,\"'d  the service processes and spawned them again. We again monitored for 15-20 minutes. Nothing went wrong now. All seemed fine.\"]]],[1,\"p\",[[0,[],0,\"We thought that was some random one-off error. Might be some edge case. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called back \"],[0,[1],1,\"Vivek\"],[0,[],0,\" and notified him that the server was all fine and he should test again. After a quick test, \"],[0,[1],1,\"Vivek\"],[0,[],0,\" gave a confirmation that it was all okay now. We were relieved but super confused. In the end, we said \"],[0,[1],1,\"\\\"chuck it\\\"\"],[0,[],0,\" and moved on. By this time, our operations team and customer support team started coming to office one by one, astonished to see both of us still in office. It was 8 AM now.\"]]],[1,\"p\",[[0,[],0,\"Just when I closed my terminal, one of the guys from the operations came to our desk and informed that all the dashboards are empty. Nothing was showing up, these guys couldn't even open up a single service request on the dashboard. I went with him to investigate (using our beloved Chome Developer Tools) and found the same error \"],[0,[1],1,\"Vivek\"],[0,[],0,\" was getting earlier. APIs were timing out. I quickly ran to \"],[0,[1],1,\"Gauri\"],[0,[],0,\" and asked her to monitor the servers and bam! The CPU was again on 100%. Now I almost started freaking out. As a software engineer, I feel disgraced when something I build doesn't work and the end user is affected. I started thinking of all possible places where I could have gone wrong - \"],[0,[1],1,\"\\\"Perhaps the merge didn't end well. What if there's a cyclic dependency which is causing the Python interpreter to freak out? Maybe I removed some essential piece of code in merge conflicts which is causing this issue? Did internet just go off on Digital Ocean servers?\\\"\"],[0,[],0,\". And there stood \"],[0,[1],1,\"Gauri\"],[0,[],0,\", as calm as the sea, steadfast, neatly monitoring any patterns in this behavior and without even the slightest bit of stress on her face, and comforting me that there's nothing to panic and I should stay calm. She found that, not only the CPU went 100%, even the RAM usage slowly went from 15% to 78%! She again killed the processes and started again and everything went back to normal.\"]]],[1,\"p\",[[0,[],0,\"I was puzzled beyond imagination. My first thought was to review the all the code that went on production. Yes, all of it! All code in those 19 feature branches, which would amount to around 10K lines. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me to add logs everywhere - start and end of function body, API endpoints, RPC calls, etc. I quickly managed to do it, at least in the new code that was deployed. But we were running out of time. It was 9AM and people from other teams were arriving one by one only to find an occasional service disruption. At this point, we didn't even bother checking the \"],[0,[7],1,\"Crashlytics\"],[0,[],0,\" dashboard because even the app was getting the same timeout errors. Our main website opened with an empty header since that's where we displayed the service categories we provided, since the API for that too was getting timed out. The frequency of this disruption exacerbated as the day progressed and more and more users started using the app. \"]]],[1,\"p\",[[0,[],0,\"The thing is, no one had any idea what caused it. Being amateur developers, we made one of the most common beginner mistakes - insufficient logging. \"],[0,[1],1,\"Gauri\"],[0,[],0,\" called up everyone in the team to come to office as soon as they can and it as a \"],[0,[1],1,\"P0\"],[0,[],0,\" situation. Most of them were in their deep sleep at this point and the few who answered also started panicking like crazy. While everyone was on their way, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" told me the last thing I wanted to hear - \"],[0,[1],1,\"\\\"Let's rollback the release.\\\"\"],[0,[],0,\". This was even more disgraceful. Something that you built was so bad that it had to be taken down. The release was already delayed by three days and I didn't want to get it delayed any further. I resisted and asked for a bit more time. Seeing that I hadn't given on this hopeless situation, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" also decided to give me another hour and if nothing happens, she would rollback the release at 11AM.\"]]],[1,\"h1\",[[0,[],0,\"Finally, a ray of hope\"]]],[1,\"p\",[[0,[],0,\"After mindlessly testing and hopelessly trying to reproduce the issue on my local environment, I decided to test all the frontend apps on my machine. The first one that I had already setup on my laptop was the main website. I started randomly opening all the pages, tried creating a service request. Just when I tried creating a service request for some random category, the network request stalled and, for the first time in life, I was happy to see an error in browser console - \"],[0,[8],1,\"504 Gateway Timeout\"],[0,[],0,\". I screamed out \"],[0,[1],1,\"\\\"Gauri! I could reproduce the issue on my machine!\\\"\"],[0,[],0,\". I killed the server process, spawned it again, created the same request and the server timed out again. My happiness had no bounds at that time! By this time the other guys in our team also came in one by one and started maniacally glaring into their laptops, browsing through the code they wrote, nervously thinking whether their code was the culprit. Meanwhile, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was on her newly acquired routine on the production server - monitor, kill, spawn again, repeat.\"]]],[1,\"p\",[[0,[],0,\"But, then came a sudden twist. My fellow teammate tried created a service request on his machine and it worked. Some guy created one on staging and it worked. Hell, someone created one on production too and it worked! In a second, all my happiness got flushed out and I was back to stage one. To my utter disgusting surprise, even I couldn't reproduce it on my machine now. I almost surrendered and gave in for the idea of rolling back the release, but then I checked why it went 100% CPU for that specific case. I furiously kept hitting the back button on the browser until I reached that page where I was able to reproduce the issue. And voila! It went 100% again.\"]]],[1,\"p\",[[0,[],0,\"It was for the plumber category that the issue got reproduced. I tried to replicate it on staging, couldn't reproduce. I tried it on my teammate's machine, couldn't replicate it. Tried on production, went 100% again. I wanted to double check whether this was because of my request and not someone else's, I reproduced it 10 times in a row. And yes, it was reproduced exactly when I opened the plumber category page. I knew it was not an environment specific issue for sure. Meanwhile I had isolated the code block where this was happening and that's where I got the breakthrough.\"]]],[1,\"h1\",[[0,[],0,\"Digging into the code\"]]],[1,\"p\",[[0,[],0,\"While our investigation was still going on, it was well past 11AM now. I could glance at the other side where the operations team was seated to find them browsing Facebook, playing games, some busy doing work not related to the dashboard, some falling back to trusted old Excel sheets. Overall, it was a very depressing scene wherein the operations team and customer support teams weren't able to do their work because of some fuck up on our end. I felt really ashamed of myself as I was still not able to debug the issue.\"]]],[1,\"p\",[[0,[],0,\"While reading the relevant code, the problematic part was a function which looked  like this,\"]]],[10,2],[1,\"p\",[[0,[],0,\"A \"],[0,[6],1,\"while\"],[0,[],0,\" loop with an unclear loop invariant. What could possibly go wrong! But actually, nothing in this code was incorrect. The conditions were correct it would give right output for a lot of cases which I had generated in my mind. Let's say, for work timings \"],[0,[6],1,\"9-18\"],[0,[],0,\" (9AM in the morning till 6PM in the evening) and duration of \"],[0,[6],1,\"30\"],[0,[],0,\" minutes per slot, the above function would generate the following output,\"]]],[10,3],[1,\"p\",[[0,[],0,\"Then I looked up why it was failing for the plumber category. I checked the database and got the entry timeslot definitions. The work timings were \"],[0,[6],1,\"9-23\"],[0,[],0,\" (9AM in the morning till 11PM at night) and duration was \"],[0,[6],1,\"60\"],[0,[],0,\" minutes. I mentally evaluated the code and I still couldn't get what was happening  here. Meanwhile, the guy who had written this code was pulling his hair out trying to understand what's happening here while staring at my screen. Then it clicked! It was the biggest WTF moment of my life. I figured out why it failed and I started laughing hysterically. Everyone was astonished at first, giving me an eager look, waiting for me to stop laughing so that they get to know what the hell this issue really was. The guy who wrote the code started shaking me fiercely, \"],[0,[1],1,\"\\\"Tejas, what the hell happened? Tell me! What was the issue? Please tell me ASAP. Stop laughing, you moron!\\\"\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"I somehow caught my breath and regained by senses, and saw the entire section of the office was staring at me - our team, HR, product managers, a few guys from the operations team, marketing guys, and even our CEO - all of them waiting for that one answer. I quickly stabilized myself, looked at that helpless guy and started asking him simple date and time arithmetic,\"]]],[1,\"blockquote\",[[0,[8],1,\"Me:\"],[0,[],0,\" How much is 9 AM + 1 hour?\"],[1,[],0,0],[0,[8],1,\"Him:\"],[0,[],0,\" Stop this stupid thing. Tell me what happened!\"],[1,[],0,1],[0,[8],1,\"Me:\"],[0,[],0,\" You will figure out yourself. Just give me the answer.\"],[1,[],0,2],[0,[8],1,\"Him:\"],[0,[],0,\" 10AM\"],[1,[],0,3],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,4],[0,[8],1,\"Him:\"],[0,[],0,\" 11 AM.\"],[1,[],0,5],[0,[8],1,\"Me:\"],[0,[],0,\" Okay. What's 10PM  + 1 hour?\"],[1,[],0,6],[0,[8],1,\"Him:\"],[0,[],0,\" 11PM\"],[1,[],0,7],[0,[8],1,\"Me:\"],[0,[],0,\" +1 hour?\"],[1,[],0,8],[0,[8],1,\"Him:\"],[0,[],0,\" 12AM.\"],[1,[],0,9],[0,[8],1,\"Me:\"],[0,[],0,\" No. In 24 hour format?\"],[1,[],0,10],[0,[8],1,\"Him:\"],[0,[],0,\" 0 hours. Wait! oh... fuck!\"],[1,[],0,11],[0,[8],1,\"Me:\"],[0,[],0,\" Yes! Python \"],[0,[6],1,\"time\"],[0,[],0,\" objects use 24-hour format instead of 12-hour format. And 0 hours is still less than 23 hours, which still satisfies the loop criteria. Since time is cyclic, this condition will always be true and thus your while loop becomes an infinite loop. Moreover, you're yielding the timeslots at each iteration which explains the slow rise in RAM usage, and infinite loop explains why CPU went 100%.\"]]],[1,\"p\",[[0,[],0,\"It was the biggest \"],[0,[1],1,\"'Aha'\"],[0,[],0,\" moment on the floor. I could see a lot of them holding their heads and some still processing what I explained. Of all, \"],[0,[1],1,\"Gauri\"],[0,[],0,\" was giving her widest smile. One by one I was giving an explanation to everyone what happened and how it became an infinite loop. The poor guy put his head down on the table thinking how he couldn't catch this one case and even he gave a smile in the end.\"]]],[1,\"p\",[[0,[],0,\"The reason it was never captured on his machine or on the staging server was because no one had tested that condition! Whereas, just the night before the deployment, I had dumped the production data for categories on my local database for testing out a few things. But I never tested the website, so it wasn't caught even on my machine.\"]]],[1,\"h1\",[[0,[],0,\"Resolution\"]]],[1,\"p\",[[0,[],0,\"It was \"],[0,[1],1,\"really\"],[0,[],0,\" simple. Just compare the \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"time\"],[0,[],0,\" objects so that at 12AM, the day also increments which no longer satisfies the loop conditions and the loop breaks out. \"]]],[1,\"p\",[[0,[],0,\"The change was quickly made, tested on the same category. This time it worked without blowing the CPU usage off the roof. I still didn't understand why did he prefer comparing \"],[0,[6],1,\"time\"],[0,[],0,\" objects instead of \"],[0,[6],1,\"datetime\"],[0,[],0,\" objects. But it's fine. The patch was pushed on production and it worked correctly now for that same category. All dashboards were up and working and everybody, after enjoying their little free time, were back to their work. It was 12PM by now. I was definitely a zombie at this point. I spend another few hours figuring out other such pieces in code along with other team members and finally left for home \"],[0,[1],1,\"early\"],[0,[],0,\" at 4PM.\"]]],[10,4],[1,\"h1\",[[0,[],0,\"Important takeaways\"]]],[3,\"ul\",[[[0,[],0,\"NEVER EVER DO BIG BANG RELEASES! Release incrementally, in small chunks. It's easier to find needle among a few sticks of hay than an entire haystack.\"]],[[0,[],0,\"Logging is crucial. Learn how to log. Though I personally would not recommend, but log at every checkpoint in the code. If feel you would be inundated with logs, use log levels (\"],[0,[1],1,\"DEBUG\"],[0,[],0,\", \"],[0,[1],1,\"INFO\"],[0,[],0,\", \"],[0,[1],1,\"WARNING\"],[0,[],0,\", \"],[0,[1],1,\"ERROR\"],[0,[],0,\") and configure it with environment flags.\"]],[[0,[],0,\" No matter how rigorous QA testing you do, some things still escape the eyes of all. We can't help it. But at least ensure that all the cases already defined by the business teams are fully covered in the tests.\"]],[[0,[],0,\"Software engineers are humans. They can't be right all the time. Neither can someone think of all possible edge cases that may arise in the code, let alone something that would be defined by the end user. Empathize them and understand that such issues are not because they are incompetent but rather something which was inevitable. Rather I would think of that incident this way - of the 10K+ lines of code that went on production, only one line was the culprit.\"]],[[0,[],0,\"To this day, I really appreciate \"],[0,[1],1,\"Gauri\"],[0,[],0,\"'s stand. She's very strict in maintaining code quality and business logic implementation, and scolded us a lot for our mistakes. But in that moment, she was the only one who was fighting for us against the whole company and gave us as much time as she could afford. Not only her, even our CEO was very relaxed and despite knowing that every minute that we spent debugging this issue costed him money, he still supported us and didn't freak out either. Things would have gone horribly wrong if it wasn't for them. As a manager, stressing out your teams in such situations just makes everything worse. The team needs someone who would shield them from everyone else while they just focus on fixing the issue.\"]]]]]}","created_at_ts":1544303286418,"created_at":"2018-12-08 21:08:06"},{"id":"5c2e5eef1ab0e93d632365bd","post_id":"5c2dfa104614fe2f8b0b13ac","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<table>\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>profile_id</th>\\n            <th>field</th>\\n            <th>value</th>\\n            <th>user_id</th>\\n            <th>comment</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>12</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>verified</td>\\n            <td>23</td>\\n            <td>User marked as verified after validating email.</td>\\n            <td>2019-01-02T15:32:12Z</td>\\n        </tr>\\n        <tr>\\n            <td>28</td>\\n            <td>39</td>\\n            <td>first_name</td>\\n            <td>Tejas</td>\\n            <td>23</td>\\n            <td>User changed profile information.</td>\\n            <td>2019-01-02T17:11:54Z</td>\\n        </tr>\\n        <tr>\\n            <td>31</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>active</td>\\n            <td>23</td>\\n            <td>User activated after completing profile.</td>\\n            <td>2019-01-02T17:13:01Z</td>\\n        </tr>\\n    </tbody>\\n</table>\"}],[\"html\",{\"html\":\"<table>\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>order_id</th>\\n            <th>sku_id</th>\\n            <th>quantity</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>9</td>\\n            <td>87</td>\\n            <td>12</td>\\n            <td>1</td>\\n            <td>2019-01-02T12:09:35Z</td>\\n        </tr>\\n        <tr>\\n            <td>10</td>\\n            <td>87</td>\\n            <td>5</td>\\n            <td>5</td>\\n            <td>2019-01-02T12:09:58Z</td>\\n        </tr>\\n        <tr>\\n            <td>15</td>\\n            <td>91</td>\\n            <td>12</td>\\n            <td>2</td>\\n            <td>2019-01-02T13:01:19Z</td>\\n        </tr>\\n    </tbody>\\n</table>\"}]],\"markups\":[],\"sections\":[[1,\"h2\",[[0,[],0,\"Content\"]]],[1,\"p\",[[0,[],0,\"These tables are for storing pure content. A really good example would be blog articles. This data is often formatted and showed to the end users over a read-only channel. There is usually a moderator or an editor who can change this data.\"]]],[1,\"p\",[[0,[],0,\"It often has full CRUD (create-read-update-delete) access though certain actions are restricted to certain roles. For example, a blog editor can create, update or even delete an article but the end user can only read it. \"]]],[1,\"p\",[[0,[],0,\"This data can be accessed and controlled with pure RESTful APIs and they usually have a 1:1 mapping with the database actions - POST for create, GET for read, PUT/PATCH for update and DELETE for deleting.\"]]],[1,\"h2\",[[0,[],0,\"Transaction\"]]],[1,\"p\",[[0,[],0,\"These are immutable datasets. Once added, no data can be changed or deleted. These are ideal for storing transactional activities like book keeping, virtual currencies, etc. They also feature a non-serial primary key or unique key (a random string or UUID or equivalent) so that the sequence cannot be predicted.\"]]],[1,\"p\",[[0,[],0,\"It only has CR (create-read) access, though in certain cases, minor updates are allowed which do not drastically affect the transactional data.\"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"Access to the data is usually access controlled and isolated for users. Users cannot access each others' data and can neither modify their own. Usually RESTful practices are limited because of limited data access.\"]]],[1,\"h2\",[[0,[],0,\"Log\"]]],[1,\"p\",[[0,[],0,\"These tables are used for recording change in data for a given table.  Similar to transaction tables, these are immutable. They denote the history of value a field at a given point in time. Common use cases are value transitions, changelog, etc.\"]]],[1,\"p\",[[0,[],0,\"Like transaction tables, these are strictly CR (create-read). Occasionally, they also contain information about the user who made the change and reason for change.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Unlike previous tables, data from table is never directly exposed to the user. Thus there are no RESTful endpoints. Though they are seldom used for administrative purposes to track user activity and troubleshoot issues. Access for such purposes is usually done using a server-side rendered page or using custom internal APIs which are very specific to the use case.\"]]],[1,\"h2\",[[0,[],0,\"Mapping\"]]],[1,\"p\",[[0,[],0,\"These are only used for creating a relations between two or more tables. Such tables are often called many-to-many mapping tables, though, using appropriate UNIQUE keys, they can be restricted to many-to-one or even one-to-one mapping. They only store foreign keys to related tables. A good example would be assigning multiple tags to multiple articles.\"]]],[1,\"p\",[[0,[],0,\"Based on the behavior of the related tables, mapping tables can be CRUD (create-read-update-delete) or CR (create-read) only. Like log tables, they can also contain additional data for each mapping.\"]]],[10,1],[1,\"p\",[[0,[],0,\"Data from mapping tables is never exposed directly to the end user. It's always indirectly used along with data from content tables and related data is shown in nested fashion. Pure RESTful APIs will usually nest the related data.\"]]]]}","created_at_ts":1546542831675,"created_at":"2019-01-03 19:13:51"},{"id":"5c2e5ef81ab0e93d632365be","post_id":"5c2dfa104614fe2f8b0b13ac","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<table>\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>profile_id</th>\\n            <th>field</th>\\n            <th>value</th>\\n            <th>user_id</th>\\n            <th>comment</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>12</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>verified</td>\\n            <td>23</td>\\n            <td>User marked as verified after validating email.</td>\\n            <td>2019-01-02T15:32:12Z</td>\\n        </tr>\\n        <tr>\\n            <td>28</td>\\n            <td>39</td>\\n            <td>first_name</td>\\n            <td>Tejas</td>\\n            <td>23</td>\\n            <td>User changed profile information.</td>\\n            <td>2019-01-02T17:11:54Z</td>\\n        </tr>\\n        <tr>\\n            <td>31</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>active</td>\\n            <td>23</td>\\n            <td>User activated after completing profile.</td>\\n            <td>2019-01-02T17:13:01Z</td>\\n        </tr>\\n    </tbody>\\n</table>\"}],[\"html\",{\"html\":\"<table>\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>order_id</th>\\n            <th>sku_id</th>\\n            <th>quantity</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>9</td>\\n            <td>87</td>\\n            <td>12</td>\\n            <td>1</td>\\n            <td>2019-01-02T12:09:35Z</td>\\n        </tr>\\n        <tr>\\n            <td>10</td>\\n            <td>87</td>\\n            <td>5</td>\\n            <td>5</td>\\n            <td>2019-01-02T12:09:58Z</td>\\n        </tr>\\n        <tr>\\n            <td>15</td>\\n            <td>91</td>\\n            <td>12</td>\\n            <td>2</td>\\n            <td>2019-01-02T13:01:19Z</td>\\n        </tr>\\n    </tbody>\\n</table>\"}]],\"markups\":[],\"sections\":[[1,\"h2\",[[0,[],0,\"Content\"]]],[1,\"p\",[[0,[],0,\"These tables are for storing pure content. A really good example would be blog articles. This data is often formatted and showed to the end users over a read-only channel. There is usually a moderator or an editor who can change this data.\"]]],[1,\"p\",[[0,[],0,\"It often has full CRUD (create-read-update-delete) access though certain actions are restricted to certain roles. For example, a blog editor can create, update or even delete an article but the end user can only read it. \"]]],[1,\"p\",[[0,[],0,\"This data can be accessed and controlled with pure RESTful APIs and they usually have a 1:1 mapping with the database actions - POST for create, GET for read, PUT/PATCH for update and DELETE for deleting.\"]]],[1,\"h2\",[[0,[],0,\"Transaction\"]]],[1,\"p\",[[0,[],0,\"These are immutable datasets. Once added, no data can be changed or deleted. These are ideal for storing transactional activities like book keeping, virtual currencies, etc. They also feature a non-serial primary key or unique key (a random string or UUID or equivalent) so that the sequence cannot be predicted.\"]]],[1,\"p\",[[0,[],0,\"It only has CR (create-read) access, though in certain cases, minor updates are allowed which do not drastically affect the transactional data.\"]]],[1,\"p\",[[0,[],0,\"Access to the data is usually access controlled and isolated for users. Users cannot access each others' data and can neither modify their own. Usually RESTful practices are limited because of limited data access.\"]]],[1,\"h2\",[[0,[],0,\"Log\"]]],[1,\"p\",[[0,[],0,\"These tables are used for recording change in data for a given table.  Similar to transaction tables, these are immutable. They denote the history of value a field at a given point in time. Common use cases are value transitions, changelog, etc.\"]]],[1,\"p\",[[0,[],0,\"Like transaction tables, these are strictly CR (create-read). Occasionally, they also contain information about the user who made the change and reason for change.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Unlike previous tables, data from table is never directly exposed to the user. Thus there are no RESTful endpoints. Though they are seldom used for administrative purposes to track user activity and troubleshoot issues. Access for such purposes is usually done using a server-side rendered page or using custom internal APIs which are very specific to the use case.\"]]],[1,\"h2\",[[0,[],0,\"Mapping\"]]],[1,\"p\",[[0,[],0,\"These are only used for creating a relations between two or more tables. Such tables are often called many-to-many mapping tables, though, using appropriate UNIQUE keys, they can be restricted to many-to-one or even one-to-one mapping. They only store foreign keys to related tables. A good example would be assigning multiple tags to multiple articles.\"]]],[1,\"p\",[[0,[],0,\"Based on the behavior of the related tables, mapping tables can be CRUD (create-read-update-delete) or CR (create-read) only. Like log tables, they can also contain additional data for each mapping.\"]]],[10,1],[1,\"p\",[[0,[],0,\"Data from mapping tables is never exposed directly to the end user. It's always indirectly used along with data from content tables and related data is shown in nested fashion. Pure RESTful APIs will usually nest the related data.\"]]]]}","created_at_ts":1546542840404,"created_at":"2019-01-03 19:14:00"},{"id":"5c2e5f0b1ab0e93d632365bf","post_id":"5c2dfa104614fe2f8b0b13ac","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<table>\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>profile_id</th>\\n            <th>field</th>\\n            <th>value</th>\\n            <th>user_id</th>\\n            <th>comment</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>12</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>verified</td>\\n            <td>23</td>\\n            <td>User marked as verified after validating email.</td>\\n            <td>2019-01-02T15:32:12Z</td>\\n        </tr>\\n        <tr>\\n            <td>28</td>\\n            <td>39</td>\\n            <td>first_name</td>\\n            <td>Tejas</td>\\n            <td>23</td>\\n            <td>User changed profile information.</td>\\n            <td>2019-01-02T17:11:54Z</td>\\n        </tr>\\n        <tr>\\n            <td>31</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>active</td>\\n            <td>23</td>\\n            <td>User activated after completing profile.</td>\\n            <td>2019-01-02T17:13:01Z</td>\\n        </tr>\\n    </tbody>\\n</table>\\n\\n<caption>\"}],[\"html\",{\"html\":\"<table>\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>order_id</th>\\n            <th>sku_id</th>\\n            <th>quantity</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>9</td>\\n            <td>87</td>\\n            <td>12</td>\\n            <td>1</td>\\n            <td>2019-01-02T12:09:35Z</td>\\n        </tr>\\n        <tr>\\n            <td>10</td>\\n            <td>87</td>\\n            <td>5</td>\\n            <td>5</td>\\n            <td>2019-01-02T12:09:58Z</td>\\n        </tr>\\n        <tr>\\n            <td>15</td>\\n            <td>91</td>\\n            <td>12</td>\\n            <td>2</td>\\n            <td>2019-01-02T13:01:19Z</td>\\n        </tr>\\n    </tbody>\\n</table>\"}]],\"markups\":[],\"sections\":[[1,\"h2\",[[0,[],0,\"Content\"]]],[1,\"p\",[[0,[],0,\"These tables are for storing pure content. A really good example would be blog articles. This data is often formatted and showed to the end users over a read-only channel. There is usually a moderator or an editor who can change this data.\"]]],[1,\"p\",[[0,[],0,\"It often has full CRUD (create-read-update-delete) access though certain actions are restricted to certain roles. For example, a blog editor can create, update or even delete an article but the end user can only read it. \"]]],[1,\"p\",[[0,[],0,\"This data can be accessed and controlled with pure RESTful APIs and they usually have a 1:1 mapping with the database actions - POST for create, GET for read, PUT/PATCH for update and DELETE for deleting.\"]]],[1,\"h2\",[[0,[],0,\"Transaction\"]]],[1,\"p\",[[0,[],0,\"These are immutable datasets. Once added, no data can be changed or deleted. These are ideal for storing transactional activities like book keeping, virtual currencies, etc. They also feature a non-serial primary key or unique key (a random string or UUID or equivalent) so that the sequence cannot be predicted.\"]]],[1,\"p\",[[0,[],0,\"It only has CR (create-read) access, though in certain cases, minor updates are allowed which do not drastically affect the transactional data.\"]]],[1,\"p\",[[0,[],0,\"Access to the data is usually access controlled and isolated for users. Users cannot access each others' data and can neither modify their own. Usually RESTful practices are limited because of limited data access.\"]]],[1,\"h2\",[[0,[],0,\"Log\"]]],[1,\"p\",[[0,[],0,\"These tables are used for recording change in data for a given table.  Similar to transaction tables, these are immutable. They denote the history of value a field at a given point in time. Common use cases are value transitions, changelog, etc.\"]]],[1,\"p\",[[0,[],0,\"Like transaction tables, these are strictly CR (create-read). Occasionally, they also contain information about the user who made the change and reason for change.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Unlike previous tables, data from table is never directly exposed to the user. Thus there are no RESTful endpoints. Though they are seldom used for administrative purposes to track user activity and troubleshoot issues. Access for such purposes is usually done using a server-side rendered page or using custom internal APIs which are very specific to the use case.\"]]],[1,\"h2\",[[0,[],0,\"Mapping\"]]],[1,\"p\",[[0,[],0,\"These are only used for creating a relations between two or more tables. Such tables are often called many-to-many mapping tables, though, using appropriate UNIQUE keys, they can be restricted to many-to-one or even one-to-one mapping. They only store foreign keys to related tables. A good example would be assigning multiple tags to multiple articles.\"]]],[1,\"p\",[[0,[],0,\"Based on the behavior of the related tables, mapping tables can be CRUD (create-read-update-delete) or CR (create-read) only. Like log tables, they can also contain additional data for each mapping.\"]]],[10,1],[1,\"p\",[[0,[],0,\"Data from mapping tables is never exposed directly to the end user. It's always indirectly used along with data from content tables and related data is shown in nested fashion. Pure RESTful APIs will usually nest the related data.\"]]]]}","created_at_ts":1546542859903,"created_at":"2019-01-03 19:14:19"},{"id":"5c2e5f441ab0e93d632365c0","post_id":"5c2dfa104614fe2f8b0b13ac","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<table>\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>profile_id</th>\\n            <th>field</th>\\n            <th>value</th>\\n            <th>user_id</th>\\n            <th>comment</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>12</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>verified</td>\\n            <td>23</td>\\n            <td>User marked as verified after validating email.</td>\\n            <td>2019-01-02T15:32:12Z</td>\\n        </tr>\\n        <tr>\\n            <td>28</td>\\n            <td>39</td>\\n            <td>first_name</td>\\n            <td>Tejas</td>\\n            <td>23</td>\\n            <td>User changed profile information.</td>\\n            <td>2019-01-02T17:11:54Z</td>\\n        </tr>\\n        <tr>\\n            <td>31</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>active</td>\\n            <td>23</td>\\n            <td>User activated after completing profile.</td>\\n            <td>2019-01-02T17:13:01Z</td>\\n        </tr>\\n    </tbody>\\n</table>\\n\\n<figcaption>Example: Log table for tracking user profile changes</figcaption>\\n</figure>\"}],[\"html\",{\"html\":\"<table>\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>order_id</th>\\n            <th>sku_id</th>\\n            <th>quantity</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>9</td>\\n            <td>87</td>\\n            <td>12</td>\\n            <td>1</td>\\n            <td>2019-01-02T12:09:35Z</td>\\n        </tr>\\n        <tr>\\n            <td>10</td>\\n            <td>87</td>\\n            <td>5</td>\\n            <td>5</td>\\n            <td>2019-01-02T12:09:58Z</td>\\n        </tr>\\n        <tr>\\n            <td>15</td>\\n            <td>91</td>\\n            <td>12</td>\\n            <td>2</td>\\n            <td>2019-01-02T13:01:19Z</td>\\n        </tr>\\n    </tbody>\\n</table>\"}]],\"markups\":[],\"sections\":[[1,\"h2\",[[0,[],0,\"Content\"]]],[1,\"p\",[[0,[],0,\"These tables are for storing pure content. A really good example would be blog articles. This data is often formatted and showed to the end users over a read-only channel. There is usually a moderator or an editor who can change this data.\"]]],[1,\"p\",[[0,[],0,\"It often has full CRUD (create-read-update-delete) access though certain actions are restricted to certain roles. For example, a blog editor can create, update or even delete an article but the end user can only read it. \"]]],[1,\"p\",[[0,[],0,\"This data can be accessed and controlled with pure RESTful APIs and they usually have a 1:1 mapping with the database actions - POST for create, GET for read, PUT/PATCH for update and DELETE for deleting.\"]]],[1,\"h2\",[[0,[],0,\"Transaction\"]]],[1,\"p\",[[0,[],0,\"These are immutable datasets. Once added, no data can be changed or deleted. These are ideal for storing transactional activities like book keeping, virtual currencies, etc. They also feature a non-serial primary key or unique key (a random string or UUID or equivalent) so that the sequence cannot be predicted.\"]]],[1,\"p\",[[0,[],0,\"It only has CR (create-read) access, though in certain cases, minor updates are allowed which do not drastically affect the transactional data.\"]]],[1,\"p\",[[0,[],0,\"Access to the data is usually access controlled and isolated for users. Users cannot access each others' data and can neither modify their own. Usually RESTful practices are limited because of limited data access.\"]]],[1,\"h2\",[[0,[],0,\"Log\"]]],[1,\"p\",[[0,[],0,\"These tables are used for recording change in data for a given table.  Similar to transaction tables, these are immutable. They denote the history of value a field at a given point in time. Common use cases are value transitions, changelog, etc.\"]]],[1,\"p\",[[0,[],0,\"Like transaction tables, these are strictly CR (create-read). Occasionally, they also contain information about the user who made the change and reason for change.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Unlike previous tables, data from table is never directly exposed to the user. Thus there are no RESTful endpoints. Though they are seldom used for administrative purposes to track user activity and troubleshoot issues. Access for such purposes is usually done using a server-side rendered page or using custom internal APIs which are very specific to the use case.\"]]],[1,\"h2\",[[0,[],0,\"Mapping\"]]],[1,\"p\",[[0,[],0,\"These are only used for creating a relations between two or more tables. Such tables are often called many-to-many mapping tables, though, using appropriate UNIQUE keys, they can be restricted to many-to-one or even one-to-one mapping. They only store foreign keys to related tables. A good example would be assigning multiple tags to multiple articles.\"]]],[1,\"p\",[[0,[],0,\"Based on the behavior of the related tables, mapping tables can be CRUD (create-read-update-delete) or CR (create-read) only. Like log tables, they can also contain additional data for each mapping.\"]]],[10,1],[1,\"p\",[[0,[],0,\"Data from mapping tables is never exposed directly to the end user. It's always indirectly used along with data from content tables and related data is shown in nested fashion. Pure RESTful APIs will usually nest the related data.\"]]]]}","created_at_ts":1546542916240,"created_at":"2019-01-03 19:15:16"},{"id":"5c2e5f4c1ab0e93d632365c1","post_id":"5c2dfa104614fe2f8b0b13ac","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<figure>\\n<table>\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>profile_id</th>\\n            <th>field</th>\\n            <th>value</th>\\n            <th>user_id</th>\\n            <th>comment</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>12</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>verified</td>\\n            <td>23</td>\\n            <td>User marked as verified after validating email.</td>\\n            <td>2019-01-02T15:32:12Z</td>\\n        </tr>\\n        <tr>\\n            <td>28</td>\\n            <td>39</td>\\n            <td>first_name</td>\\n            <td>Tejas</td>\\n            <td>23</td>\\n            <td>User changed profile information.</td>\\n            <td>2019-01-02T17:11:54Z</td>\\n        </tr>\\n        <tr>\\n            <td>31</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>active</td>\\n            <td>23</td>\\n            <td>User activated after completing profile.</td>\\n            <td>2019-01-02T17:13:01Z</td>\\n        </tr>\\n    </tbody>\\n</table>\\n\\n<figcaption>Example: Log table for tracking user profile changes</figcaption>\\n</figure>\"}],[\"html\",{\"html\":\"<table>\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>order_id</th>\\n            <th>sku_id</th>\\n            <th>quantity</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>9</td>\\n            <td>87</td>\\n            <td>12</td>\\n            <td>1</td>\\n            <td>2019-01-02T12:09:35Z</td>\\n        </tr>\\n        <tr>\\n            <td>10</td>\\n            <td>87</td>\\n            <td>5</td>\\n            <td>5</td>\\n            <td>2019-01-02T12:09:58Z</td>\\n        </tr>\\n        <tr>\\n            <td>15</td>\\n            <td>91</td>\\n            <td>12</td>\\n            <td>2</td>\\n            <td>2019-01-02T13:01:19Z</td>\\n        </tr>\\n    </tbody>\\n</table>\"}]],\"markups\":[],\"sections\":[[1,\"h2\",[[0,[],0,\"Content\"]]],[1,\"p\",[[0,[],0,\"These tables are for storing pure content. A really good example would be blog articles. This data is often formatted and showed to the end users over a read-only channel. There is usually a moderator or an editor who can change this data.\"]]],[1,\"p\",[[0,[],0,\"It often has full CRUD (create-read-update-delete) access though certain actions are restricted to certain roles. For example, a blog editor can create, update or even delete an article but the end user can only read it. \"]]],[1,\"p\",[[0,[],0,\"This data can be accessed and controlled with pure RESTful APIs and they usually have a 1:1 mapping with the database actions - POST for create, GET for read, PUT/PATCH for update and DELETE for deleting.\"]]],[1,\"h2\",[[0,[],0,\"Transaction\"]]],[1,\"p\",[[0,[],0,\"These are immutable datasets. Once added, no data can be changed or deleted. These are ideal for storing transactional activities like book keeping, virtual currencies, etc. They also feature a non-serial primary key or unique key (a random string or UUID or equivalent) so that the sequence cannot be predicted.\"]]],[1,\"p\",[[0,[],0,\"It only has CR (create-read) access, though in certain cases, minor updates are allowed which do not drastically affect the transactional data.\"]]],[1,\"p\",[[0,[],0,\"Access to the data is usually access controlled and isolated for users. Users cannot access each others' data and can neither modify their own. Usually RESTful practices are limited because of limited data access.\"]]],[1,\"h2\",[[0,[],0,\"Log\"]]],[1,\"p\",[[0,[],0,\"These tables are used for recording change in data for a given table.  Similar to transaction tables, these are immutable. They denote the history of value a field at a given point in time. Common use cases are value transitions, changelog, etc.\"]]],[1,\"p\",[[0,[],0,\"Like transaction tables, these are strictly CR (create-read). Occasionally, they also contain information about the user who made the change and reason for change.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Unlike previous tables, data from table is never directly exposed to the user. Thus there are no RESTful endpoints. Though they are seldom used for administrative purposes to track user activity and troubleshoot issues. Access for such purposes is usually done using a server-side rendered page or using custom internal APIs which are very specific to the use case.\"]]],[1,\"h2\",[[0,[],0,\"Mapping\"]]],[1,\"p\",[[0,[],0,\"These are only used for creating a relations between two or more tables. Such tables are often called many-to-many mapping tables, though, using appropriate UNIQUE keys, they can be restricted to many-to-one or even one-to-one mapping. They only store foreign keys to related tables. A good example would be assigning multiple tags to multiple articles.\"]]],[1,\"p\",[[0,[],0,\"Based on the behavior of the related tables, mapping tables can be CRUD (create-read-update-delete) or CR (create-read) only. Like log tables, they can also contain additional data for each mapping.\"]]],[10,1],[1,\"p\",[[0,[],0,\"Data from mapping tables is never exposed directly to the end user. It's always indirectly used along with data from content tables and related data is shown in nested fashion. Pure RESTful APIs will usually nest the related data.\"]]]]}","created_at_ts":1546542924232,"created_at":"2019-01-03 19:15:24"},{"id":"5c2e5fd61ab0e93d632365c2","post_id":"5c2dfa104614fe2f8b0b13ac","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<figure>\\n<table>\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>profile_id</th>\\n            <th>field</th>\\n            <th>value</th>\\n            <th>user_id</th>\\n            <th>comment</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>12</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>verified</td>\\n            <td>23</td>\\n            <td>User marked as verified after validating email.</td>\\n            <td>2019-01-02T15:32:12Z</td>\\n        </tr>\\n        <tr>\\n            <td>28</td>\\n            <td>39</td>\\n            <td>first_name</td>\\n            <td>Tejas</td>\\n            <td>23</td>\\n            <td>User changed profile information.</td>\\n            <td>2019-01-02T17:11:54Z</td>\\n        </tr>\\n        <tr>\\n            <td>31</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>active</td>\\n            <td>23</td>\\n            <td>User activated after completing profile.</td>\\n            <td>2019-01-02T17:13:01Z</td>\\n        </tr>\\n    </tbody>\\n</table>\\n\\n<figcaption>Example: Log table for tracking user profile changes</figcaption>\\n</figure>\"}],[\"html\",{\"html\":\"<figure>\\n<table>\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>order_id</th>\\n            <th>sku_id</th>\\n            <th>quantity</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>9</td>\\n            <td>87</td>\\n            <td>12</td>\\n            <td>1</td>\\n            <td>2019-01-02T12:09:35Z</td>\\n        </tr>\\n        <tr>\\n            <td>10</td>\\n            <td>87</td>\\n            <td>5</td>\\n            <td>5</td>\\n            <td>2019-01-02T12:09:58Z</td>\\n        </tr>\\n        <tr>\\n            <td>15</td>\\n            <td>91</td>\\n            <td>12</td>\\n            <td>2</td>\\n            <td>2019-01-02T13:01:19Z</td>\\n        </tr>\\n    </tbody>\\n</table>\\n    <figcaption></figcaption>\\n</figure>\"}]],\"markups\":[],\"sections\":[[1,\"h2\",[[0,[],0,\"Content\"]]],[1,\"p\",[[0,[],0,\"These tables are for storing pure content. A really good example would be blog articles. This data is often formatted and showed to the end users over a read-only channel. There is usually a moderator or an editor who can change this data.\"]]],[1,\"p\",[[0,[],0,\"It often has full CRUD (create-read-update-delete) access though certain actions are restricted to certain roles. For example, a blog editor can create, update or even delete an article but the end user can only read it. \"]]],[1,\"p\",[[0,[],0,\"This data can be accessed and controlled with pure RESTful APIs and they usually have a 1:1 mapping with the database actions - POST for create, GET for read, PUT/PATCH for update and DELETE for deleting.\"]]],[1,\"h2\",[[0,[],0,\"Transaction\"]]],[1,\"p\",[[0,[],0,\"These are immutable datasets. Once added, no data can be changed or deleted. These are ideal for storing transactional activities like book keeping, virtual currencies, etc. They also feature a non-serial primary key or unique key (a random string or UUID or equivalent) so that the sequence cannot be predicted.\"]]],[1,\"p\",[[0,[],0,\"It only has CR (create-read) access, though in certain cases, minor updates are allowed which do not drastically affect the transactional data.\"]]],[1,\"p\",[[0,[],0,\"Access to the data is usually access controlled and isolated for users. Users cannot access each others' data and can neither modify their own. Usually RESTful practices are limited because of limited data access.\"]]],[1,\"h2\",[[0,[],0,\"Log\"]]],[1,\"p\",[[0,[],0,\"These tables are used for recording change in data for a given table.  Similar to transaction tables, these are immutable. They denote the history of value a field at a given point in time. Common use cases are value transitions, changelog, etc.\"]]],[1,\"p\",[[0,[],0,\"Like transaction tables, these are strictly CR (create-read). Occasionally, they also contain information about the user who made the change and reason for change.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Unlike previous tables, data from table is never directly exposed to the user. Thus there are no RESTful endpoints. Though they are seldom used for administrative purposes to track user activity and troubleshoot issues. Access for such purposes is usually done using a server-side rendered page or using custom internal APIs which are very specific to the use case.\"]]],[1,\"h2\",[[0,[],0,\"Mapping\"]]],[1,\"p\",[[0,[],0,\"These are only used for creating a relations between two or more tables. Such tables are often called many-to-many mapping tables, though, using appropriate UNIQUE keys, they can be restricted to many-to-one or even one-to-one mapping. They only store foreign keys to related tables. A good example would be assigning multiple tags to multiple articles.\"]]],[1,\"p\",[[0,[],0,\"Based on the behavior of the related tables, mapping tables can be CRUD (create-read-update-delete) or CR (create-read) only. Like log tables, they can also contain additional data for each mapping.\"]]],[10,1],[1,\"p\",[[0,[],0,\"Data from mapping tables is never exposed directly to the end user. It's always indirectly used along with data from content tables and related data is shown in nested fashion. Pure RESTful APIs will usually nest the related data.\"]]]]}","created_at_ts":1546543062723,"created_at":"2019-01-03 19:17:42"},{"id":"5c2e5fea1ab0e93d632365c3","post_id":"5c2dfa104614fe2f8b0b13ac","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<figure>\\n<table>\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>profile_id</th>\\n            <th>field</th>\\n            <th>value</th>\\n            <th>user_id</th>\\n            <th>comment</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>12</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>verified</td>\\n            <td>23</td>\\n            <td>User marked as verified after validating email.</td>\\n            <td>2019-01-02T15:32:12Z</td>\\n        </tr>\\n        <tr>\\n            <td>28</td>\\n            <td>39</td>\\n            <td>first_name</td>\\n            <td>Tejas</td>\\n            <td>23</td>\\n            <td>User changed profile information.</td>\\n            <td>2019-01-02T17:11:54Z</td>\\n        </tr>\\n        <tr>\\n            <td>31</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>active</td>\\n            <td>23</td>\\n            <td>User activated after completing profile.</td>\\n            <td>2019-01-02T17:13:01Z</td>\\n        </tr>\\n    </tbody>\\n</table>\\n\\n<figcaption>Example: Log table for tracking user profile changes</figcaption>\\n</figure>\"}],[\"html\",{\"html\":\"<figure>\\n<table>\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>order_id</th>\\n            <th>sku_id</th>\\n            <th>quantity</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>9</td>\\n            <td>87</td>\\n            <td>12</td>\\n            <td>1</td>\\n            <td>2019-01-02T12:09:35Z</td>\\n        </tr>\\n        <tr>\\n            <td>10</td>\\n            <td>87</td>\\n            <td>5</td>\\n            <td>5</td>\\n            <td>2019-01-02T12:09:58Z</td>\\n        </tr>\\n        <tr>\\n            <td>15</td>\\n            <td>91</td>\\n            <td>12</td>\\n            <td>2</td>\\n            <td>2019-01-02T13:01:19Z</td>\\n        </tr>\\n    </tbody>\\n</table>\\n<figcaption>Example: Mapping table between orders and SKUs and their quantities</figcaption>\\n</figure>\"}]],\"markups\":[],\"sections\":[[1,\"h2\",[[0,[],0,\"Content\"]]],[1,\"p\",[[0,[],0,\"These tables are for storing pure content. A really good example would be blog articles. This data is often formatted and showed to the end users over a read-only channel. There is usually a moderator or an editor who can change this data.\"]]],[1,\"p\",[[0,[],0,\"It often has full CRUD (create-read-update-delete) access though certain actions are restricted to certain roles. For example, a blog editor can create, update or even delete an article but the end user can only read it. \"]]],[1,\"p\",[[0,[],0,\"This data can be accessed and controlled with pure RESTful APIs and they usually have a 1:1 mapping with the database actions - POST for create, GET for read, PUT/PATCH for update and DELETE for deleting.\"]]],[1,\"h2\",[[0,[],0,\"Transaction\"]]],[1,\"p\",[[0,[],0,\"These are immutable datasets. Once added, no data can be changed or deleted. These are ideal for storing transactional activities like book keeping, virtual currencies, etc. They also feature a non-serial primary key or unique key (a random string or UUID or equivalent) so that the sequence cannot be predicted.\"]]],[1,\"p\",[[0,[],0,\"It only has CR (create-read) access, though in certain cases, minor updates are allowed which do not drastically affect the transactional data.\"]]],[1,\"p\",[[0,[],0,\"Access to the data is usually access controlled and isolated for users. Users cannot access each others' data and can neither modify their own. Usually RESTful practices are limited because of limited data access.\"]]],[1,\"h2\",[[0,[],0,\"Log\"]]],[1,\"p\",[[0,[],0,\"These tables are used for recording change in data for a given table.  Similar to transaction tables, these are immutable. They denote the history of value a field at a given point in time. Common use cases are value transitions, changelog, etc.\"]]],[1,\"p\",[[0,[],0,\"Like transaction tables, these are strictly CR (create-read). Occasionally, they also contain information about the user who made the change and reason for change.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Unlike previous tables, data from table is never directly exposed to the user. Thus there are no RESTful endpoints. Though they are seldom used for administrative purposes to track user activity and troubleshoot issues. Access for such purposes is usually done using a server-side rendered page or using custom internal APIs which are very specific to the use case.\"]]],[1,\"h2\",[[0,[],0,\"Mapping\"]]],[1,\"p\",[[0,[],0,\"These are only used for creating a relations between two or more tables. Such tables are often called many-to-many mapping tables, though, using appropriate UNIQUE keys, they can be restricted to many-to-one or even one-to-one mapping. They only store foreign keys to related tables. A good example would be assigning multiple tags to multiple articles.\"]]],[1,\"p\",[[0,[],0,\"Based on the behavior of the related tables, mapping tables can be CRUD (create-read-update-delete) or CR (create-read) only. Like log tables, they can also contain additional data for each mapping.\"]]],[10,1],[1,\"p\",[[0,[],0,\"Data from mapping tables is never exposed directly to the end user. It's always indirectly used along with data from content tables and related data is shown in nested fashion. Pure RESTful APIs will usually nest the related data.\"]]]]}","created_at_ts":1546543082125,"created_at":"2019-01-03 19:18:02"},{"id":"5c2e62c63461743e5bd7fec0","post_id":"5c2dfa104614fe2f8b0b13ac","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<figure>\\n<table>\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>profile_id</th>\\n            <th>field</th>\\n            <th>value</th>\\n            <th>user_id</th>\\n            <th>comment</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>12</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>verified</td>\\n            <td>23</td>\\n            <td>User marked as verified after validating email.</td>\\n            <td>2019-01-02T15:32:12Z</td>\\n        </tr>\\n        <tr>\\n            <td>28</td>\\n            <td>39</td>\\n            <td>first_name</td>\\n            <td>Tejas</td>\\n            <td>23</td>\\n            <td>User changed profile information.</td>\\n            <td>2019-01-02T17:11:54Z</td>\\n        </tr>\\n        <tr>\\n            <td>31</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>active</td>\\n            <td>23</td>\\n            <td>User activated after completing profile.</td>\\n            <td>2019-01-02T17:13:01Z</td>\\n        </tr>\\n    </tbody>\\n</table>\\n\\n<figcaption>Example: Log table for tracking user profile changes</figcaption>\\n</figure>\"}],[\"html\",{\"html\":\"<figure>\\n<table class=\\\"monospace\\\">\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>order_id</th>\\n            <th>sku_id</th>\\n            <th>quantity</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>9</td>\\n            <td>87</td>\\n            <td>12</td>\\n            <td>1</td>\\n            <td>2019-01-02T12:09:35Z</td>\\n        </tr>\\n        <tr>\\n            <td>10</td>\\n            <td>87</td>\\n            <td>5</td>\\n            <td>5</td>\\n            <td>2019-01-02T12:09:58Z</td>\\n        </tr>\\n        <tr>\\n            <td>15</td>\\n            <td>91</td>\\n            <td>12</td>\\n            <td>2</td>\\n            <td>2019-01-02T13:01:19Z</td>\\n        </tr>\\n    </tbody>\\n</table>\\n<figcaption>Example: Mapping table between orders and SKUs and their quantities</figcaption>\\n</figure>\"}]],\"markups\":[],\"sections\":[[1,\"h2\",[[0,[],0,\"Content\"]]],[1,\"p\",[[0,[],0,\"These tables are for storing pure content. A really good example would be blog articles. This data is often formatted and showed to the end users over a read-only channel. There is usually a moderator or an editor who can change this data.\"]]],[1,\"p\",[[0,[],0,\"It often has full CRUD (create-read-update-delete) access though certain actions are restricted to certain roles. For example, a blog editor can create, update or even delete an article but the end user can only read it. \"]]],[1,\"p\",[[0,[],0,\"This data can be accessed and controlled with pure RESTful APIs and they usually have a 1:1 mapping with the database actions - POST for create, GET for read, PUT/PATCH for update and DELETE for deleting.\"]]],[1,\"h2\",[[0,[],0,\"Transaction\"]]],[1,\"p\",[[0,[],0,\"These are immutable datasets. Once added, no data can be changed or deleted. These are ideal for storing transactional activities like book keeping, virtual currencies, etc. They also feature a non-serial primary key or unique key (a random string or UUID or equivalent) so that the sequence cannot be predicted.\"]]],[1,\"p\",[[0,[],0,\"It only has CR (create-read) access, though in certain cases, minor updates are allowed which do not drastically affect the transactional data.\"]]],[1,\"p\",[[0,[],0,\"Access to the data is usually access controlled and isolated for users. Users cannot access each others' data and can neither modify their own. Usually RESTful practices are limited because of limited data access.\"]]],[1,\"h2\",[[0,[],0,\"Log\"]]],[1,\"p\",[[0,[],0,\"These tables are used for recording change in data for a given table.  Similar to transaction tables, these are immutable. They denote the history of value a field at a given point in time. Common use cases are value transitions, changelog, etc.\"]]],[1,\"p\",[[0,[],0,\"Like transaction tables, these are strictly CR (create-read). Occasionally, they also contain information about the user who made the change and reason for change.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Unlike previous tables, data from table is never directly exposed to the user. Thus there are no RESTful endpoints. Though they are seldom used for administrative purposes to track user activity and troubleshoot issues. Access for such purposes is usually done using a server-side rendered page or using custom internal APIs which are very specific to the use case.\"]]],[1,\"h2\",[[0,[],0,\"Mapping\"]]],[1,\"p\",[[0,[],0,\"These are only used for creating a relations between two or more tables. Such tables are often called many-to-many mapping tables, though, using appropriate UNIQUE keys, they can be restricted to many-to-one or even one-to-one mapping. They only store foreign keys to related tables. A good example would be assigning multiple tags to multiple articles.\"]]],[1,\"p\",[[0,[],0,\"Based on the behavior of the related tables, mapping tables can be CRUD (create-read-update-delete) or CR (create-read) only. Like log tables, they can also contain additional data for each mapping.\"]]],[10,1],[1,\"p\",[[0,[],0,\"Data from mapping tables is never exposed directly to the end user. It's always indirectly used along with data from content tables and related data is shown in nested fashion. Pure RESTful APIs will usually nest the related data.\"]]]]}","created_at_ts":1546543814380,"created_at":"2019-01-03 19:30:14"},{"id":"5c2e62d23461743e5bd7fec1","post_id":"5c2dfa104614fe2f8b0b13ac","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<figure>\\n<table class=\\\"monospace\\\">\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>profile_id</th>\\n            <th>field</th>\\n            <th>value</th>\\n            <th>user_id</th>\\n            <th>comment</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>12</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>verified</td>\\n            <td>23</td>\\n            <td>User marked as verified after validating email.</td>\\n            <td>2019-01-02T15:32:12Z</td>\\n        </tr>\\n        <tr>\\n            <td>28</td>\\n            <td>39</td>\\n            <td>first_name</td>\\n            <td>Tejas</td>\\n            <td>23</td>\\n            <td>User changed profile information.</td>\\n            <td>2019-01-02T17:11:54Z</td>\\n        </tr>\\n        <tr>\\n            <td>31</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>active</td>\\n            <td>23</td>\\n            <td>User activated after completing profile.</td>\\n            <td>2019-01-02T17:13:01Z</td>\\n        </tr>\\n    </tbody>\\n</table>\\n\\n<figcaption>Example: Log table for tracking user profile changes</figcaption>\\n</figure>\"}],[\"html\",{\"html\":\"<figure>\\n<table class=\\\"monospace\\\">\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>order_id</th>\\n            <th>sku_id</th>\\n            <th>quantity</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>9</td>\\n            <td>87</td>\\n            <td>12</td>\\n            <td>1</td>\\n            <td>2019-01-02T12:09:35Z</td>\\n        </tr>\\n        <tr>\\n            <td>10</td>\\n            <td>87</td>\\n            <td>5</td>\\n            <td>5</td>\\n            <td>2019-01-02T12:09:58Z</td>\\n        </tr>\\n        <tr>\\n            <td>15</td>\\n            <td>91</td>\\n            <td>12</td>\\n            <td>2</td>\\n            <td>2019-01-02T13:01:19Z</td>\\n        </tr>\\n    </tbody>\\n</table>\\n<figcaption>Example: Mapping table between orders and SKUs and their quantities</figcaption>\\n</figure>\"}]],\"markups\":[],\"sections\":[[1,\"h2\",[[0,[],0,\"Content\"]]],[1,\"p\",[[0,[],0,\"These tables are for storing pure content. A really good example would be blog articles. This data is often formatted and showed to the end users over a read-only channel. There is usually a moderator or an editor who can change this data.\"]]],[1,\"p\",[[0,[],0,\"It often has full CRUD (create-read-update-delete) access though certain actions are restricted to certain roles. For example, a blog editor can create, update or even delete an article but the end user can only read it. \"]]],[1,\"p\",[[0,[],0,\"This data can be accessed and controlled with pure RESTful APIs and they usually have a 1:1 mapping with the database actions - POST for create, GET for read, PUT/PATCH for update and DELETE for deleting.\"]]],[1,\"h2\",[[0,[],0,\"Transaction\"]]],[1,\"p\",[[0,[],0,\"These are immutable datasets. Once added, no data can be changed or deleted. These are ideal for storing transactional activities like book keeping, virtual currencies, etc. They also feature a non-serial primary key or unique key (a random string or UUID or equivalent) so that the sequence cannot be predicted.\"]]],[1,\"p\",[[0,[],0,\"It only has CR (create-read) access, though in certain cases, minor updates are allowed which do not drastically affect the transactional data.\"]]],[1,\"p\",[[0,[],0,\"Access to the data is usually access controlled and isolated for users. Users cannot access each others' data and can neither modify their own. Usually RESTful practices are limited because of limited data access.\"]]],[1,\"h2\",[[0,[],0,\"Log\"]]],[1,\"p\",[[0,[],0,\"These tables are used for recording change in data for a given table.  Similar to transaction tables, these are immutable. They denote the history of value a field at a given point in time. Common use cases are value transitions, changelog, etc.\"]]],[1,\"p\",[[0,[],0,\"Like transaction tables, these are strictly CR (create-read). Occasionally, they also contain information about the user who made the change and reason for change.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Unlike previous tables, data from table is never directly exposed to the user. Thus there are no RESTful endpoints. Though they are seldom used for administrative purposes to track user activity and troubleshoot issues. Access for such purposes is usually done using a server-side rendered page or using custom internal APIs which are very specific to the use case.\"]]],[1,\"h2\",[[0,[],0,\"Mapping\"]]],[1,\"p\",[[0,[],0,\"These are only used for creating a relations between two or more tables. Such tables are often called many-to-many mapping tables, though, using appropriate UNIQUE keys, they can be restricted to many-to-one or even one-to-one mapping. They only store foreign keys to related tables. A good example would be assigning multiple tags to multiple articles.\"]]],[1,\"p\",[[0,[],0,\"Based on the behavior of the related tables, mapping tables can be CRUD (create-read-update-delete) or CR (create-read) only. Like log tables, they can also contain additional data for each mapping.\"]]],[10,1],[1,\"p\",[[0,[],0,\"Data from mapping tables is never exposed directly to the end user. It's always indirectly used along with data from content tables and related data is shown in nested fashion. Pure RESTful APIs will usually nest the related data.\"]]]]}","created_at_ts":1546543826582,"created_at":"2019-01-03 19:30:26"},{"id":"5c308dacd149624e397d291f","post_id":"5c2dfa104614fe2f8b0b13ac","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<figure>\\n<table class=\\\"monospace\\\">\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>profile_id</th>\\n            <th>field</th>\\n            <th>value</th>\\n            <th>user_id</th>\\n            <th>comment</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>12</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>verified</td>\\n            <td>23</td>\\n            <td>User marked as verified after validating email.</td>\\n            <td>2019-01-02T15:32:12Z</td>\\n        </tr>\\n        <tr>\\n            <td>28</td>\\n            <td>39</td>\\n            <td>first_name</td>\\n            <td>Tejas</td>\\n            <td>23</td>\\n            <td>User changed profile information.</td>\\n            <td>2019-01-02T17:11:54Z</td>\\n        </tr>\\n        <tr>\\n            <td>31</td>\\n            <td>39</td>\\n            <td>status</td>\\n            <td>active</td>\\n            <td>23</td>\\n            <td>User activated after completing profile.</td>\\n            <td>2019-01-02T17:13:01Z</td>\\n        </tr>\\n    </tbody>\\n</table>\\n\\n<figcaption>Example: Log table for tracking user profile changes</figcaption>\\n</figure>\"}],[\"html\",{\"html\":\"<figure>\\n<table class=\\\"monospace\\\">\\n    <thead>\\n        <tr>\\n            <th>_id</th>\\n            <th>order_id</th>\\n            <th>sku_id</th>\\n            <th>quantity</th>\\n            <th>timestamp</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr>\\n            <td>9</td>\\n            <td>87</td>\\n            <td>12</td>\\n            <td>1</td>\\n            <td>2019-01-02T12:09:35Z</td>\\n        </tr>\\n        <tr>\\n            <td>10</td>\\n            <td>87</td>\\n            <td>5</td>\\n            <td>5</td>\\n            <td>2019-01-02T12:09:58Z</td>\\n        </tr>\\n        <tr>\\n            <td>15</td>\\n            <td>91</td>\\n            <td>12</td>\\n            <td>2</td>\\n            <td>2019-01-02T13:01:19Z</td>\\n        </tr>\\n    </tbody>\\n</table>\\n<figcaption>Example: Mapping table between orders and SKUs and their quantities</figcaption>\\n</figure>\"}]],\"markups\":[],\"sections\":[[1,\"blockquote\",[[0,[],0,\"This article is yet to be finished.\"]]],[1,\"h2\",[[0,[],0,\"Content\"]]],[1,\"p\",[[0,[],0,\"These tables are for storing pure content. A really good example would be blog articles. This data is often formatted and showed to the end users over a read-only channel. There is usually a moderator or an editor who can change this data.\"]]],[1,\"p\",[[0,[],0,\"It often has full CRUD (create-read-update-delete) access though certain actions are restricted to certain roles. For example, a blog editor can create, update or even delete an article but the end user can only read it. \"]]],[1,\"p\",[[0,[],0,\"This data can be accessed and controlled with pure RESTful APIs and they usually have a 1:1 mapping with the database actions - POST for create, GET for read, PUT/PATCH for update and DELETE for deleting.\"]]],[1,\"h2\",[[0,[],0,\"Transaction\"]]],[1,\"p\",[[0,[],0,\"These are immutable datasets. Once added, no data can be changed or deleted. These are ideal for storing transactional activities like book keeping, virtual currencies, etc. They also feature a non-serial primary key or unique key (a random string or UUID or equivalent) so that the sequence cannot be predicted.\"]]],[1,\"p\",[[0,[],0,\"It only has CR (create-read) access, though in certain cases, minor updates are allowed which do not drastically affect the transactional data.\"]]],[1,\"p\",[[0,[],0,\"Access to the data is usually access controlled and isolated for users. Users cannot access each others' data and can neither modify their own. Usually RESTful practices are limited because of limited data access.\"]]],[1,\"h2\",[[0,[],0,\"Log\"]]],[1,\"p\",[[0,[],0,\"These tables are used for recording change in data for a given table.  Similar to transaction tables, these are immutable. They denote the history of value a field at a given point in time. Common use cases are value transitions, changelog, etc.\"]]],[1,\"p\",[[0,[],0,\"Like transaction tables, these are strictly CR (create-read). Occasionally, they also contain information about the user who made the change and reason for change.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Unlike previous tables, data from table is never directly exposed to the user. Thus there are no RESTful endpoints. Though they are seldom used for administrative purposes to track user activity and troubleshoot issues. Access for such purposes is usually done using a server-side rendered page or using custom internal APIs which are very specific to the use case.\"]]],[1,\"h2\",[[0,[],0,\"Mapping\"]]],[1,\"p\",[[0,[],0,\"These are only used for creating a relations between two or more tables. Such tables are often called many-to-many mapping tables, though, using appropriate UNIQUE keys, they can be restricted to many-to-one or even one-to-one mapping. They only store foreign keys to related tables. A good example would be assigning multiple tags to multiple articles.\"]]],[1,\"p\",[[0,[],0,\"Based on the behavior of the related tables, mapping tables can be CRUD (create-read-update-delete) or CR (create-read) only. Like log tables, they can also contain additional data for each mapping.\"]]],[10,1],[1,\"p\",[[0,[],0,\"Data from mapping tables is never exposed directly to the end user. It's always indirectly used along with data from content tables and related data is shown in nested fashion. Pure RESTful APIs will usually nest the related data.\"]]]]}","created_at_ts":1546685868156,"created_at":"2019-01-05 10:57:48"},{"id":"5c4a2bdaf7e7b7692d246ed8","post_id":"5c3229bfd149624e397d2920","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **1** All socket related functions, classes, utilities are in the [`net`](https://nim-lang.org/docs/net.html) package. We could have also used [`nativesockets`](https://nim-lang.org/docs/nativesockets.html) package which is exclusively for sockets. But it handles sockets at very low-level which might just lengthen our code.\\n> **3** Initialize our server socket using [`newSocket`](https://nim-lang.org/docs/net.html#newSocket,Domain,SockType,Protocol). This function also accepts some parameters which we will discuss in-depth later. For now, we are okay leaving it to the default values.\\n> **4-5** Set the socket to listen to new connections on port `5555` and start accepting new connections from other sockets. If [`address` parameter](https://nim-lang.org/docs/net.html#bindAddr,Socket,string) is not mentioned by default, the socket will listen to requests from all IP addresses.\\n> **8** Close our socket server. It is very important to close socket connections if they are no longer required. This is considered a clean way to end TCP connections with proper end-of-connection acknowledgement.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Hint: used config file '/etc/nim.cfg' [Conf]\\n(out)Hint: system [Processing]\\n(out)Hint: server [Processing]\\n(out)Hint: net [Processing]\\n(out)Hint: nativesockets [Processing]\\n(out)Hint: os [Processing]\\n(out)Hint: strutils [Processing]\\n(out)Hint: parseutils [Processing]\\n(out)Hint: math [Processing]\\n(out)Hint: algorithm [Processing]\\n(out)Hint: times [Processing]\\n(out)Hint: posix [Processing]\\n(out)Hint: ospaths [Processing]\\n(out)Hint: options [Processing]\\n(out)Hint: typetraits [Processing]\\n(out)Hint: sets [Processing]\\n(out)Hint: hashes [Processing]\\n(out)CC: server\\n(out)CC: stdlib_system\\n(out)CC: stdlib_net\\n(out)Hint:  [Link]\\n(out)Hint: operation successful (26847 lines compiled; 0.903 sec total; 47.43MiB peakmem; Debug Build) [SuccessX]\\n(out)Hint: /home/tejas/Projects/simple-chat-server/server  [Exec]</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"8-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Similar to the server, we need a socket object. The only difference here is, unlike server, which listens to connections, a client knows the server address and connects to it using the [`connect`](https://nim-lang.org/docs/net.html#connect,Socket,string) method. Thus, a client needs to have the address and port of the server.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"6-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message)\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **7** Once the user sends a message, we'll prompt for another message, sort of how chat applications provide a text box to send a message.\\n> **8-10** Prompt the user for a chat message and using the client socket, [`send`](https://nim-lang.org/docs/net.html#send,Socket,string) it to the server. Also, we are using [`readLine`](https://nim-lang.org/docs/system.html#readLine,File) so that the messsage gets stored only when user presses <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-1\\\" data-language=\\\"server.nim\\\" data-line=\\\"11-18\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recv(10)\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **12** Server will keep listening to new messages from all connected clients.\\n> **13** Read a few characters from the socket.\\n> **15-16** When a socket disconnects, it sends an empty string before disconnection. This can be used as an indication for the server that the client has disconnected. Since we are dealing with only one client, we'll stop receiving additional messages and exit the loop.\\n> **18** Print the received message on the console.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, wor\\n(out)Server: received from client: ldLorem ip\\n(out)Server: received from client: sum dolor \\n(out)Server: received from client: sit amet, \\n(out)Server: received from client: consectetu\\n(out)Server: received from client: r adipisci</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"13\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"If the server and client are still running, kill the processes with <kbd>Ctrl</kbd>+<kbd>C</kbd>. Execute `server.nim` and `client.nim` again.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)server.nim(6)            server\\n(out)net.nim(738)             bindAddr\\n(out)oserr.nim(110)           raiseOSError\\n(out)Error: unhandled exception: Address already in use [OSError]\\n(out)Error: execution of an external program failed: '/home/tejas/Projects/simple-chat-server/server '</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"4\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, world\\n(out)Server: received from client: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola, mundo\\n(out)> What's 1 + 1? Answer is 10 in binary.\\n(out)> </code></pre>\"}],[\"markdown\",{\"markdown\":\"1. Have an infinte loop (`while true`) which will keep our server running.\\n2. Inside the loop, accept new client connections and add those into our client list.\\n3. For each client in the client list, check if there is any data.\\n4. If there is any data, print it out.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"6,10-11,14-37\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **6** Set the socket as non-blocking. We set it on the low-level native socket API.\\n> **11** We need to store our connected clients in a list so that we can iterate over them to get messages.\\n> **13-37** Check if there are any existing connections. If yes, add them to the connected socket list. Then for each connected socket, check whether there are any messages to be read.\\n> **17** Add the connected socket in our clients list.\\n> **19** In non-blocking mode, [`accept`](https://nim-lang.org/docs/net.html#accept,Socket,Socket) throws an `OSError` if there are no pending connections at that moment. We ignore that exception because it's understandable that we won't have any pending connections all the time.\\n> **22** We maintain a list of clients which disconnected so that we remove those from our client list.\\n> **24** Iterate over all the connected clients and receive messages from them one by one.\\n> **26** We set the `timeout` to `1` since [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) call still blocks the code as the default timeout value is `-1`, which means block indefinitely till message is received.\\n> **29** Mark the client for removal if it has disconnected.\\n> **32** If no message is received within the timeout period, [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) throws a `TimeoutError`. Since we are operating in a non-blocking mode now, we shall ignore this error.\\n> **35-37** Remove any client marked for removal from the clients list.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: Hola\\n(out)Server: received from client: Foo\\n(out)Server: received from client: Bar\\n(out)Server: received from client: \\n(out)Server: client disconnected\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> Foo\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola\\n(out)> Bar\\n(out)> ^CTraceback (most recent call last)\\n(out)client.nim(9)            client\\n(out)sysio.nim(185)           readLine\\n(out)sysio.nim(158)           readLine\\n(out)SIGINT: Interrupted by Ctrl-C.</code></pre>\"}],[\"markdown\",{\"markdown\":\"There's a major catch here. Since sending and receiving messages is a simultaneous process, we would need some kinda GUI to handle these tasks asynchronously. Just think of it, suppose you are a client chatting on our server, you wouldn't receive any messages until you input a message because the `stdin.readLine()` will block all the code until the user hits <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client_sending.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\\n<pre data-language=\\\"client_receiving.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  let receivedMessage: string = client.recvLine()\\n  stdout.writeLine(\\\"Message: \\\", receivedMessage)\\n\\nclient.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"30-36\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n        continue\\n\\n      for receivingClient in clients:\\n        if receivingClient == client:\\n          continue\\n\\n        receivingClient.send(message & \\\"\\\\r\\\\L\\\")\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: What are you doing?</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> What are you doing?\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: What are you doing?</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/server-cpu-usage.png\",\"cardWidth\":\"\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"3-4,7,14,18-22,25-27,30-51,55\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\nimport os\\nimport selectors\\n\\nvar server: Socket = newSocket()\\nvar select: Selector[int] = newSelector[int]()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nselect.registerHandle(server.getFd(), {Event.Read}, -1)\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  var results: seq[ReadyKey] = select.select(-1)\\n\\n  for result in results:\\n    if Event.Read in result.events:\\n      if result.fd.SocketHandle == server.getFd():\\n        var client: Socket = new(Socket)\\n        server.accept(client)\\n\\n        client.getFd().setBlocking(false)\\n        select.registerHandle(client.getFd(), {Event.Read}, -1)\\n        clients.add(client)\\n        stdout.writeLine(\\\"Server: client connected\\\")\\n      else:\\n        var sourceClient: Socket = newSocket(result.fd.SocketHandle)\\n        var message = sourceClient.recvLine()\\n\\n        if message == \\\"\\\":\\n          var clientsToRemove: seq[int] = @[]\\n\\n          for index, client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              clientsToRemove.add(index)\\n\\n          for index in clientsToRemove:\\n            var client: Socket = clients[index]\\n            select.unregister(result.fd)\\n            clients.del(index)\\n            stdout.writeLine(\\\"Server: client disconnected\\\")\\n        else:\\n          stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\n          for client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              continue\\n\\n            client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nselect.close()\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Import the packages required for `select` functions. Note that we also imported `os` package. This is because, in Nim v0.18 and lower, `OSErrorCode` is not explicity imported in the `select` library. This is fixed in later versions.\\n> **7** We define our selector. It requires a type too. This would be the type of the data that we will associate in `registerHandle` method.\\n> **14** Register our server for read events. Note that read events on server socket would be incoming socket connections. Since we don't have any data associated with our server, we'll pass data as `-1`.\\n> **18** `select` returns a list of events along with their file descriptors for which the specified event was triggered.\\n> **21** We are only interested in read events.\\n> **22** The result received from `select` method contains the list of `events` that were captured and the file descriptor `fd` for which the event was triggered. Though our `fd` is enough, we compare the underlying socket for that file descriptor. If the one that triggered a read event was our server, it must mean that we recevied an incoming connection from a client.\\n> **26** Since clients are also handled by `select` we'll set them as non-blocking.\\n> **27** Just like our server, listen to read events of our client. Read event on a connected socket indicates that a new message has been arrived waiting to be read.\\n> **30** If the read event was not triggered by server, then it must be client. This means we received a message from a client which we have to broadcast to other clients.\\n> **31** Working with higher-level socket abstractions is easier. So, we convert our low-level socket from file descriptor in the result into a higher-level socket.\\n> **34-45** If a client is disconnected, remove it from clients list and [`unregister`](https://nim-lang.org/docs/selectors.html#unregister,Selector[T],) events for that client.\\n> **50** We could have compared the two objects directly. But since the newly created `sourceClient` object as a copy, it's identity would be different. This would cause an inequality even though the underlying sockets are same.\\n> **55** Like sockets, even select should be closed to signal the kernel that we are no longer listening to any events. This is a good practice to cleanly close everything before shutting down our program.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: select seems to be doing great</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> select seems to be doing great\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: select seems to be doing great</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/low-cpu-server.png\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://nim-lang.org\"]],[\"a\",[\"href\",\"https://nim-lang.org/install.html\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/Editor-Support\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/\"]],[\"a\",[\"href\",\"https://www.techopedia.com/definition/7154/full-duplex-fdx\"]],[\"a\",[\"href\",\"https://realtimeapi.io/hub/http-long-polling/\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/BOSH_(protocol)\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/Comet_(programming)\"]],[\"a\",[\"href\",\"https://www.tutorialspoint.com/unix_sockets/what_is_socket.htm\"]],[\"a\",[\"href\",\"https://www.html5rocks.com/en/tutorials/websockets/basics/\"]],[\"a\",[\"href\",\"https://caniuse.com/#feat=websockets\"]],[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"#server-snippet-1.13\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recv,Socket,int\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recvLine,Socket\"]],[\"a\",[\"href\",\"#server-snippet-2.9-11\"]],[\"a\",[\"href\",\"#server-snippet-2.10\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/nativesockets.html#setBlocking,SocketHandle,bool\"]],[\"a\",[\"href\",\"https://www.linuxjournal.com/content/getting-started-ncurses\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man2/select.2.html\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#registerHandle,Selector[T],,set[Event],T\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#select,Selector[T],int\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Build a simple chat server using nothing except sockets in Nim which pushes messages sent by any client to all other connected clients.\"]]],[1,\"p\",[[0,[],0,\"Since I'm at home now, on a break, not really doing anything, I decided to learn this new programming language called \"],[0,[0],1,\"Nim\"],[0,[],0,\" which is a perfect fusion between the elegance of Python and performance of C. What's better way to start with a language than actually creating something meaningful? So, I decided to not only create a simple chat server, but also write a step-by-step tutorial about it.\"]]],[1,\"h1\",[[0,[],0,\"Prerequisites\"]]],[3,\"ul\",[[[0,[],0,\"Install Nim compiler. You can get the download links or installation commands from their \"],[0,[1],1,\"installation\"],[0,[],0,\" page. The compiler version in this tutorial is 0.18.0, though newer versions should not have any issue.\"]],[[0,[],0,\"Get Nim plugins for your editor. Again you can refer to the \"],[0,[2],1,\"editor plugins page\"],[0,[],0,\" on their \"],[0,[3],1,\"GitHub\"],[0,[],0,\" \"],[0,[4],1,\"wiki\"],[0,[],0,\".\"]]]],[1,\"h1\",[[0,[],0,\"Problem statement\"]]],[1,\"blockquote\",[[0,[],0,\"Our chat server will be a single room (channel) chat where anyone can talk with everyone. When a user types in a message, it is sent to all other users connected to the chat server.\"]]],[1,\"p\",[[0,[],0,\"In any chat application, the core responsibility of a server is just to act as a relay and send messages from one client to the other. The server should be sufficiently fast enough to accept newer clients who join, read messages from the clients, broadcast those messages to all other clients, without showing any noticeable delay for any of the clients. This would truly make it an instant messaging platform.\"]]],[1,\"h1\",[[0,[],0,\"I. Plan\"]]],[1,\"p\",[[0,[],0,\"We need a \"],[0,[5],1,\"full duplex\"],[0,[],0,\" link between the server and the client so that messages can be sent and received at the same time. Of all the various methods like \"],[0,[6],1,\"long-polling\"],[0,[],0,\", \"],[0,[7],1,\"BOSH\"],[0,[],0,\", \"],[0,[8],1,\"comet\"],[0,[],0,\", my recommendation is to use \"],[0,[9],1,\"sockets\"],[0,[],0,\" (\"],[0,[10],1,\"web sockets\"],[0,[],0,\" for \"],[0,[11],1,\"browsers\"],[0,[],0,\"). They are truly bi-directional, light-weight and efficient for such use cases.\"]]],[3,\"ol\",[[[0,[],0,\"Our server would act as a socket server. \"]],[[0,[],0,\"It would bind to a specific port and IP address and listen for new socket connections.\"]],[[0,[],0,\"For every socket connected, it would add it to it's active socket connections list.\"]],[[0,[],0,\"When any connected socket sends a message to the server, the server will send it to all the sockets in the active socket connections list (except the one who sent it).\"]],[[0,[],0,\"If a connected socket closes connection, the server will remove it from the active list.\"]]]],[1,\"h1\",[[0,[],0,\"II. Getting started\"]]],[1,\"p\",[[0,[],0,\"Create a directory in your projects folder (or wherever you want) called \"],[0,[12],1,\"simple-chat-server\"],[0,[],0,\". You might want to open this directory in your code editor. \"],[0,[13],1,\"All path references here on will be relative to this directory.\"]]],[1,\"p\",[[0,[],0,\"Create a file called \"],[0,[12],1,\"server.nim\"],[0,[],0,\". This would be our core server file. To compile and run the code in this file, we will use \"],[0,[12],1,\"nim compile --run server.nim\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"We'll create a simple socket which will listen to new socket connections on port \"],[0,[12],1,\"5555\"],[0,[],0,\" and then close it.\"]]],[10,0],[10,1],[1,\"p\",[[0,[],0,\"To run the above code, we need to compile it first and then execute the binary. Fortunately, the Nim compiler can do both in a single command by specifying the \"],[0,[12],1,\"--run\"],[0,[],0,\" or \"],[0,[12],1,\"-r\"],[0,[],0,\" argument.\"]]],[1,\"p\",[[0,[],0,\"The compiler pulls all the required packages along with \"],[0,[12],1,\"server.nim\"],[0,[],0,\", transpiles them into C, links the libraries and creates an executable binary file with the same name as our file sans the file extension (in our case it becomes \"],[0,[12],1,\"server\"],[0,[],0,\") in the root of the project directory.\"]]],[10,2],[1,\"p\",[[0,[],0,\"The code ran but it didn't produce any output, except for compiler messages (we will be omitting compiler messages hereon). The server created the socket, listened for incoming connections and closed the socket connection.\"]]],[1,\"p\",[[0,[],0,\"Now we'll make the server wait until it receives new connections.\"]]],[10,3],[10,4],[1,\"p\",[[0,[],0,\"Our server is now actively listening for connections from clients. But… it's kinda stuck there because the server is waiting for a client to connect. We'll have to create one now. \"]]],[1,\"p\",[[0,[],0,\"Create a new file called \"],[0,[12],1,\"client.nim\"],[0,[],0,\". We'll use socket as a client and connect to the server.\"]]],[10,5],[10,6],[1,\"p\",[[0,[],0,\"Execute \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and at the same time, in a new terminal window/tab, execute \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,7],[1,\"p\",[[0,[],0,\"The server started and waited for connections. The moment we started the client, it connected to our socket server on the specified address. Server received this connection and assigned the client to the \"],[0,[12],1,\"client\"],[0,[],0,\" variable, and closed the socket.\"]]],[1,\"p\",[[0,[],0,\"This was a barebones socket server and client. We have to add the real magic - sending and receiving messages.\"]]],[1,\"h1\",[[0,[],0,\"III. Sending and receiving messages\"]]],[1,\"p\",[[0,[],0,\"A socket on an OS is a file descriptor (layman: just a file). When we say that a socket received some data, it actually signifies that some data was written on that file descriptor.\"]]],[1,\"p\",[[0,[],0,\"We have built a server which accepts socket connection and a client which connects to the server. Now, we'll dive into the actual communication between client and server.\"]]],[1,\"p\",[[0,[],0,\"On the client side, we'll prompt user to enter the message to be sent and then send this message over to the server.\"]]],[10,8],[10,9],[1,\"p\",[[0,[],0,\"On the server side, we need to listen to new messages from client. We'll also print the messages received from the client on the console.\"]]],[10,10],[10,11],[1,\"p\",[[0,[],0,\"Let's execute both \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" in two different terminal tabs/windows. Note that I have used \"],[0,[12],1,\"nim c -r\"],[0,[],0,\" which is a shorthand for \"],[0,[12],1,\"nim compile --run\"],[0,[],0,\".\"]]],[10,12],[1,\"p\",[[0,[],0,\"Something's gone horribly wrong here. Not only our client messages are truncated, but they are also mingled with other messages. We sent \"],[0,[14],1,\"Hello, world\"],[0,[],0,\" and \"],[0,[14],1,\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"],[0,[],0,\" as two different messages, but on the server side we're getting them in sort of mingled fashion. Also, our second message is incomplete.\"]]],[1,\"p\",[[0,[],0,\"The culprit here is line \"],[0,[15],1,\"13\"],[0,[],0,\". We specified that we'll only accept 10 characters from the socket. Also, until socket does not have at least 10 characters in its buffer, the \"],[0,[12,16],2,\"recv\"],[0,[],0,\" function will keep blocking indefinitely. The socket will keep reading messages until it has reached that count in its buffer and only then it will return the data. We can do the following,\"]]],[3,\"ol\",[[[0,[],0,\"We'll use some delimiting character. We'll read a very small amount of data from the socket and scan all characters in it and store it in our own buffer. If we encounter the delimiting character while scanning, we'll stop there, dump whatever we read so far in the buffer and return the buffer data.\"]],[[0,[],0,\"We can also use the \"],[0,[12],1,\"timeout\"],[0,[],0,\" parameter in the \"],[0,[12,16],2,\"recv\"],[0,[],0,\". By default, the timeout value is \"],[0,[12],1,\"-1\"],[0,[],0,\", which means we will wait indefinitely until there is enough data in the socket. We can set it to a small amount so that we don't wait indefinitely for new messages.\"]]]],[1,\"p\",[[0,[],0,\"A much better solution here would be to use the \"],[0,[12,17],2,\"recvLine\"],[0,[],0,\" method. It handles the complexity of handling the delimited character for us. It uses \"],[0,[12],1,\"\\\\r\\\\L\"],[0,[],0,\" as the delimiter. This means, on the client side, for each message we send, we would also need to append this delimiter. Let's make the changes accordingly.\"]]],[10,13],[10,14],[10,15],[10,16],[1,\"p\",[[0,[],0,\"If you're getting the above error, it's an indication that the port on which our server listens is being reserved for some reason. It happens when some process which is listening on that port is still running. Though in our case, even though we stopped the server, it's still giving us this error. The reason here is something called as \"],[0,[14],1,\"Linger Time\"],[0,[],0,\". When a socket is closed (especially TCP socket), some data which is marked to be sent, still exists in the socket's send buffer. Unless the buffer is emptied or a timeout period (usually 30 seconds) is passed, the system reserves the port.\"]]],[1,\"p\",[[0,[],0,\"To fix this, we use the \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of sockets. If a socket is created with this option enabled, instead of throwing an error, it checks whether a socket which is listening on the same port is in lingering state. If it is, the socket will use the same address with an assumption that the earlier socket will release the port soon. In Nim, we have the \"],[0,[12],1,\"OptReuseAddr\"],[0,[],0,\" option which can be set as \"],[0,[12],1,\"true\"],[0,[],0,\" to enable \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of the socket.\"]]],[10,17],[1,\"p\",[[0,[],0,\"Let's run the server and clients again.\"]]],[10,18],[1,\"p\",[[0,[],0,\"As you can see now, the messages are no longer truncated and they are received in the same manner as sent by the client.\"]]],[1,\"p\",[[0,[],0,\"Now that we have spawned our basic server which accepts messages from a client, let's spawn another client and see what happens. Don't kill the currently running \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" and instead run \"],[0,[12],1,\"client.nim\"],[0,[],0,\" again in a new tab/terminal and send a few messages.\"]]],[10,19],[1,\"p\",[[0,[],0,\"If you check the tab/terminal running our server, you wouldn't find these messages at all. The server did not receive any message at all from our new client. Can you identify the problem?\"]]],[1,\"p\",[[0,[],0,\"Notice the lines \"],[0,[18],1,\"9-11\"],[0,[],0,\", where we wait and accept connection from a client. The moment a client connects, we never again accept and listen to data from new clients. As soon as we get a client, we just listen to new data from that client. What we can do is, as we listen to new data from one client, we'll also accept new connections from other clients. Our flow would go like this, \"]]],[10,20],[1,\"p\",[[0,[],0,\"However, there is a slight problem in step 2. In our server socket, as seen here, the server will block the program flow while it is listening for new clients since \"],[0,[12,19],2,\"server.accept()\"],[0,[],0,\" is a blocking function. Thus our messages will only be read once a client connects to the server. This is not even an acceptable case for our chat server.\"]]],[1,\"p\",[[0,[],0,\"Fortunately, sockets have an option to run in non-blocking mode. This means, our \"],[0,[12],1,\"accept()\"],[0,[],0,\" and \"],[0,[12],1,\"recv()\"],[0,[],0,\" functions will no longer block the code. If they have anything meaningful to return (like an incoming socket connection or a message), they will return that and continue execution. Otherwise, they will throw an error. Which means, we have to keep checking for new connections or messages and also handle the error in case we don't get any. \"]]],[1,\"p\",[[0,[],0,\"In Nim, we enable non-blocking mode using the \"],[0,[12,20],2,\"setBlocking()\"],[0,[],0,\" function of the underlying native socket. We'll also store all our connected sockets in a list so that we can iterate over them and receive messages from each of them. We'll do both, accept new connections and receive data from sockets in a single infinite loop, so that we keep accepting new connections while we receive messages from existing ones. Let's give this a try.\"]]],[10,21],[10,22],[1,\"p\",[[0,[],0,\"Let's execute our server now with multiple clients.\"]]],[10,23],[1,\"p\",[[0,[],0,\"Yay! We have it now. Our server accepts and receives messages from multiple clients. We have also managed client disconnections. What our server should do now is send messages from one client to other clients, which a chat server should do. Let's do it.\"]]],[10,24],[1,\"p\",[[0,[],0,\"We can build a small GUI or use \"],[0,[21],1,\"ncurses\"],[0,[],0,\" to do that interactively in terminal. Since both of these are outside the scope of this tutorial, we'll make a hack for now. We'll create two different types of clients - one for sending messages and one for receiving. We call them \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" respectively. \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" is exactly same as our \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,25],[1,\"p\",[[0,[],0,\"We would need some minor changes in our \"],[0,[12],1,\"server.nim\"],[0,[],0,\". Once the server receives a message, it will send it to all connected clients, except the one who sent the message.\"]]],[10,26],[1,\"p\",[[0,[],0,\"Open three terminals - one for \"],[0,[12],1,\"server.nim\"],[0,[],0,\", one for \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and one for \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" - and execute the respective files. Try sending some messages from sending client and see if you get those in the receiving client.\"]]],[10,27],[1,\"p\",[[0,[],0,\"You can open multiple terminals with \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and send messages to one another. You would observer that all receiving clients receive messages from all sending clients. This is because our server is current broadcasting all messages to everyone. We can limit this behavior, but we can skip that for now.\"]]],[1,\"p\",[[0,[],0,\"With this, you have completed a simple chat server with somewhat hacky clients (we'll fix that later). However, if you're working on a laptop, you would have noticed the noise of your CPU fan every time you run the server. If you're curious enough, check the output of \"],[0,[12],1,\"top\"],[0,[],0,\" command and you'll notice that the server process is taking up some chunk of CPU.\"]]],[10,28],[1,\"p\",[[0,[],0,\"It seems our code needs some fixing. Indeed it does. The way we are handling new connections and incoming messages on our server is very inefficient. We are persistently asking the socket for new connection and a new message, that too in an infinite loop. If socket was an actual person, it would mean as if we are pestering him every now and then for new information.\"]]],[1,\"p\",[[0,[],0,\"We have a solution for this. We'll make use of something that is core of lot of chat servers and surprisingly available on all platforms - \"],[0,[12,22],2,\"select\"],[0,[],0,\".\"]]],[1,\"h1\",[[0,[],0,\"IV. Using \"],[0,[12],1,\"select\"],[0,[],0,\" for optimization\"]]],[1,\"p\",[[0,[],0,\"Of all the amazing things that happened in Unix world, one was \"],[0,[12],1,\"select\"],[0,[],0,\". Originally appeared in BSD, \"],[0,[12],1,\"select\"],[0,[],0,\" was quickly adopted in other popular OS. It's a kernel level utility which tells us which file descriptors are ready to be read, written or have an error condition. It does this using lower level file monitoring or interrupts, instead of iterating through all files and repeatedly checking if they have changed. This is cleaner, efficient and puts minimal load on our CPU.\"]]],[1,\"h3\",[[0,[],0,\"How to use \"],[0,[12],1,\"select\"],[0,[],0,\" with our chat server?\"]]],[1,\"p\",[[0,[],0,\"Since all connected clients are nothing but file descriptors, we'll tell \"],[0,[12],1,\"select\"],[0,[],0,\" to monitor these given file descriptors and notify us when there's any data on them that is yet to be read. Once \"],[0,[12],1,\"select\"],[0,[],0,\" notifies us, it will give us a list of file descriptors which contain unread data. We'll iterate over these and see what data they have. Remember, when a socket receives data, it essentially means that it has data to be read.\"]]],[1,\"p\",[[0,[12],1,\"select\"],[0,[],0,\" in Nim is a part of  \"],[0,[12],1,\"selectors\"],[0,[],0,\" package. It has two important methods of our concern - \"],[0,[12,23],2,\"registerHandle\"],[0,[],0,\" and \"],[0,[12,24],2,\"select\"],[0,[],0,\". \"],[0,[12],1,\"registerHandle\"],[0,[],0,\" takes in a file description, the events we want to listen to (read, write, error) and optional data that we wish to receive when the event is triggered. \"],[0,[12],1,\"select\"],[0,[],0,\" takes in the timeout period until which it will wait for events on the registered handles (file descriptors). If we want \"],[0,[12],1,\"select\"],[0,[],0,\" to block our code, we can set timeout as \"],[0,[12],1,\"-1\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Let's dive into the code.\"]]],[10,29],[10,30],[1,\"p\",[[0,[],0,\"Let's run the program now and see our CPU usage.\"]]],[10,31],[10,32],[1,\"p\",[[0,[],0,\"It's not even showing in the top CPU consuming processes. That's great.\"]]],[10,33],[1,\"p\",[[0,[],0,\"With this we complete our basic chat server. I know clients are still messy, but for that, we would need to dive deep into the interactivity part which is beyond the scope of this tutorial. Next up, we can add clients with identity information so that server can uniquely tag who sent which message, 1:1 messaging instead of group messaging and an interactive UI. I might write a follow-up article with all of these in future.\"]]],[1,\"p\",[[0,[],0,\"Nim is an amazing language. To be able to do so much, in so little and clean code is amazing. We haven't touched on code optimization yet, but I believe we can use some micro-optimizations to make this code even faster.\"]]],[1,\"p\",[[0,[],0,\"Let me know about your feedback. If you feel there were any issues with the tutorial, or writing style, or any errors in text or code, or any difficulty in understanding, or if you just wanna give a compliment, leave your comments below.\"]]]]}","created_at_ts":1548364762508,"created_at":"2019-01-24 21:19:22"},{"id":"5c4a2bfaf7e7b7692d246ed9","post_id":"5c3229bfd149624e397d2920","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **1** All socket related functions, classes, utilities are in the [`net`](https://nim-lang.org/docs/net.html) package. We could have also used [`nativesockets`](https://nim-lang.org/docs/nativesockets.html) package which is exclusively for sockets. But it handles sockets at very low-level which might just lengthen our code.\\n> **3** Initialize our server socket using [`newSocket`](https://nim-lang.org/docs/net.html#newSocket,Domain,SockType,Protocol). This function also accepts some parameters which we will discuss in-depth later. For now, we are okay leaving it to the default values.\\n> **4-5** Set the socket to listen to new connections on port `5555` and start accepting new connections from other sockets. If [`address` parameter](https://nim-lang.org/docs/net.html#bindAddr,Socket,string) is not mentioned by default, the socket will listen to requests from all IP addresses.\\n> **8** Close our socket server. It is very important to close socket connections if they are no longer required. This is considered a clean way to end TCP connections with proper end-of-connection acknowledgement.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Hint: used config file '/etc/nim.cfg' [Conf]\\n(out)Hint: system [Processing]\\n(out)Hint: server [Processing]\\n(out)Hint: net [Processing]\\n(out)Hint: nativesockets [Processing]\\n(out)Hint: os [Processing]\\n(out)Hint: strutils [Processing]\\n(out)Hint: parseutils [Processing]\\n(out)Hint: math [Processing]\\n(out)Hint: algorithm [Processing]\\n(out)Hint: times [Processing]\\n(out)Hint: posix [Processing]\\n(out)Hint: ospaths [Processing]\\n(out)Hint: options [Processing]\\n(out)Hint: typetraits [Processing]\\n(out)Hint: sets [Processing]\\n(out)Hint: hashes [Processing]\\n(out)CC: server\\n(out)CC: stdlib_system\\n(out)CC: stdlib_net\\n(out)Hint:  [Link]\\n(out)Hint: operation successful (26847 lines compiled; 0.903 sec total; 47.43MiB peakmem; Debug Build) [SuccessX]\\n(out)Hint: /home/tejas/Projects/simple-chat-server/server  [Exec]</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"8-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Similar to the server, we need a socket object. The only difference here is, unlike server, which listens to connections, a client knows the server address and connects to it using the [`connect`](https://nim-lang.org/docs/net.html#connect,Socket,string) method. Thus, a client needs to have the address and port of the server.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"6-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message)\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **7** Once the user sends a message, we'll prompt for another message, sort of how chat applications provide a text box to send a message.\\n> **8-10** Prompt the user for a chat message and using the client socket, [`send`](https://nim-lang.org/docs/net.html#send,Socket,string) it to the server. Also, we are using [`readLine`](https://nim-lang.org/docs/system.html#readLine,File) so that the messsage gets stored only when user presses <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-1\\\" data-language=\\\"server.nim\\\" data-line=\\\"11-18\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recv(10)\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **12** Server will keep listening to new messages from all connected clients.\\n> **13** Read a few characters from the socket.\\n> **15-16** When a socket disconnects, it sends an empty string before disconnection. This can be used as an indication for the server that the client has disconnected. Since we are dealing with only one client, we'll stop receiving additional messages and exit the loop.\\n> **18** Print the received message on the console.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, wor\\n(out)Server: received from client: ldLorem ip\\n(out)Server: received from client: sum dolor \\n(out)Server: received from client: sit amet, \\n(out)Server: received from client: consectetu\\n(out)Server: received from client: r adipisci</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"13\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"If the server and client are still running, kill the processes with <kbd>Ctrl</kbd>+<kbd>C</kbd>. Execute `server.nim` and `client.nim` again.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)server.nim(6)            server\\n(out)net.nim(738)             bindAddr\\n(out)oserr.nim(110)           raiseOSError\\n(out)Error: unhandled exception: Address already in use [OSError]\\n(out)Error: execution of an external program failed: '/home/tejas/Projects/simple-chat-server/server '</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"4\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, world\\n(out)Server: received from client: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola, mundo\\n(out)> What's 1 + 1? Answer is 10 in binary.\\n(out)> </code></pre>\"}],[\"markdown\",{\"markdown\":\"1. Have an infinte loop (`while true`) which will keep our server running.\\n2. Inside the loop, accept new client connections and add those into our client list.\\n3. For each client in the client list, check if there is any data.\\n4. If there is any data, print it out.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"6,10-11,14-37\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **6** Set the socket as non-blocking. We set it on the low-level native socket API.\\n> **11** We need to store our connected clients in a list so that we can iterate over them to get messages.\\n> **13-37** Check if there are any existing connections. If yes, add them to the connected socket list. Then for each connected socket, check whether there are any messages to be read.\\n> **17** Add the connected socket in our clients list.\\n> **19** In non-blocking mode, [`accept`](https://nim-lang.org/docs/net.html#accept,Socket,Socket) throws an `OSError` if there are no pending connections at that moment. We ignore that exception because it's understandable that we won't have any pending connections all the time.\\n> **22** We maintain a list of clients which disconnected so that we remove those from our client list.\\n> **24** Iterate over all the connected clients and receive messages from them one by one.\\n> **26** We set the `timeout` to `1` since [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) call still blocks the code as the default timeout value is `-1`, which means block indefinitely till message is received.\\n> **29** Mark the client for removal if it has disconnected.\\n> **32** If no message is received within the timeout period, [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) throws a `TimeoutError`. Since we are operating in a non-blocking mode now, we shall ignore this error.\\n> **35-37** Remove any client marked for removal from the clients list.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: Hola\\n(out)Server: received from client: Foo\\n(out)Server: received from client: Bar\\n(out)Server: received from client: \\n(out)Server: client disconnected\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> Foo\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola\\n(out)> Bar\\n(out)> ^CTraceback (most recent call last)\\n(out)client.nim(9)            client\\n(out)sysio.nim(185)           readLine\\n(out)sysio.nim(158)           readLine\\n(out)SIGINT: Interrupted by Ctrl-C.</code></pre>\"}],[\"markdown\",{\"markdown\":\"There's a major catch here. Since sending and receiving messages is a simultaneous process, we would need some kinda GUI to handle these tasks asynchronously. Just think of it, suppose you are a client chatting on our server, you wouldn't receive any messages until you input a message because the `stdin.readLine()` will block all the code until the user hits <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client_sending.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\\n<pre data-language=\\\"client_receiving.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  let receivedMessage: string = client.recvLine()\\n  stdout.writeLine(\\\"Message: \\\", receivedMessage)\\n\\nclient.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"30-36\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n        continue\\n\\n      for receivingClient in clients:\\n        if receivingClient == client:\\n          continue\\n\\n        receivingClient.send(message & \\\"\\\\r\\\\L\\\")\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: What are you doing?</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> What are you doing?\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: What are you doing?</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/server-cpu-usage.png\",\"cardWidth\":\"\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"3-4,7,14,18-22,25-27,30-51,55\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\nimport os\\nimport selectors\\n\\nvar server: Socket = newSocket()\\nvar select: Selector[int] = newSelector[int]()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nselect.registerHandle(server.getFd(), {Event.Read}, -1)\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  var results: seq[ReadyKey] = select.select(-1)\\n\\n  for result in results:\\n    if Event.Read in result.events:\\n      if result.fd.SocketHandle == server.getFd():\\n        var client: Socket = new(Socket)\\n        server.accept(client)\\n\\n        client.getFd().setBlocking(false)\\n        select.registerHandle(client.getFd(), {Event.Read}, -1)\\n        clients.add(client)\\n        stdout.writeLine(\\\"Server: client connected\\\")\\n      else:\\n        var sourceClient: Socket = newSocket(result.fd.SocketHandle)\\n        var message = sourceClient.recvLine()\\n\\n        if message == \\\"\\\":\\n          var clientsToRemove: seq[int] = @[]\\n\\n          for index, client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              clientsToRemove.add(index)\\n\\n          for index in clientsToRemove:\\n            var client: Socket = clients[index]\\n            select.unregister(result.fd)\\n            clients.del(index)\\n            stdout.writeLine(\\\"Server: client disconnected\\\")\\n        else:\\n          stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\n          for client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              continue\\n\\n            client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nselect.close()\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Import the packages required for `select` functions. Note that we also imported `os` package. This is because, in Nim v0.18 and lower, `OSErrorCode` is not explicity imported in the `select` library. This is fixed in later versions.\\n> **7** We define our selector. It requires a type too. This would be the type of the data that we will associate in `registerHandle` method.\\n> **14** Register our server for read events. Note that read events on server socket would be incoming socket connections. Since we don't have any data associated with our server, we'll pass data as `-1`.\\n> **18** `select` returns a list of events along with their file descriptors for which the specified event was triggered.\\n> **21** We are only interested in read events.\\n> **22** The result received from `select` method contains the list of `events` that were captured and the file descriptor `fd` for which the event was triggered. Though our `fd` is enough, we compare the underlying socket for that file descriptor. If the one that triggered a read event was our server, it must mean that we recevied an incoming connection from a client.\\n> **26** Since clients are also handled by `select` we'll set them as non-blocking.\\n> **27** Just like our server, listen to read events of our client. Read event on a connected socket indicates that a new message has been arrived waiting to be read.\\n> **30** If the read event was not triggered by server, then it must be client. This means we received a message from a client which we have to broadcast to other clients.\\n> **31** Working with higher-level socket abstractions is easier. So, we convert our low-level socket from file descriptor in the result into a higher-level socket.\\n> **34-45** If a client is disconnected, remove it from clients list and [`unregister`](https://nim-lang.org/docs/selectors.html#unregister,Selector[T],) events for that client.\\n> **50** We could have compared the two objects directly. But since the newly created `sourceClient` object as a copy, it's identity would be different. This would cause an inequality even though the underlying sockets are same.\\n> **55** Like sockets, even select should be closed to signal the kernel that we are no longer listening to any events. This is a good practice to cleanly close everything before shutting down our program.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: select seems to be doing great</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> select seems to be doing great\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: select seems to be doing great</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/low-cpu-server.png\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://nim-lang.org\"]],[\"a\",[\"href\",\"https://nim-lang.org/install.html\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/Editor-Support\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/\"]],[\"a\",[\"href\",\"https://www.techopedia.com/definition/7154/full-duplex-fdx\"]],[\"a\",[\"href\",\"https://realtimeapi.io/hub/http-long-polling/\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/BOSH_(protocol)\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/Comet_(programming)\"]],[\"a\",[\"href\",\"https://www.tutorialspoint.com/unix_sockets/what_is_socket.htm\"]],[\"a\",[\"href\",\"https://www.html5rocks.com/en/tutorials/websockets/basics/\"]],[\"a\",[\"href\",\"https://caniuse.com/#feat=websockets\"]],[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"#server-snippet-1.13\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recv,Socket,int\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recvLine,Socket\"]],[\"a\",[\"href\",\"#server-snippet-2.9-11\"]],[\"a\",[\"href\",\"#server-snippet-2.10\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/nativesockets.html#setBlocking,SocketHandle,bool\"]],[\"a\",[\"href\",\"https://www.linuxjournal.com/content/getting-started-ncurses\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man2/select.2.html\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#registerHandle,Selector[T],,set[Event],T\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#select,Selector[T],int\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Build a simple chat server using nothing except sockets in Nim which pushes messages sent by any client to all other connected clients.\"]]],[1,\"p\",[[0,[],0,\"Since I'm at home now, on a break, not really doing anything, I decided to learn this new programming language called \"],[0,[0],1,\"Nim\"],[0,[],0,\" which is a perfect fusion between the elegance of Python and performance of C. What's better way to start with a language than actually creating something meaningful? So, I decided to not only create a simple chat server, but also write a step-by-step tutorial about it.\"]]],[1,\"h1\",[[0,[],0,\"Prerequisites\"]]],[3,\"ul\",[[[0,[],0,\"Install Nim compiler. You can get the download links or installation commands from their \"],[0,[1],1,\"installation\"],[0,[],0,\" page. The compiler version in this tutorial is 0.18.0, though newer versions should not have any issue.\"]],[[0,[],0,\"Get Nim plugins for your editor. Again you can refer to the \"],[0,[2],1,\"editor plugins page\"],[0,[],0,\" on their \"],[0,[3],1,\"GitHub\"],[0,[],0,\" \"],[0,[4],1,\"wiki\"],[0,[],0,\".\"]]]],[1,\"h1\",[[0,[],0,\"Problem statement\"]]],[1,\"blockquote\",[[0,[],0,\"Our chat server will be a single room (channel) chat where anyone can talk with everyone. When a user types in a message, it is sent to all other users connected to the chat server.\"]]],[1,\"p\",[[0,[],0,\"In any chat application, the core responsibility of a server is just to act as a relay and send messages from one client to the other. The server should be sufficiently fast enough to accept newer clients who join, read messages from the clients, broadcast those messages to all other clients, without showing any noticeable delay for any of the clients. This would truly make it an instant messaging platform.\"]]],[1,\"h1\",[[0,[],0,\"I. Plan\"]]],[1,\"p\",[[0,[],0,\"We need a \"],[0,[5],1,\"full duplex\"],[0,[],0,\" link between the server and the client so that messages can be sent and received at the same time. Of all the various methods like \"],[0,[6],1,\"long-polling\"],[0,[],0,\", \"],[0,[7],1,\"BOSH\"],[0,[],0,\", \"],[0,[8],1,\"comet\"],[0,[],0,\", my recommendation is to use \"],[0,[9],1,\"sockets\"],[0,[],0,\" (\"],[0,[10],1,\"web sockets\"],[0,[],0,\" for \"],[0,[11],1,\"browsers\"],[0,[],0,\"). They are truly bi-directional, light-weight and efficient for such use cases.\"]]],[3,\"ol\",[[[0,[],0,\"Our server would act as a socket server. \"]],[[0,[],0,\"It would bind to a specific port and IP address and listen for new socket connections.\"]],[[0,[],0,\"For every socket connected, it would add it to it's active socket connections list.\"]],[[0,[],0,\"When any connected socket sends a message to the server, the server will send it to all the sockets in the active socket connections list (except the one who sent it).\"]],[[0,[],0,\"If a connected socket closes connection, the server will remove it from the active list.\"]]]],[1,\"h1\",[[0,[],0,\"II. Getting started\"]]],[1,\"p\",[[0,[],0,\"Create a directory in your projects folder (or wherever you want) called \"],[0,[12],1,\"simple-chat-server\"],[0,[],0,\". You might want to open this directory in your code editor. \"],[0,[13],1,\"All path references here on will be relative to this directory.\"]]],[1,\"p\",[[0,[],0,\"Create a file called \"],[0,[12],1,\"server.nim\"],[0,[],0,\". This would be our core server file. To compile and run the code in this file, we will use \"],[0,[12],1,\"nim compile --run server.nim\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"We'll create a simple socket which will listen to new socket connections on port \"],[0,[12],1,\"5555\"],[0,[],0,\" and then close it.\"]]],[10,0],[10,1],[1,\"p\",[[0,[],0,\"To run the above code, we need to compile it first and then execute the binary. Fortunately, the Nim compiler can do both in a single command by specifying the \"],[0,[12],1,\"--run\"],[0,[],0,\" or \"],[0,[12],1,\"-r\"],[0,[],0,\" argument.\"]]],[1,\"p\",[[0,[],0,\"The compiler pulls all the required packages along with \"],[0,[12],1,\"server.nim\"],[0,[],0,\", transpiles them into C, links the libraries and creates an executable binary file with the same name as our file sans the file extension (in our case it becomes \"],[0,[12],1,\"server\"],[0,[],0,\") in the root of the project directory.\"]]],[10,2],[1,\"p\",[[0,[],0,\"The code ran but it didn't produce any output, except for compiler messages (we will be omitting compiler messages hereon). The server created the socket, listened for incoming connections and closed the socket connection.\"]]],[1,\"p\",[[0,[],0,\"Now we'll make the server wait until it receives new connections.\"]]],[10,3],[10,4],[1,\"p\",[[0,[],0,\"Our server is now actively listening for connections from clients. But… it's kinda stuck there because the server is waiting for a client to connect. We'll have to create one now. \"]]],[1,\"p\",[[0,[],0,\"Create a new file called \"],[0,[12],1,\"client.nim\"],[0,[],0,\". We'll use socket as a client and connect to the server.\"]]],[10,5],[10,6],[1,\"p\",[[0,[],0,\"Execute \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and at the same time, in a new terminal window/tab, execute \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,7],[1,\"p\",[[0,[],0,\"The server started and waited for connections. The moment we started the client, it connected to our socket server on the specified address. Server received this connection and assigned the client to the \"],[0,[12],1,\"client\"],[0,[],0,\" variable, and closed the socket.\"]]],[1,\"p\",[[0,[],0,\"This was a barebones socket server and client. We have to add the real magic - sending and receiving messages.\"]]],[1,\"h1\",[[0,[],0,\"III. Sending and receiving messages\"]]],[1,\"p\",[[0,[],0,\"A socket on an OS is a file descriptor (layman: just a file). When we say that a socket received some data, it actually signifies that some data was written on that file descriptor.\"]]],[1,\"p\",[[0,[],0,\"We have built a server which accepts socket connection and a client which connects to the server. Now, we'll dive into the actual communication between client and server.\"]]],[1,\"p\",[[0,[],0,\"On the client side, we'll prompt user to enter the message to be sent and then send this message over to the server.\"]]],[10,8],[10,9],[1,\"p\",[[0,[],0,\"On the server side, we need to listen to new messages from client. We'll also print the messages received from the client on the console.\"]]],[10,10],[10,11],[1,\"p\",[[0,[],0,\"Let's execute both \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" in two different terminal tabs/windows. Note that I have used \"],[0,[12],1,\"nim c -r\"],[0,[],0,\" which is a shorthand for \"],[0,[12],1,\"nim compile --run\"],[0,[],0,\".\"]]],[10,12],[1,\"p\",[[0,[],0,\"Something's gone horribly wrong here. Not only our client messages are truncated, but they are also mingled with other messages. We sent \"],[0,[14],1,\"Hello, world\"],[0,[],0,\" and \"],[0,[14],1,\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"],[0,[],0,\" as two different messages, but on the server side we're getting them in sort of mingled fashion. Also, our second message is incomplete.\"]]],[1,\"p\",[[0,[],0,\"The culprit here is line \"],[0,[15],1,\"13\"],[0,[],0,\". We specified that we'll only accept 10 characters from the socket. Also, until socket does not have at least 10 characters in its buffer, the \"],[0,[12,16],2,\"recv\"],[0,[],0,\" function will keep blocking indefinitely. The socket will keep reading messages until it has reached that count in its buffer and only then it will return the data. We can do the following,\"]]],[3,\"ol\",[[[0,[],0,\"We'll use some delimiting character. We'll read a very small amount of data from the socket and scan all characters in it and store it in our own buffer. If we encounter the delimiting character while scanning, we'll stop there, dump whatever we read so far in the buffer and return the buffer data.\"]],[[0,[],0,\"We can also use the \"],[0,[12],1,\"timeout\"],[0,[],0,\" parameter in the \"],[0,[12,16],2,\"recv\"],[0,[],0,\". By default, the timeout value is \"],[0,[12],1,\"-1\"],[0,[],0,\", which means we will wait indefinitely until there is enough data in the socket. We can set it to a small amount so that we don't wait indefinitely for new messages.\"]]]],[1,\"p\",[[0,[],0,\"A much better solution here would be to use the \"],[0,[12,17],2,\"recvLine\"],[0,[],0,\" method. It handles the complexity of handling the delimited character for us. It uses \"],[0,[12],1,\"\\\\r\\\\L\"],[0,[],0,\" as the delimiter. This means, on the client side, for each message we send, we would also need to append this delimiter. Let's make the changes accordingly.\"]]],[10,13],[10,14],[10,15],[10,16],[1,\"p\",[[0,[],0,\"If you're getting the above error, it's an indication that the port on which our server listens is being reserved for some reason. It happens when some process which is listening on that port is still running. Though in our case, even though we stopped the server, it's still giving us this error. The reason here is something called as \"],[0,[14],1,\"Linger Time\"],[0,[],0,\". When a socket is closed (especially TCP socket), some data which is marked to be sent, still exists in the socket's send buffer. Unless the buffer is emptied or a timeout period (usually 30 seconds) is passed, the system reserves the port.\"]]],[1,\"p\",[[0,[],0,\"To fix this, we use the \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of sockets. If a socket is created with this option enabled, instead of throwing an error, it checks whether a socket which is listening on the same port is in lingering state. If it is, the socket will use the same address with an assumption that the earlier socket will release the port soon. In Nim, we have the \"],[0,[12],1,\"OptReuseAddr\"],[0,[],0,\" option which can be set as \"],[0,[12],1,\"true\"],[0,[],0,\" to enable \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of the socket.\"]]],[10,17],[1,\"p\",[[0,[],0,\"Let's run the server and clients again.\"]]],[10,18],[1,\"p\",[[0,[],0,\"As you can see now, the messages are no longer truncated and they are received in the same manner as sent by the client.\"]]],[1,\"p\",[[0,[],0,\"Now that we have spawned our basic server which accepts messages from a client, let's spawn another client and see what happens. Don't kill the currently running \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" and instead run \"],[0,[12],1,\"client.nim\"],[0,[],0,\" again in a new tab/terminal and send a few messages.\"]]],[10,19],[1,\"p\",[[0,[],0,\"If you check the tab/terminal running our server, you wouldn't find these messages at all. The server did not receive any message at all from our new client. Can you identify the problem?\"]]],[1,\"p\",[[0,[],0,\"Notice the lines \"],[0,[18],1,\"9-11\"],[0,[],0,\", where we wait and accept connection from a client. The moment a client connects, we never again accept and listen to data from new clients. As soon as we get a client, we just listen to new data from that client. What we can do is, as we listen to new data from one client, we'll also accept new connections from other clients. Our flow would go like this, \"]]],[10,20],[1,\"p\",[[0,[],0,\"However, there is a slight problem in step 2. In our server socket, as seen here, the server will block the program flow while it is listening for new clients since \"],[0,[12,19],2,\"server.accept()\"],[0,[],0,\" is a blocking function. Thus our messages will only be read once a client connects to the server. This is not even an acceptable case for our chat server.\"]]],[1,\"p\",[[0,[],0,\"Fortunately, sockets have an option to run in non-blocking mode. This means, our \"],[0,[12],1,\"accept()\"],[0,[],0,\" and \"],[0,[12],1,\"recv()\"],[0,[],0,\" functions will no longer block the code. If they have anything meaningful to return (like an incoming socket connection or a message), they will return that and continue execution. Otherwise, they will throw an error. Which means, we have to keep checking for new connections or messages and also handle the error in case we don't get any. \"]]],[1,\"p\",[[0,[],0,\"In Nim, we enable non-blocking mode using the \"],[0,[12,20],2,\"setBlocking()\"],[0,[],0,\" function of the underlying native socket. We'll also store all our connected sockets in a list so that we can iterate over them and receive messages from each of them. We'll do both, accept new connections and receive data from sockets in a single infinite loop, so that we keep accepting new connections while we receive messages from existing ones. Let's give this a try.\"]]],[10,21],[10,22],[1,\"p\",[[0,[],0,\"Let's execute our server now with multiple clients.\"]]],[10,23],[1,\"p\",[[0,[],0,\"Yay! We have it now. Our server accepts and receives messages from multiple clients. We have also managed client disconnections. What our server should do now is send messages from one client to other clients, which a chat server should do. Let's do it.\"]]],[10,24],[1,\"p\",[[0,[],0,\"We can build a small GUI or use \"],[0,[21],1,\"ncurses\"],[0,[],0,\" to do that interactively in terminal. Since both of these are outside the scope of this tutorial, we'll make a hack for now. We'll create two different types of clients - one for sending messages and one for receiving. We call them \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" respectively. \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" is exactly same as our \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,25],[1,\"p\",[[0,[],0,\"We would need some minor changes in our \"],[0,[12],1,\"server.nim\"],[0,[],0,\". Once the server receives a message, it will send it to all connected clients, except the one who sent the message.\"]]],[10,26],[1,\"p\",[[0,[],0,\"Open three terminals - one for \"],[0,[12],1,\"server.nim\"],[0,[],0,\", one for \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and one for \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" - and execute the respective files. Try sending some messages from sending client and see if you get those in the receiving client.\"]]],[10,27],[1,\"p\",[[0,[],0,\"You can open multiple terminals with \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and send messages to one another. You would observer that all receiving clients receive messages from all sending clients. This is because our server is current broadcasting all messages to everyone. We can limit this behavior, but we can skip that for now.\"]]],[1,\"p\",[[0,[],0,\"With this, you have completed a simple chat server with somewhat hacky clients (we'll fix that later). However, if you're working on a laptop, you would have noticed the noise of your CPU fan every time you run the server. If you're curious enough, check the output of \"],[0,[12],1,\"top\"],[0,[],0,\" command and you'll notice that the server process is taking up some chunk of CPU.\"]]],[10,28],[1,\"p\",[[0,[],0,\"It seems our code needs some fixing. Indeed it does. The way we are handling new connections and incoming messages on our server is very inefficient. We are persistently asking the socket for new connection and a new message, that too in an infinite loop. If socket was an actual person, it would mean as if we are pestering him every now and then for new information.\"]]],[1,\"p\",[[0,[],0,\"We have a solution for this. We'll make use of something that is core of lot of chat servers and surprisingly available on all platforms - \"],[0,[12,22],2,\"select\"],[0,[],0,\".\"]]],[1,\"h1\",[[0,[],0,\"IV. Using \"],[0,[12],1,\"select\"],[0,[],0,\" for optimization\"]]],[1,\"p\",[[0,[],0,\"Of all the amazing things that happened in Unix world, one was \"],[0,[12],1,\"select\"],[0,[],0,\". Originally appeared in BSD, \"],[0,[12],1,\"select\"],[0,[],0,\" was quickly adopted in other popular OS. It's a kernel level utility which tells us which file descriptors are ready to be read, written or have an error condition. It does this using lower level file monitoring or interrupts, instead of iterating through all files and repeatedly checking if they have changed. This is cleaner, efficient and puts minimal load on our CPU.\"]]],[1,\"h3\",[[0,[],0,\"How to use \"],[0,[12],1,\"select\"],[0,[],0,\" with our chat server?\"]]],[1,\"p\",[[0,[],0,\"Since all connected clients are nothing but file descriptors, we'll tell \"],[0,[12],1,\"select\"],[0,[],0,\" to monitor these given file descriptors and notify us when there's any data on them that is yet to be read. Once \"],[0,[12],1,\"select\"],[0,[],0,\" notifies us, it will give us a list of file descriptors which contain unread data. We'll iterate over these and see what data they have. Remember, when a socket receives data, it essentially means that it has data to be read.\"]]],[1,\"p\",[[0,[12],1,\"select\"],[0,[],0,\" in Nim is a part of  \"],[0,[12],1,\"selectors\"],[0,[],0,\" package. It has two important methods of our concern - \"],[0,[12,23],2,\"registerHandle\"],[0,[],0,\" and \"],[0,[12,24],2,\"select\"],[0,[],0,\". \"],[0,[12],1,\"registerHandle\"],[0,[],0,\" takes in a file description, the events we want to listen to (read, write, error) and optional data that we wish to receive when the event is triggered. \"],[0,[12],1,\"select\"],[0,[],0,\" takes in the timeout period until which it will wait for events on the registered handles (file descriptors). If we want \"],[0,[12],1,\"select\"],[0,[],0,\" to block our code, we can set timeout as \"],[0,[12],1,\"-1\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Let's dive into the code.\"]]],[10,29],[10,30],[1,\"p\",[[0,[],0,\"Let's run the program now and see our CPU usage.\"]]],[10,31],[10,32],[1,\"p\",[[0,[],0,\"It's not even showing in the top CPU consuming processes. That's great.\"]]],[10,33],[1,\"p\",[[0,[],0,\"With this we complete our basic chat server. I know clients are still messy, but for that, we would need to dive deep into the interactivity part which is beyond the scope of this tutorial. Next up, we can add clients with identity information so that server can uniquely tag who sent which message, 1:1 messaging instead of group messaging and an interactive UI. I might write a follow-up article with all of these in future.\"]]],[1,\"p\",[[0,[],0,\"Nim is an amazing language. To be able to do so much, in so little and clean code is amazing. We haven't touched on code optimization yet, but I believe we can use some micro-optimizations to make this code even faster. It's been a great exercise to move away from Python\"]]],[1,\"p\",[[0,[],0,\"Let me know about your feedback. If you feel there were any issues with the tutorial, or writing style, or any errors in text or code, or any difficulty in understanding, or if you just wanna give a compliment, leave your comments below.\"]]]]}","created_at_ts":1548364794718,"created_at":"2019-01-24 21:19:54"},{"id":"5c4a2c10f7e7b7692d246eda","post_id":"5c3229bfd149624e397d2920","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **1** All socket related functions, classes, utilities are in the [`net`](https://nim-lang.org/docs/net.html) package. We could have also used [`nativesockets`](https://nim-lang.org/docs/nativesockets.html) package which is exclusively for sockets. But it handles sockets at very low-level which might just lengthen our code.\\n> **3** Initialize our server socket using [`newSocket`](https://nim-lang.org/docs/net.html#newSocket,Domain,SockType,Protocol). This function also accepts some parameters which we will discuss in-depth later. For now, we are okay leaving it to the default values.\\n> **4-5** Set the socket to listen to new connections on port `5555` and start accepting new connections from other sockets. If [`address` parameter](https://nim-lang.org/docs/net.html#bindAddr,Socket,string) is not mentioned by default, the socket will listen to requests from all IP addresses.\\n> **8** Close our socket server. It is very important to close socket connections if they are no longer required. This is considered a clean way to end TCP connections with proper end-of-connection acknowledgement.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Hint: used config file '/etc/nim.cfg' [Conf]\\n(out)Hint: system [Processing]\\n(out)Hint: server [Processing]\\n(out)Hint: net [Processing]\\n(out)Hint: nativesockets [Processing]\\n(out)Hint: os [Processing]\\n(out)Hint: strutils [Processing]\\n(out)Hint: parseutils [Processing]\\n(out)Hint: math [Processing]\\n(out)Hint: algorithm [Processing]\\n(out)Hint: times [Processing]\\n(out)Hint: posix [Processing]\\n(out)Hint: ospaths [Processing]\\n(out)Hint: options [Processing]\\n(out)Hint: typetraits [Processing]\\n(out)Hint: sets [Processing]\\n(out)Hint: hashes [Processing]\\n(out)CC: server\\n(out)CC: stdlib_system\\n(out)CC: stdlib_net\\n(out)Hint:  [Link]\\n(out)Hint: operation successful (26847 lines compiled; 0.903 sec total; 47.43MiB peakmem; Debug Build) [SuccessX]\\n(out)Hint: /home/tejas/Projects/simple-chat-server/server  [Exec]</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"8-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Similar to the server, we need a socket object. The only difference here is, unlike server, which listens to connections, a client knows the server address and connects to it using the [`connect`](https://nim-lang.org/docs/net.html#connect,Socket,string) method. Thus, a client needs to have the address and port of the server.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"6-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message)\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **7** Once the user sends a message, we'll prompt for another message, sort of how chat applications provide a text box to send a message.\\n> **8-10** Prompt the user for a chat message and using the client socket, [`send`](https://nim-lang.org/docs/net.html#send,Socket,string) it to the server. Also, we are using [`readLine`](https://nim-lang.org/docs/system.html#readLine,File) so that the messsage gets stored only when user presses <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-1\\\" data-language=\\\"server.nim\\\" data-line=\\\"11-18\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recv(10)\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **12** Server will keep listening to new messages from all connected clients.\\n> **13** Read a few characters from the socket.\\n> **15-16** When a socket disconnects, it sends an empty string before disconnection. This can be used as an indication for the server that the client has disconnected. Since we are dealing with only one client, we'll stop receiving additional messages and exit the loop.\\n> **18** Print the received message on the console.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, wor\\n(out)Server: received from client: ldLorem ip\\n(out)Server: received from client: sum dolor \\n(out)Server: received from client: sit amet, \\n(out)Server: received from client: consectetu\\n(out)Server: received from client: r adipisci</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"13\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"If the server and client are still running, kill the processes with <kbd>Ctrl</kbd>+<kbd>C</kbd>. Execute `server.nim` and `client.nim` again.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)server.nim(6)            server\\n(out)net.nim(738)             bindAddr\\n(out)oserr.nim(110)           raiseOSError\\n(out)Error: unhandled exception: Address already in use [OSError]\\n(out)Error: execution of an external program failed: '/home/tejas/Projects/simple-chat-server/server '</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"4\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, world\\n(out)Server: received from client: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola, mundo\\n(out)> What's 1 + 1? Answer is 10 in binary.\\n(out)> </code></pre>\"}],[\"markdown\",{\"markdown\":\"1. Have an infinte loop (`while true`) which will keep our server running.\\n2. Inside the loop, accept new client connections and add those into our client list.\\n3. For each client in the client list, check if there is any data.\\n4. If there is any data, print it out.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"6,10-11,14-37\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **6** Set the socket as non-blocking. We set it on the low-level native socket API.\\n> **11** We need to store our connected clients in a list so that we can iterate over them to get messages.\\n> **13-37** Check if there are any existing connections. If yes, add them to the connected socket list. Then for each connected socket, check whether there are any messages to be read.\\n> **17** Add the connected socket in our clients list.\\n> **19** In non-blocking mode, [`accept`](https://nim-lang.org/docs/net.html#accept,Socket,Socket) throws an `OSError` if there are no pending connections at that moment. We ignore that exception because it's understandable that we won't have any pending connections all the time.\\n> **22** We maintain a list of clients which disconnected so that we remove those from our client list.\\n> **24** Iterate over all the connected clients and receive messages from them one by one.\\n> **26** We set the `timeout` to `1` since [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) call still blocks the code as the default timeout value is `-1`, which means block indefinitely till message is received.\\n> **29** Mark the client for removal if it has disconnected.\\n> **32** If no message is received within the timeout period, [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) throws a `TimeoutError`. Since we are operating in a non-blocking mode now, we shall ignore this error.\\n> **35-37** Remove any client marked for removal from the clients list.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: Hola\\n(out)Server: received from client: Foo\\n(out)Server: received from client: Bar\\n(out)Server: received from client: \\n(out)Server: client disconnected\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> Foo\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola\\n(out)> Bar\\n(out)> ^CTraceback (most recent call last)\\n(out)client.nim(9)            client\\n(out)sysio.nim(185)           readLine\\n(out)sysio.nim(158)           readLine\\n(out)SIGINT: Interrupted by Ctrl-C.</code></pre>\"}],[\"markdown\",{\"markdown\":\"There's a major catch here. Since sending and receiving messages is a simultaneous process, we would need some kinda GUI to handle these tasks asynchronously. Just think of it, suppose you are a client chatting on our server, you wouldn't receive any messages until you input a message because the `stdin.readLine()` will block all the code until the user hits <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client_sending.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\\n<pre data-language=\\\"client_receiving.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  let receivedMessage: string = client.recvLine()\\n  stdout.writeLine(\\\"Message: \\\", receivedMessage)\\n\\nclient.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"30-36\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n        continue\\n\\n      for receivingClient in clients:\\n        if receivingClient == client:\\n          continue\\n\\n        receivingClient.send(message & \\\"\\\\r\\\\L\\\")\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: What are you doing?</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> What are you doing?\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: What are you doing?</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/server-cpu-usage.png\",\"cardWidth\":\"\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"3-4,7,14,18-22,25-27,30-51,55\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\nimport os\\nimport selectors\\n\\nvar server: Socket = newSocket()\\nvar select: Selector[int] = newSelector[int]()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nselect.registerHandle(server.getFd(), {Event.Read}, -1)\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  var results: seq[ReadyKey] = select.select(-1)\\n\\n  for result in results:\\n    if Event.Read in result.events:\\n      if result.fd.SocketHandle == server.getFd():\\n        var client: Socket = new(Socket)\\n        server.accept(client)\\n\\n        client.getFd().setBlocking(false)\\n        select.registerHandle(client.getFd(), {Event.Read}, -1)\\n        clients.add(client)\\n        stdout.writeLine(\\\"Server: client connected\\\")\\n      else:\\n        var sourceClient: Socket = newSocket(result.fd.SocketHandle)\\n        var message = sourceClient.recvLine()\\n\\n        if message == \\\"\\\":\\n          var clientsToRemove: seq[int] = @[]\\n\\n          for index, client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              clientsToRemove.add(index)\\n\\n          for index in clientsToRemove:\\n            var client: Socket = clients[index]\\n            select.unregister(result.fd)\\n            clients.del(index)\\n            stdout.writeLine(\\\"Server: client disconnected\\\")\\n        else:\\n          stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\n          for client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              continue\\n\\n            client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nselect.close()\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Import the packages required for `select` functions. Note that we also imported `os` package. This is because, in Nim v0.18 and lower, `OSErrorCode` is not explicity imported in the `select` library. This is fixed in later versions.\\n> **7** We define our selector. It requires a type too. This would be the type of the data that we will associate in `registerHandle` method.\\n> **14** Register our server for read events. Note that read events on server socket would be incoming socket connections. Since we don't have any data associated with our server, we'll pass data as `-1`.\\n> **18** `select` returns a list of events along with their file descriptors for which the specified event was triggered.\\n> **21** We are only interested in read events.\\n> **22** The result received from `select` method contains the list of `events` that were captured and the file descriptor `fd` for which the event was triggered. Though our `fd` is enough, we compare the underlying socket for that file descriptor. If the one that triggered a read event was our server, it must mean that we recevied an incoming connection from a client.\\n> **26** Since clients are also handled by `select` we'll set them as non-blocking.\\n> **27** Just like our server, listen to read events of our client. Read event on a connected socket indicates that a new message has been arrived waiting to be read.\\n> **30** If the read event was not triggered by server, then it must be client. This means we received a message from a client which we have to broadcast to other clients.\\n> **31** Working with higher-level socket abstractions is easier. So, we convert our low-level socket from file descriptor in the result into a higher-level socket.\\n> **34-45** If a client is disconnected, remove it from clients list and [`unregister`](https://nim-lang.org/docs/selectors.html#unregister,Selector[T],) events for that client.\\n> **50** We could have compared the two objects directly. But since the newly created `sourceClient` object as a copy, it's identity would be different. This would cause an inequality even though the underlying sockets are same.\\n> **55** Like sockets, even select should be closed to signal the kernel that we are no longer listening to any events. This is a good practice to cleanly close everything before shutting down our program.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: select seems to be doing great</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> select seems to be doing great\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: select seems to be doing great</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/low-cpu-server.png\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://nim-lang.org\"]],[\"a\",[\"href\",\"https://nim-lang.org/install.html\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/Editor-Support\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/\"]],[\"a\",[\"href\",\"https://www.techopedia.com/definition/7154/full-duplex-fdx\"]],[\"a\",[\"href\",\"https://realtimeapi.io/hub/http-long-polling/\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/BOSH_(protocol)\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/Comet_(programming)\"]],[\"a\",[\"href\",\"https://www.tutorialspoint.com/unix_sockets/what_is_socket.htm\"]],[\"a\",[\"href\",\"https://www.html5rocks.com/en/tutorials/websockets/basics/\"]],[\"a\",[\"href\",\"https://caniuse.com/#feat=websockets\"]],[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"#server-snippet-1.13\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recv,Socket,int\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recvLine,Socket\"]],[\"a\",[\"href\",\"#server-snippet-2.9-11\"]],[\"a\",[\"href\",\"#server-snippet-2.10\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/nativesockets.html#setBlocking,SocketHandle,bool\"]],[\"a\",[\"href\",\"https://www.linuxjournal.com/content/getting-started-ncurses\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man2/select.2.html\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#registerHandle,Selector[T],,set[Event],T\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#select,Selector[T],int\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Build a simple chat server using nothing except sockets in Nim which pushes messages sent by any client to all other connected clients.\"]]],[1,\"p\",[[0,[],0,\"Since I'm at home now, on a break, not really doing anything, I decided to learn this new programming language called \"],[0,[0],1,\"Nim\"],[0,[],0,\" which is a perfect fusion between the elegance of Python and performance of C. What's better way to start with a language than actually creating something meaningful? So, I decided to not only create a simple chat server, but also write a step-by-step tutorial about it.\"]]],[1,\"h1\",[[0,[],0,\"Prerequisites\"]]],[3,\"ul\",[[[0,[],0,\"Install Nim compiler. You can get the download links or installation commands from their \"],[0,[1],1,\"installation\"],[0,[],0,\" page. The compiler version in this tutorial is 0.18.0, though newer versions should not have any issue.\"]],[[0,[],0,\"Get Nim plugins for your editor. Again you can refer to the \"],[0,[2],1,\"editor plugins page\"],[0,[],0,\" on their \"],[0,[3],1,\"GitHub\"],[0,[],0,\" \"],[0,[4],1,\"wiki\"],[0,[],0,\".\"]]]],[1,\"h1\",[[0,[],0,\"Problem statement\"]]],[1,\"blockquote\",[[0,[],0,\"Our chat server will be a single room (channel) chat where anyone can talk with everyone. When a user types in a message, it is sent to all other users connected to the chat server.\"]]],[1,\"p\",[[0,[],0,\"In any chat application, the core responsibility of a server is just to act as a relay and send messages from one client to the other. The server should be sufficiently fast enough to accept newer clients who join, read messages from the clients, broadcast those messages to all other clients, without showing any noticeable delay for any of the clients. This would truly make it an instant messaging platform.\"]]],[1,\"h1\",[[0,[],0,\"I. Plan\"]]],[1,\"p\",[[0,[],0,\"We need a \"],[0,[5],1,\"full duplex\"],[0,[],0,\" link between the server and the client so that messages can be sent and received at the same time. Of all the various methods like \"],[0,[6],1,\"long-polling\"],[0,[],0,\", \"],[0,[7],1,\"BOSH\"],[0,[],0,\", \"],[0,[8],1,\"comet\"],[0,[],0,\", my recommendation is to use \"],[0,[9],1,\"sockets\"],[0,[],0,\" (\"],[0,[10],1,\"web sockets\"],[0,[],0,\" for \"],[0,[11],1,\"browsers\"],[0,[],0,\"). They are truly bi-directional, light-weight and efficient for such use cases.\"]]],[3,\"ol\",[[[0,[],0,\"Our server would act as a socket server. \"]],[[0,[],0,\"It would bind to a specific port and IP address and listen for new socket connections.\"]],[[0,[],0,\"For every socket connected, it would add it to it's active socket connections list.\"]],[[0,[],0,\"When any connected socket sends a message to the server, the server will send it to all the sockets in the active socket connections list (except the one who sent it).\"]],[[0,[],0,\"If a connected socket closes connection, the server will remove it from the active list.\"]]]],[1,\"h1\",[[0,[],0,\"II. Getting started\"]]],[1,\"p\",[[0,[],0,\"Create a directory in your projects folder (or wherever you want) called \"],[0,[12],1,\"simple-chat-server\"],[0,[],0,\". You might want to open this directory in your code editor. \"],[0,[13],1,\"All path references here on will be relative to this directory.\"]]],[1,\"p\",[[0,[],0,\"Create a file called \"],[0,[12],1,\"server.nim\"],[0,[],0,\". This would be our core server file. To compile and run the code in this file, we will use \"],[0,[12],1,\"nim compile --run server.nim\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"We'll create a simple socket which will listen to new socket connections on port \"],[0,[12],1,\"5555\"],[0,[],0,\" and then close it.\"]]],[10,0],[10,1],[1,\"p\",[[0,[],0,\"To run the above code, we need to compile it first and then execute the binary. Fortunately, the Nim compiler can do both in a single command by specifying the \"],[0,[12],1,\"--run\"],[0,[],0,\" or \"],[0,[12],1,\"-r\"],[0,[],0,\" argument.\"]]],[1,\"p\",[[0,[],0,\"The compiler pulls all the required packages along with \"],[0,[12],1,\"server.nim\"],[0,[],0,\", transpiles them into C, links the libraries and creates an executable binary file with the same name as our file sans the file extension (in our case it becomes \"],[0,[12],1,\"server\"],[0,[],0,\") in the root of the project directory.\"]]],[10,2],[1,\"p\",[[0,[],0,\"The code ran but it didn't produce any output, except for compiler messages (we will be omitting compiler messages hereon). The server created the socket, listened for incoming connections and closed the socket connection.\"]]],[1,\"p\",[[0,[],0,\"Now we'll make the server wait until it receives new connections.\"]]],[10,3],[10,4],[1,\"p\",[[0,[],0,\"Our server is now actively listening for connections from clients. But… it's kinda stuck there because the server is waiting for a client to connect. We'll have to create one now. \"]]],[1,\"p\",[[0,[],0,\"Create a new file called \"],[0,[12],1,\"client.nim\"],[0,[],0,\". We'll use socket as a client and connect to the server.\"]]],[10,5],[10,6],[1,\"p\",[[0,[],0,\"Execute \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and at the same time, in a new terminal window/tab, execute \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,7],[1,\"p\",[[0,[],0,\"The server started and waited for connections. The moment we started the client, it connected to our socket server on the specified address. Server received this connection and assigned the client to the \"],[0,[12],1,\"client\"],[0,[],0,\" variable, and closed the socket.\"]]],[1,\"p\",[[0,[],0,\"This was a barebones socket server and client. We have to add the real magic - sending and receiving messages.\"]]],[1,\"h1\",[[0,[],0,\"III. Sending and receiving messages\"]]],[1,\"p\",[[0,[],0,\"A socket on an OS is a file descriptor (layman: just a file). When we say that a socket received some data, it actually signifies that some data was written on that file descriptor.\"]]],[1,\"p\",[[0,[],0,\"We have built a server which accepts socket connection and a client which connects to the server. Now, we'll dive into the actual communication between client and server.\"]]],[1,\"p\",[[0,[],0,\"On the client side, we'll prompt user to enter the message to be sent and then send this message over to the server.\"]]],[10,8],[10,9],[1,\"p\",[[0,[],0,\"On the server side, we need to listen to new messages from client. We'll also print the messages received from the client on the console.\"]]],[10,10],[10,11],[1,\"p\",[[0,[],0,\"Let's execute both \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" in two different terminal tabs/windows. Note that I have used \"],[0,[12],1,\"nim c -r\"],[0,[],0,\" which is a shorthand for \"],[0,[12],1,\"nim compile --run\"],[0,[],0,\".\"]]],[10,12],[1,\"p\",[[0,[],0,\"Something's gone horribly wrong here. Not only our client messages are truncated, but they are also mingled with other messages. We sent \"],[0,[14],1,\"Hello, world\"],[0,[],0,\" and \"],[0,[14],1,\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"],[0,[],0,\" as two different messages, but on the server side we're getting them in sort of mingled fashion. Also, our second message is incomplete.\"]]],[1,\"p\",[[0,[],0,\"The culprit here is line \"],[0,[15],1,\"13\"],[0,[],0,\". We specified that we'll only accept 10 characters from the socket. Also, until socket does not have at least 10 characters in its buffer, the \"],[0,[12,16],2,\"recv\"],[0,[],0,\" function will keep blocking indefinitely. The socket will keep reading messages until it has reached that count in its buffer and only then it will return the data. We can do the following,\"]]],[3,\"ol\",[[[0,[],0,\"We'll use some delimiting character. We'll read a very small amount of data from the socket and scan all characters in it and store it in our own buffer. If we encounter the delimiting character while scanning, we'll stop there, dump whatever we read so far in the buffer and return the buffer data.\"]],[[0,[],0,\"We can also use the \"],[0,[12],1,\"timeout\"],[0,[],0,\" parameter in the \"],[0,[12,16],2,\"recv\"],[0,[],0,\". By default, the timeout value is \"],[0,[12],1,\"-1\"],[0,[],0,\", which means we will wait indefinitely until there is enough data in the socket. We can set it to a small amount so that we don't wait indefinitely for new messages.\"]]]],[1,\"p\",[[0,[],0,\"A much better solution here would be to use the \"],[0,[12,17],2,\"recvLine\"],[0,[],0,\" method. It handles the complexity of handling the delimited character for us. It uses \"],[0,[12],1,\"\\\\r\\\\L\"],[0,[],0,\" as the delimiter. This means, on the client side, for each message we send, we would also need to append this delimiter. Let's make the changes accordingly.\"]]],[10,13],[10,14],[10,15],[10,16],[1,\"p\",[[0,[],0,\"If you're getting the above error, it's an indication that the port on which our server listens is being reserved for some reason. It happens when some process which is listening on that port is still running. Though in our case, even though we stopped the server, it's still giving us this error. The reason here is something called as \"],[0,[14],1,\"Linger Time\"],[0,[],0,\". When a socket is closed (especially TCP socket), some data which is marked to be sent, still exists in the socket's send buffer. Unless the buffer is emptied or a timeout period (usually 30 seconds) is passed, the system reserves the port.\"]]],[1,\"p\",[[0,[],0,\"To fix this, we use the \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of sockets. If a socket is created with this option enabled, instead of throwing an error, it checks whether a socket which is listening on the same port is in lingering state. If it is, the socket will use the same address with an assumption that the earlier socket will release the port soon. In Nim, we have the \"],[0,[12],1,\"OptReuseAddr\"],[0,[],0,\" option which can be set as \"],[0,[12],1,\"true\"],[0,[],0,\" to enable \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of the socket.\"]]],[10,17],[1,\"p\",[[0,[],0,\"Let's run the server and clients again.\"]]],[10,18],[1,\"p\",[[0,[],0,\"As you can see now, the messages are no longer truncated and they are received in the same manner as sent by the client.\"]]],[1,\"p\",[[0,[],0,\"Now that we have spawned our basic server which accepts messages from a client, let's spawn another client and see what happens. Don't kill the currently running \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" and instead run \"],[0,[12],1,\"client.nim\"],[0,[],0,\" again in a new tab/terminal and send a few messages.\"]]],[10,19],[1,\"p\",[[0,[],0,\"If you check the tab/terminal running our server, you wouldn't find these messages at all. The server did not receive any message at all from our new client. Can you identify the problem?\"]]],[1,\"p\",[[0,[],0,\"Notice the lines \"],[0,[18],1,\"9-11\"],[0,[],0,\", where we wait and accept connection from a client. The moment a client connects, we never again accept and listen to data from new clients. As soon as we get a client, we just listen to new data from that client. What we can do is, as we listen to new data from one client, we'll also accept new connections from other clients. Our flow would go like this, \"]]],[10,20],[1,\"p\",[[0,[],0,\"However, there is a slight problem in step 2. In our server socket, as seen here, the server will block the program flow while it is listening for new clients since \"],[0,[12,19],2,\"server.accept()\"],[0,[],0,\" is a blocking function. Thus our messages will only be read once a client connects to the server. This is not even an acceptable case for our chat server.\"]]],[1,\"p\",[[0,[],0,\"Fortunately, sockets have an option to run in non-blocking mode. This means, our \"],[0,[12],1,\"accept()\"],[0,[],0,\" and \"],[0,[12],1,\"recv()\"],[0,[],0,\" functions will no longer block the code. If they have anything meaningful to return (like an incoming socket connection or a message), they will return that and continue execution. Otherwise, they will throw an error. Which means, we have to keep checking for new connections or messages and also handle the error in case we don't get any. \"]]],[1,\"p\",[[0,[],0,\"In Nim, we enable non-blocking mode using the \"],[0,[12,20],2,\"setBlocking()\"],[0,[],0,\" function of the underlying native socket. We'll also store all our connected sockets in a list so that we can iterate over them and receive messages from each of them. We'll do both, accept new connections and receive data from sockets in a single infinite loop, so that we keep accepting new connections while we receive messages from existing ones. Let's give this a try.\"]]],[10,21],[10,22],[1,\"p\",[[0,[],0,\"Let's execute our server now with multiple clients.\"]]],[10,23],[1,\"p\",[[0,[],0,\"Yay! We have it now. Our server accepts and receives messages from multiple clients. We have also managed client disconnections. What our server should do now is send messages from one client to other clients, which a chat server should do. Let's do it.\"]]],[10,24],[1,\"p\",[[0,[],0,\"We can build a small GUI or use \"],[0,[21],1,\"ncurses\"],[0,[],0,\" to do that interactively in terminal. Since both of these are outside the scope of this tutorial, we'll make a hack for now. We'll create two different types of clients - one for sending messages and one for receiving. We call them \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" respectively. \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" is exactly same as our \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,25],[1,\"p\",[[0,[],0,\"We would need some minor changes in our \"],[0,[12],1,\"server.nim\"],[0,[],0,\". Once the server receives a message, it will send it to all connected clients, except the one who sent the message.\"]]],[10,26],[1,\"p\",[[0,[],0,\"Open three terminals - one for \"],[0,[12],1,\"server.nim\"],[0,[],0,\", one for \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and one for \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" - and execute the respective files. Try sending some messages from sending client and see if you get those in the receiving client.\"]]],[10,27],[1,\"p\",[[0,[],0,\"You can open multiple terminals with \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and send messages to one another. You would observer that all receiving clients receive messages from all sending clients. This is because our server is current broadcasting all messages to everyone. We can limit this behavior, but we can skip that for now.\"]]],[1,\"p\",[[0,[],0,\"With this, you have completed a simple chat server with somewhat hacky clients (we'll fix that later). However, if you're working on a laptop, you would have noticed the noise of your CPU fan every time you run the server. If you're curious enough, check the output of \"],[0,[12],1,\"top\"],[0,[],0,\" command and you'll notice that the server process is taking up some chunk of CPU.\"]]],[10,28],[1,\"p\",[[0,[],0,\"It seems our code needs some fixing. Indeed it does. The way we are handling new connections and incoming messages on our server is very inefficient. We are persistently asking the socket for new connection and a new message, that too in an infinite loop. If socket was an actual person, it would mean as if we are pestering him every now and then for new information.\"]]],[1,\"p\",[[0,[],0,\"We have a solution for this. We'll make use of something that is core of lot of chat servers and surprisingly available on all platforms - \"],[0,[12,22],2,\"select\"],[0,[],0,\".\"]]],[1,\"h1\",[[0,[],0,\"IV. Using \"],[0,[12],1,\"select\"],[0,[],0,\" for optimization\"]]],[1,\"p\",[[0,[],0,\"Of all the amazing things that happened in Unix world, one was \"],[0,[12],1,\"select\"],[0,[],0,\". Originally appeared in BSD, \"],[0,[12],1,\"select\"],[0,[],0,\" was quickly adopted in other popular OS. It's a kernel level utility which tells us which file descriptors are ready to be read, written or have an error condition. It does this using lower level file monitoring or interrupts, instead of iterating through all files and repeatedly checking if they have changed. This is cleaner, efficient and puts minimal load on our CPU.\"]]],[1,\"h3\",[[0,[],0,\"How to use \"],[0,[12],1,\"select\"],[0,[],0,\" with our chat server?\"]]],[1,\"p\",[[0,[],0,\"Since all connected clients are nothing but file descriptors, we'll tell \"],[0,[12],1,\"select\"],[0,[],0,\" to monitor these given file descriptors and notify us when there's any data on them that is yet to be read. Once \"],[0,[12],1,\"select\"],[0,[],0,\" notifies us, it will give us a list of file descriptors which contain unread data. We'll iterate over these and see what data they have. Remember, when a socket receives data, it essentially means that it has data to be read.\"]]],[1,\"p\",[[0,[12],1,\"select\"],[0,[],0,\" in Nim is a part of  \"],[0,[12],1,\"selectors\"],[0,[],0,\" package. It has two important methods of our concern - \"],[0,[12,23],2,\"registerHandle\"],[0,[],0,\" and \"],[0,[12,24],2,\"select\"],[0,[],0,\". \"],[0,[12],1,\"registerHandle\"],[0,[],0,\" takes in a file description, the events we want to listen to (read, write, error) and optional data that we wish to receive when the event is triggered. \"],[0,[12],1,\"select\"],[0,[],0,\" takes in the timeout period until which it will wait for events on the registered handles (file descriptors). If we want \"],[0,[12],1,\"select\"],[0,[],0,\" to block our code, we can set timeout as \"],[0,[12],1,\"-1\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Let's dive into the code.\"]]],[10,29],[10,30],[1,\"p\",[[0,[],0,\"Let's run the program now and see our CPU usage.\"]]],[10,31],[10,32],[1,\"p\",[[0,[],0,\"It's not even showing in the top CPU consuming processes. That's great.\"]]],[10,33],[1,\"p\",[[0,[],0,\"With this we complete our basic chat server. I know clients are still messy, but for that, we would need to dive deep into the interactivity part which is beyond the scope of this tutorial. Next up, we can add clients with identity information so that server can uniquely tag who sent which message, 1:1 messaging instead of group messaging and an interactive UI. I might write a follow-up article with all of these in future.\"]]],[1,\"p\",[[0,[],0,\"Nim is an amazing language. To be able to do so much, in so little and clean code is amazing. We haven't touched on code optimization yet, but I believe we can use some micro-optimizations to make this code even faster. It's been a great exercise for me to move away from Python and learn about a new language this way.\"]]],[1,\"p\",[[0,[],0,\"Let me know about your feedback. If you feel there were any issues with the tutorial, or writing style, or any errors in text or code, or any difficulty in understanding, or if you just wanna give a compliment, leave your comments below.\"]]]]}","created_at_ts":1548364816430,"created_at":"2019-01-24 21:20:16"},{"id":"5c4a2c17f7e7b7692d246edb","post_id":"5c3229bfd149624e397d2920","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **1** All socket related functions, classes, utilities are in the [`net`](https://nim-lang.org/docs/net.html) package. We could have also used [`nativesockets`](https://nim-lang.org/docs/nativesockets.html) package which is exclusively for sockets. But it handles sockets at very low-level which might just lengthen our code.\\n> **3** Initialize our server socket using [`newSocket`](https://nim-lang.org/docs/net.html#newSocket,Domain,SockType,Protocol). This function also accepts some parameters which we will discuss in-depth later. For now, we are okay leaving it to the default values.\\n> **4-5** Set the socket to listen to new connections on port `5555` and start accepting new connections from other sockets. If [`address` parameter](https://nim-lang.org/docs/net.html#bindAddr,Socket,string) is not mentioned by default, the socket will listen to requests from all IP addresses.\\n> **8** Close our socket server. It is very important to close socket connections if they are no longer required. This is considered a clean way to end TCP connections with proper end-of-connection acknowledgement.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Hint: used config file '/etc/nim.cfg' [Conf]\\n(out)Hint: system [Processing]\\n(out)Hint: server [Processing]\\n(out)Hint: net [Processing]\\n(out)Hint: nativesockets [Processing]\\n(out)Hint: os [Processing]\\n(out)Hint: strutils [Processing]\\n(out)Hint: parseutils [Processing]\\n(out)Hint: math [Processing]\\n(out)Hint: algorithm [Processing]\\n(out)Hint: times [Processing]\\n(out)Hint: posix [Processing]\\n(out)Hint: ospaths [Processing]\\n(out)Hint: options [Processing]\\n(out)Hint: typetraits [Processing]\\n(out)Hint: sets [Processing]\\n(out)Hint: hashes [Processing]\\n(out)CC: server\\n(out)CC: stdlib_system\\n(out)CC: stdlib_net\\n(out)Hint:  [Link]\\n(out)Hint: operation successful (26847 lines compiled; 0.903 sec total; 47.43MiB peakmem; Debug Build) [SuccessX]\\n(out)Hint: /home/tejas/Projects/simple-chat-server/server  [Exec]</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"8-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Similar to the server, we need a socket object. The only difference here is, unlike server, which listens to connections, a client knows the server address and connects to it using the [`connect`](https://nim-lang.org/docs/net.html#connect,Socket,string) method. Thus, a client needs to have the address and port of the server.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"6-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message)\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **7** Once the user sends a message, we'll prompt for another message, sort of how chat applications provide a text box to send a message.\\n> **8-10** Prompt the user for a chat message and using the client socket, [`send`](https://nim-lang.org/docs/net.html#send,Socket,string) it to the server. Also, we are using [`readLine`](https://nim-lang.org/docs/system.html#readLine,File) so that the messsage gets stored only when user presses <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-1\\\" data-language=\\\"server.nim\\\" data-line=\\\"11-18\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recv(10)\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **12** Server will keep listening to new messages from all connected clients.\\n> **13** Read a few characters from the socket.\\n> **15-16** When a socket disconnects, it sends an empty string before disconnection. This can be used as an indication for the server that the client has disconnected. Since we are dealing with only one client, we'll stop receiving additional messages and exit the loop.\\n> **18** Print the received message on the console.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, wor\\n(out)Server: received from client: ldLorem ip\\n(out)Server: received from client: sum dolor \\n(out)Server: received from client: sit amet, \\n(out)Server: received from client: consectetu\\n(out)Server: received from client: r adipisci</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"13\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"If the server and client are still running, kill the processes with <kbd>Ctrl</kbd>+<kbd>C</kbd>. Execute `server.nim` and `client.nim` again.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)server.nim(6)            server\\n(out)net.nim(738)             bindAddr\\n(out)oserr.nim(110)           raiseOSError\\n(out)Error: unhandled exception: Address already in use [OSError]\\n(out)Error: execution of an external program failed: '/home/tejas/Projects/simple-chat-server/server '</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"4\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, world\\n(out)Server: received from client: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola, mundo\\n(out)> What's 1 + 1? Answer is 10 in binary.\\n(out)> </code></pre>\"}],[\"markdown\",{\"markdown\":\"1. Have an infinte loop (`while true`) which will keep our server running.\\n2. Inside the loop, accept new client connections and add those into our client list.\\n3. For each client in the client list, check if there is any data.\\n4. If there is any data, print it out.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"6,10-11,14-37\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **6** Set the socket as non-blocking. We set it on the low-level native socket API.\\n> **11** We need to store our connected clients in a list so that we can iterate over them to get messages.\\n> **13-37** Check if there are any existing connections. If yes, add them to the connected socket list. Then for each connected socket, check whether there are any messages to be read.\\n> **17** Add the connected socket in our clients list.\\n> **19** In non-blocking mode, [`accept`](https://nim-lang.org/docs/net.html#accept,Socket,Socket) throws an `OSError` if there are no pending connections at that moment. We ignore that exception because it's understandable that we won't have any pending connections all the time.\\n> **22** We maintain a list of clients which disconnected so that we remove those from our client list.\\n> **24** Iterate over all the connected clients and receive messages from them one by one.\\n> **26** We set the `timeout` to `1` since [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) call still blocks the code as the default timeout value is `-1`, which means block indefinitely till message is received.\\n> **29** Mark the client for removal if it has disconnected.\\n> **32** If no message is received within the timeout period, [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) throws a `TimeoutError`. Since we are operating in a non-blocking mode now, we shall ignore this error.\\n> **35-37** Remove any client marked for removal from the clients list.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: Hola\\n(out)Server: received from client: Foo\\n(out)Server: received from client: Bar\\n(out)Server: received from client: \\n(out)Server: client disconnected\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> Foo\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola\\n(out)> Bar\\n(out)> ^CTraceback (most recent call last)\\n(out)client.nim(9)            client\\n(out)sysio.nim(185)           readLine\\n(out)sysio.nim(158)           readLine\\n(out)SIGINT: Interrupted by Ctrl-C.</code></pre>\"}],[\"markdown\",{\"markdown\":\"There's a major catch here. Since sending and receiving messages is a simultaneous process, we would need some kinda GUI to handle these tasks asynchronously. Just think of it, suppose you are a client chatting on our server, you wouldn't receive any messages until you input a message because the `stdin.readLine()` will block all the code until the user hits <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client_sending.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\\n<pre data-language=\\\"client_receiving.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  let receivedMessage: string = client.recvLine()\\n  stdout.writeLine(\\\"Message: \\\", receivedMessage)\\n\\nclient.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"30-36\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n        continue\\n\\n      for receivingClient in clients:\\n        if receivingClient == client:\\n          continue\\n\\n        receivingClient.send(message & \\\"\\\\r\\\\L\\\")\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: What are you doing?</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> What are you doing?\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: What are you doing?</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/server-cpu-usage.png\",\"cardWidth\":\"\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"3-4,7,14,18-22,25-27,30-51,55\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\nimport os\\nimport selectors\\n\\nvar server: Socket = newSocket()\\nvar select: Selector[int] = newSelector[int]()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nselect.registerHandle(server.getFd(), {Event.Read}, -1)\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  var results: seq[ReadyKey] = select.select(-1)\\n\\n  for result in results:\\n    if Event.Read in result.events:\\n      if result.fd.SocketHandle == server.getFd():\\n        var client: Socket = new(Socket)\\n        server.accept(client)\\n\\n        client.getFd().setBlocking(false)\\n        select.registerHandle(client.getFd(), {Event.Read}, -1)\\n        clients.add(client)\\n        stdout.writeLine(\\\"Server: client connected\\\")\\n      else:\\n        var sourceClient: Socket = newSocket(result.fd.SocketHandle)\\n        var message = sourceClient.recvLine()\\n\\n        if message == \\\"\\\":\\n          var clientsToRemove: seq[int] = @[]\\n\\n          for index, client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              clientsToRemove.add(index)\\n\\n          for index in clientsToRemove:\\n            var client: Socket = clients[index]\\n            select.unregister(result.fd)\\n            clients.del(index)\\n            stdout.writeLine(\\\"Server: client disconnected\\\")\\n        else:\\n          stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\n          for client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              continue\\n\\n            client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nselect.close()\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Import the packages required for `select` functions. Note that we also imported `os` package. This is because, in Nim v0.18 and lower, `OSErrorCode` is not explicity imported in the `select` library. This is fixed in later versions.\\n> **7** We define our selector. It requires a type too. This would be the type of the data that we will associate in `registerHandle` method.\\n> **14** Register our server for read events. Note that read events on server socket would be incoming socket connections. Since we don't have any data associated with our server, we'll pass data as `-1`.\\n> **18** `select` returns a list of events along with their file descriptors for which the specified event was triggered.\\n> **21** We are only interested in read events.\\n> **22** The result received from `select` method contains the list of `events` that were captured and the file descriptor `fd` for which the event was triggered. Though our `fd` is enough, we compare the underlying socket for that file descriptor. If the one that triggered a read event was our server, it must mean that we recevied an incoming connection from a client.\\n> **26** Since clients are also handled by `select` we'll set them as non-blocking.\\n> **27** Just like our server, listen to read events of our client. Read event on a connected socket indicates that a new message has been arrived waiting to be read.\\n> **30** If the read event was not triggered by server, then it must be client. This means we received a message from a client which we have to broadcast to other clients.\\n> **31** Working with higher-level socket abstractions is easier. So, we convert our low-level socket from file descriptor in the result into a higher-level socket.\\n> **34-45** If a client is disconnected, remove it from clients list and [`unregister`](https://nim-lang.org/docs/selectors.html#unregister,Selector[T],) events for that client.\\n> **50** We could have compared the two objects directly. But since the newly created `sourceClient` object as a copy, it's identity would be different. This would cause an inequality even though the underlying sockets are same.\\n> **55** Like sockets, even select should be closed to signal the kernel that we are no longer listening to any events. This is a good practice to cleanly close everything before shutting down our program.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: select seems to be doing great</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> select seems to be doing great\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: select seems to be doing great</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/low-cpu-server.png\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://nim-lang.org\"]],[\"a\",[\"href\",\"https://nim-lang.org/install.html\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/Editor-Support\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/\"]],[\"a\",[\"href\",\"https://www.techopedia.com/definition/7154/full-duplex-fdx\"]],[\"a\",[\"href\",\"https://realtimeapi.io/hub/http-long-polling/\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/BOSH_(protocol)\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/Comet_(programming)\"]],[\"a\",[\"href\",\"https://www.tutorialspoint.com/unix_sockets/what_is_socket.htm\"]],[\"a\",[\"href\",\"https://www.html5rocks.com/en/tutorials/websockets/basics/\"]],[\"a\",[\"href\",\"https://caniuse.com/#feat=websockets\"]],[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"#server-snippet-1.13\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recv,Socket,int\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recvLine,Socket\"]],[\"a\",[\"href\",\"#server-snippet-2.9-11\"]],[\"a\",[\"href\",\"#server-snippet-2.10\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/nativesockets.html#setBlocking,SocketHandle,bool\"]],[\"a\",[\"href\",\"https://www.linuxjournal.com/content/getting-started-ncurses\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man2/select.2.html\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#registerHandle,Selector[T],,set[Event],T\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#select,Selector[T],int\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Build a simple chat server using nothing except sockets in Nim which pushes messages sent by any client to all other connected clients.\"]]],[1,\"p\",[[0,[],0,\"Since I'm at home now, on a break, not really doing anything, I decided to learn this new programming language called \"],[0,[0],1,\"Nim\"],[0,[],0,\" which is a perfect fusion between the elegance of Python and performance of C. What's better way to start with a language than actually creating something meaningful? So, I decided to not only create a simple chat server, but also write a step-by-step tutorial about it.\"]]],[1,\"h1\",[[0,[],0,\"Prerequisites\"]]],[3,\"ul\",[[[0,[],0,\"Install Nim compiler. You can get the download links or installation commands from their \"],[0,[1],1,\"installation\"],[0,[],0,\" page. The compiler version in this tutorial is 0.18.0, though newer versions should not have any issue.\"]],[[0,[],0,\"Get Nim plugins for your editor. Again you can refer to the \"],[0,[2],1,\"editor plugins page\"],[0,[],0,\" on their \"],[0,[3],1,\"GitHub\"],[0,[],0,\" \"],[0,[4],1,\"wiki\"],[0,[],0,\".\"]]]],[1,\"h1\",[[0,[],0,\"Problem statement\"]]],[1,\"blockquote\",[[0,[],0,\"Our chat server will be a single room (channel) chat where anyone can talk with everyone. When a user types in a message, it is sent to all other users connected to the chat server.\"]]],[1,\"p\",[[0,[],0,\"In any chat application, the core responsibility of a server is just to act as a relay and send messages from one client to the other. The server should be sufficiently fast enough to accept newer clients who join, read messages from the clients, broadcast those messages to all other clients, without showing any noticeable delay for any of the clients. This would truly make it an instant messaging platform.\"]]],[1,\"h1\",[[0,[],0,\"I. Plan\"]]],[1,\"p\",[[0,[],0,\"We need a \"],[0,[5],1,\"full duplex\"],[0,[],0,\" link between the server and the client so that messages can be sent and received at the same time. Of all the various methods like \"],[0,[6],1,\"long-polling\"],[0,[],0,\", \"],[0,[7],1,\"BOSH\"],[0,[],0,\", \"],[0,[8],1,\"comet\"],[0,[],0,\", my recommendation is to use \"],[0,[9],1,\"sockets\"],[0,[],0,\" (\"],[0,[10],1,\"web sockets\"],[0,[],0,\" for \"],[0,[11],1,\"browsers\"],[0,[],0,\"). They are truly bi-directional, light-weight and efficient for such use cases.\"]]],[3,\"ol\",[[[0,[],0,\"Our server would act as a socket server. \"]],[[0,[],0,\"It would bind to a specific port and IP address and listen for new socket connections.\"]],[[0,[],0,\"For every socket connected, it would add it to it's active socket connections list.\"]],[[0,[],0,\"When any connected socket sends a message to the server, the server will send it to all the sockets in the active socket connections list (except the one who sent it).\"]],[[0,[],0,\"If a connected socket closes connection, the server will remove it from the active list.\"]]]],[1,\"h1\",[[0,[],0,\"II. Getting started\"]]],[1,\"p\",[[0,[],0,\"Create a directory in your projects folder (or wherever you want) called \"],[0,[12],1,\"simple-chat-server\"],[0,[],0,\". You might want to open this directory in your code editor. \"],[0,[13],1,\"All path references here on will be relative to this directory.\"]]],[1,\"p\",[[0,[],0,\"Create a file called \"],[0,[12],1,\"server.nim\"],[0,[],0,\". This would be our core server file. To compile and run the code in this file, we will use \"],[0,[12],1,\"nim compile --run server.nim\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"We'll create a simple socket which will listen to new socket connections on port \"],[0,[12],1,\"5555\"],[0,[],0,\" and then close it.\"]]],[10,0],[10,1],[1,\"p\",[[0,[],0,\"To run the above code, we need to compile it first and then execute the binary. Fortunately, the Nim compiler can do both in a single command by specifying the \"],[0,[12],1,\"--run\"],[0,[],0,\" or \"],[0,[12],1,\"-r\"],[0,[],0,\" argument.\"]]],[1,\"p\",[[0,[],0,\"The compiler pulls all the required packages along with \"],[0,[12],1,\"server.nim\"],[0,[],0,\", transpiles them into C, links the libraries and creates an executable binary file with the same name as our file sans the file extension (in our case it becomes \"],[0,[12],1,\"server\"],[0,[],0,\") in the root of the project directory.\"]]],[10,2],[1,\"p\",[[0,[],0,\"The code ran but it didn't produce any output, except for compiler messages (we will be omitting compiler messages hereon). The server created the socket, listened for incoming connections and closed the socket connection.\"]]],[1,\"p\",[[0,[],0,\"Now we'll make the server wait until it receives new connections.\"]]],[10,3],[10,4],[1,\"p\",[[0,[],0,\"Our server is now actively listening for connections from clients. But… it's kinda stuck there because the server is waiting for a client to connect. We'll have to create one now. \"]]],[1,\"p\",[[0,[],0,\"Create a new file called \"],[0,[12],1,\"client.nim\"],[0,[],0,\". We'll use socket as a client and connect to the server.\"]]],[10,5],[10,6],[1,\"p\",[[0,[],0,\"Execute \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and at the same time, in a new terminal window/tab, execute \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,7],[1,\"p\",[[0,[],0,\"The server started and waited for connections. The moment we started the client, it connected to our socket server on the specified address. Server received this connection and assigned the client to the \"],[0,[12],1,\"client\"],[0,[],0,\" variable, and closed the socket.\"]]],[1,\"p\",[[0,[],0,\"This was a barebones socket server and client. We have to add the real magic - sending and receiving messages.\"]]],[1,\"h1\",[[0,[],0,\"III. Sending and receiving messages\"]]],[1,\"p\",[[0,[],0,\"A socket on an OS is a file descriptor (layman: just a file). When we say that a socket received some data, it actually signifies that some data was written on that file descriptor.\"]]],[1,\"p\",[[0,[],0,\"We have built a server which accepts socket connection and a client which connects to the server. Now, we'll dive into the actual communication between client and server.\"]]],[1,\"p\",[[0,[],0,\"On the client side, we'll prompt user to enter the message to be sent and then send this message over to the server.\"]]],[10,8],[10,9],[1,\"p\",[[0,[],0,\"On the server side, we need to listen to new messages from client. We'll also print the messages received from the client on the console.\"]]],[10,10],[10,11],[1,\"p\",[[0,[],0,\"Let's execute both \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" in two different terminal tabs/windows. Note that I have used \"],[0,[12],1,\"nim c -r\"],[0,[],0,\" which is a shorthand for \"],[0,[12],1,\"nim compile --run\"],[0,[],0,\".\"]]],[10,12],[1,\"p\",[[0,[],0,\"Something's gone horribly wrong here. Not only our client messages are truncated, but they are also mingled with other messages. We sent \"],[0,[14],1,\"Hello, world\"],[0,[],0,\" and \"],[0,[14],1,\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"],[0,[],0,\" as two different messages, but on the server side we're getting them in sort of mingled fashion. Also, our second message is incomplete.\"]]],[1,\"p\",[[0,[],0,\"The culprit here is line \"],[0,[15],1,\"13\"],[0,[],0,\". We specified that we'll only accept 10 characters from the socket. Also, until socket does not have at least 10 characters in its buffer, the \"],[0,[12,16],2,\"recv\"],[0,[],0,\" function will keep blocking indefinitely. The socket will keep reading messages until it has reached that count in its buffer and only then it will return the data. We can do the following,\"]]],[3,\"ol\",[[[0,[],0,\"We'll use some delimiting character. We'll read a very small amount of data from the socket and scan all characters in it and store it in our own buffer. If we encounter the delimiting character while scanning, we'll stop there, dump whatever we read so far in the buffer and return the buffer data.\"]],[[0,[],0,\"We can also use the \"],[0,[12],1,\"timeout\"],[0,[],0,\" parameter in the \"],[0,[12,16],2,\"recv\"],[0,[],0,\". By default, the timeout value is \"],[0,[12],1,\"-1\"],[0,[],0,\", which means we will wait indefinitely until there is enough data in the socket. We can set it to a small amount so that we don't wait indefinitely for new messages.\"]]]],[1,\"p\",[[0,[],0,\"A much better solution here would be to use the \"],[0,[12,17],2,\"recvLine\"],[0,[],0,\" method. It handles the complexity of handling the delimited character for us. It uses \"],[0,[12],1,\"\\\\r\\\\L\"],[0,[],0,\" as the delimiter. This means, on the client side, for each message we send, we would also need to append this delimiter. Let's make the changes accordingly.\"]]],[10,13],[10,14],[10,15],[10,16],[1,\"p\",[[0,[],0,\"If you're getting the above error, it's an indication that the port on which our server listens is being reserved for some reason. It happens when some process which is listening on that port is still running. Though in our case, even though we stopped the server, it's still giving us this error. The reason here is something called as \"],[0,[14],1,\"Linger Time\"],[0,[],0,\". When a socket is closed (especially TCP socket), some data which is marked to be sent, still exists in the socket's send buffer. Unless the buffer is emptied or a timeout period (usually 30 seconds) is passed, the system reserves the port.\"]]],[1,\"p\",[[0,[],0,\"To fix this, we use the \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of sockets. If a socket is created with this option enabled, instead of throwing an error, it checks whether a socket which is listening on the same port is in lingering state. If it is, the socket will use the same address with an assumption that the earlier socket will release the port soon. In Nim, we have the \"],[0,[12],1,\"OptReuseAddr\"],[0,[],0,\" option which can be set as \"],[0,[12],1,\"true\"],[0,[],0,\" to enable \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of the socket.\"]]],[10,17],[1,\"p\",[[0,[],0,\"Let's run the server and clients again.\"]]],[10,18],[1,\"p\",[[0,[],0,\"As you can see now, the messages are no longer truncated and they are received in the same manner as sent by the client.\"]]],[1,\"p\",[[0,[],0,\"Now that we have spawned our basic server which accepts messages from a client, let's spawn another client and see what happens. Don't kill the currently running \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" and instead run \"],[0,[12],1,\"client.nim\"],[0,[],0,\" again in a new tab/terminal and send a few messages.\"]]],[10,19],[1,\"p\",[[0,[],0,\"If you check the tab/terminal running our server, you wouldn't find these messages at all. The server did not receive any message at all from our new client. Can you identify the problem?\"]]],[1,\"p\",[[0,[],0,\"Notice the lines \"],[0,[18],1,\"9-11\"],[0,[],0,\", where we wait and accept connection from a client. The moment a client connects, we never again accept and listen to data from new clients. As soon as we get a client, we just listen to new data from that client. What we can do is, as we listen to new data from one client, we'll also accept new connections from other clients. Our flow would go like this, \"]]],[10,20],[1,\"p\",[[0,[],0,\"However, there is a slight problem in step 2. In our server socket, as seen here, the server will block the program flow while it is listening for new clients since \"],[0,[12,19],2,\"server.accept()\"],[0,[],0,\" is a blocking function. Thus our messages will only be read once a client connects to the server. This is not even an acceptable case for our chat server.\"]]],[1,\"p\",[[0,[],0,\"Fortunately, sockets have an option to run in non-blocking mode. This means, our \"],[0,[12],1,\"accept()\"],[0,[],0,\" and \"],[0,[12],1,\"recv()\"],[0,[],0,\" functions will no longer block the code. If they have anything meaningful to return (like an incoming socket connection or a message), they will return that and continue execution. Otherwise, they will throw an error. Which means, we have to keep checking for new connections or messages and also handle the error in case we don't get any. \"]]],[1,\"p\",[[0,[],0,\"In Nim, we enable non-blocking mode using the \"],[0,[12,20],2,\"setBlocking()\"],[0,[],0,\" function of the underlying native socket. We'll also store all our connected sockets in a list so that we can iterate over them and receive messages from each of them. We'll do both, accept new connections and receive data from sockets in a single infinite loop, so that we keep accepting new connections while we receive messages from existing ones. Let's give this a try.\"]]],[10,21],[10,22],[1,\"p\",[[0,[],0,\"Let's execute our server now with multiple clients.\"]]],[10,23],[1,\"p\",[[0,[],0,\"Yay! We have it now. Our server accepts and receives messages from multiple clients. We have also managed client disconnections. What our server should do now is send messages from one client to other clients, which a chat server should do. Let's do it.\"]]],[10,24],[1,\"p\",[[0,[],0,\"We can build a small GUI or use \"],[0,[21],1,\"ncurses\"],[0,[],0,\" to do that interactively in terminal. Since both of these are outside the scope of this tutorial, we'll make a hack for now. We'll create two different types of clients - one for sending messages and one for receiving. We call them \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" respectively. \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" is exactly same as our \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,25],[1,\"p\",[[0,[],0,\"We would need some minor changes in our \"],[0,[12],1,\"server.nim\"],[0,[],0,\". Once the server receives a message, it will send it to all connected clients, except the one who sent the message.\"]]],[10,26],[1,\"p\",[[0,[],0,\"Open three terminals - one for \"],[0,[12],1,\"server.nim\"],[0,[],0,\", one for \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and one for \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" - and execute the respective files. Try sending some messages from sending client and see if you get those in the receiving client.\"]]],[10,27],[1,\"p\",[[0,[],0,\"You can open multiple terminals with \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and send messages to one another. You would observer that all receiving clients receive messages from all sending clients. This is because our server is current broadcasting all messages to everyone. We can limit this behavior, but we can skip that for now.\"]]],[1,\"p\",[[0,[],0,\"With this, you have completed a simple chat server with somewhat hacky clients (we'll fix that later). However, if you're working on a laptop, you would have noticed the noise of your CPU fan every time you run the server. If you're curious enough, check the output of \"],[0,[12],1,\"top\"],[0,[],0,\" command and you'll notice that the server process is taking up some chunk of CPU.\"]]],[10,28],[1,\"p\",[[0,[],0,\"It seems our code needs some fixing. Indeed it does. The way we are handling new connections and incoming messages on our server is very inefficient. We are persistently asking the socket for new connection and a new message, that too in an infinite loop. If socket was an actual person, it would mean as if we are pestering him every now and then for new information.\"]]],[1,\"p\",[[0,[],0,\"We have a solution for this. We'll make use of something that is core of lot of chat servers and surprisingly available on all platforms - \"],[0,[12,22],2,\"select\"],[0,[],0,\".\"]]],[1,\"h1\",[[0,[],0,\"IV. Using \"],[0,[12],1,\"select\"],[0,[],0,\" for optimization\"]]],[1,\"p\",[[0,[],0,\"Of all the amazing things that happened in Unix world, one was \"],[0,[12],1,\"select\"],[0,[],0,\". Originally appeared in BSD, \"],[0,[12],1,\"select\"],[0,[],0,\" was quickly adopted in other popular OS. It's a kernel level utility which tells us which file descriptors are ready to be read, written or have an error condition. It does this using lower level file monitoring or interrupts, instead of iterating through all files and repeatedly checking if they have changed. This is cleaner, efficient and puts minimal load on our CPU.\"]]],[1,\"h3\",[[0,[],0,\"How to use \"],[0,[12],1,\"select\"],[0,[],0,\" with our chat server?\"]]],[1,\"p\",[[0,[],0,\"Since all connected clients are nothing but file descriptors, we'll tell \"],[0,[12],1,\"select\"],[0,[],0,\" to monitor these given file descriptors and notify us when there's any data on them that is yet to be read. Once \"],[0,[12],1,\"select\"],[0,[],0,\" notifies us, it will give us a list of file descriptors which contain unread data. We'll iterate over these and see what data they have. Remember, when a socket receives data, it essentially means that it has data to be read.\"]]],[1,\"p\",[[0,[12],1,\"select\"],[0,[],0,\" in Nim is a part of  \"],[0,[12],1,\"selectors\"],[0,[],0,\" package. It has two important methods of our concern - \"],[0,[12,23],2,\"registerHandle\"],[0,[],0,\" and \"],[0,[12,24],2,\"select\"],[0,[],0,\". \"],[0,[12],1,\"registerHandle\"],[0,[],0,\" takes in a file description, the events we want to listen to (read, write, error) and optional data that we wish to receive when the event is triggered. \"],[0,[12],1,\"select\"],[0,[],0,\" takes in the timeout period until which it will wait for events on the registered handles (file descriptors). If we want \"],[0,[12],1,\"select\"],[0,[],0,\" to block our code, we can set timeout as \"],[0,[12],1,\"-1\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Let's dive into the code.\"]]],[10,29],[10,30],[1,\"p\",[[0,[],0,\"Let's run the program now and see our CPU usage.\"]]],[10,31],[10,32],[1,\"p\",[[0,[],0,\"It's not even showing in the top CPU consuming processes. That's great.\"]]],[10,33],[1,\"p\",[[0,[],0,\"With this we complete our basic chat server. I know clients are still messy, but for that, we would need to dive deep into the interactivity part which is beyond the scope of this tutorial. Next up, we can add clients with identity information so that server can uniquely tag who sent which message, 1:1 messaging instead of group messaging and an interactive UI. I might write a follow-up article with all of these in future.\"]]],[1,\"p\",[[0,[],0,\"Nim is an amazing language. To be able to do so much, in so little and clean code is amazing. We haven't touched on code optimization yet, but I believe we can use some micro-optimizations to make this code even faster. It's been a great exercise for me to move away from Python.\"]]],[1,\"p\",[[0,[],0,\"Let me know about your feedback. If you feel there were any issues with the tutorial, or writing style, or any errors in text or code, or any difficulty in understanding, or if you just wanna give a compliment, leave your comments below.\"]]]]}","created_at_ts":1548364822985,"created_at":"2019-01-24 21:20:23"},{"id":"5c4a2c2cf7e7b7692d246edc","post_id":"5c3229bfd149624e397d2920","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **1** All socket related functions, classes, utilities are in the [`net`](https://nim-lang.org/docs/net.html) package. We could have also used [`nativesockets`](https://nim-lang.org/docs/nativesockets.html) package which is exclusively for sockets. But it handles sockets at very low-level which might just lengthen our code.\\n> **3** Initialize our server socket using [`newSocket`](https://nim-lang.org/docs/net.html#newSocket,Domain,SockType,Protocol). This function also accepts some parameters which we will discuss in-depth later. For now, we are okay leaving it to the default values.\\n> **4-5** Set the socket to listen to new connections on port `5555` and start accepting new connections from other sockets. If [`address` parameter](https://nim-lang.org/docs/net.html#bindAddr,Socket,string) is not mentioned by default, the socket will listen to requests from all IP addresses.\\n> **8** Close our socket server. It is very important to close socket connections if they are no longer required. This is considered a clean way to end TCP connections with proper end-of-connection acknowledgement.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Hint: used config file '/etc/nim.cfg' [Conf]\\n(out)Hint: system [Processing]\\n(out)Hint: server [Processing]\\n(out)Hint: net [Processing]\\n(out)Hint: nativesockets [Processing]\\n(out)Hint: os [Processing]\\n(out)Hint: strutils [Processing]\\n(out)Hint: parseutils [Processing]\\n(out)Hint: math [Processing]\\n(out)Hint: algorithm [Processing]\\n(out)Hint: times [Processing]\\n(out)Hint: posix [Processing]\\n(out)Hint: ospaths [Processing]\\n(out)Hint: options [Processing]\\n(out)Hint: typetraits [Processing]\\n(out)Hint: sets [Processing]\\n(out)Hint: hashes [Processing]\\n(out)CC: server\\n(out)CC: stdlib_system\\n(out)CC: stdlib_net\\n(out)Hint:  [Link]\\n(out)Hint: operation successful (26847 lines compiled; 0.903 sec total; 47.43MiB peakmem; Debug Build) [SuccessX]\\n(out)Hint: /home/tejas/Projects/simple-chat-server/server  [Exec]</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"8-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Similar to the server, we need a socket object. The only difference here is, unlike server, which listens to connections, a client knows the server address and connects to it using the [`connect`](https://nim-lang.org/docs/net.html#connect,Socket,string) method. Thus, a client needs to have the address and port of the server.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"6-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message)\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **7** Once the user sends a message, we'll prompt for another message, sort of how chat applications provide a text box to send a message.\\n> **8-10** Prompt the user for a chat message and using the client socket, [`send`](https://nim-lang.org/docs/net.html#send,Socket,string) it to the server. Also, we are using [`readLine`](https://nim-lang.org/docs/system.html#readLine,File) so that the messsage gets stored only when user presses <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-1\\\" data-language=\\\"server.nim\\\" data-line=\\\"11-18\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recv(10)\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **12** Server will keep listening to new messages from all connected clients.\\n> **13** Read a few characters from the socket.\\n> **15-16** When a socket disconnects, it sends an empty string before disconnection. This can be used as an indication for the server that the client has disconnected. Since we are dealing with only one client, we'll stop receiving additional messages and exit the loop.\\n> **18** Print the received message on the console.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, wor\\n(out)Server: received from client: ldLorem ip\\n(out)Server: received from client: sum dolor \\n(out)Server: received from client: sit amet, \\n(out)Server: received from client: consectetu\\n(out)Server: received from client: r adipisci</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"13\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"If the server and client are still running, kill the processes with <kbd>Ctrl</kbd>+<kbd>C</kbd>. Execute `server.nim` and `client.nim` again.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)server.nim(6)            server\\n(out)net.nim(738)             bindAddr\\n(out)oserr.nim(110)           raiseOSError\\n(out)Error: unhandled exception: Address already in use [OSError]\\n(out)Error: execution of an external program failed: '/home/tejas/Projects/simple-chat-server/server '</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"4\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, world\\n(out)Server: received from client: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola, mundo\\n(out)> What's 1 + 1? Answer is 10 in binary.\\n(out)> </code></pre>\"}],[\"markdown\",{\"markdown\":\"1. Have an infinte loop (`while true`) which will keep our server running.\\n2. Inside the loop, accept new client connections and add those into our client list.\\n3. For each client in the client list, check if there is any data.\\n4. If there is any data, print it out.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"6,10-11,14-37\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **6** Set the socket as non-blocking. We set it on the low-level native socket API.\\n> **11** We need to store our connected clients in a list so that we can iterate over them to get messages.\\n> **13-37** Check if there are any existing connections. If yes, add them to the connected socket list. Then for each connected socket, check whether there are any messages to be read.\\n> **17** Add the connected socket in our clients list.\\n> **19** In non-blocking mode, [`accept`](https://nim-lang.org/docs/net.html#accept,Socket,Socket) throws an `OSError` if there are no pending connections at that moment. We ignore that exception because it's understandable that we won't have any pending connections all the time.\\n> **22** We maintain a list of clients which disconnected so that we remove those from our client list.\\n> **24** Iterate over all the connected clients and receive messages from them one by one.\\n> **26** We set the `timeout` to `1` since [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) call still blocks the code as the default timeout value is `-1`, which means block indefinitely till message is received.\\n> **29** Mark the client for removal if it has disconnected.\\n> **32** If no message is received within the timeout period, [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) throws a `TimeoutError`. Since we are operating in a non-blocking mode now, we shall ignore this error.\\n> **35-37** Remove any client marked for removal from the clients list.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: Hola\\n(out)Server: received from client: Foo\\n(out)Server: received from client: Bar\\n(out)Server: received from client: \\n(out)Server: client disconnected\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> Foo\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola\\n(out)> Bar\\n(out)> ^CTraceback (most recent call last)\\n(out)client.nim(9)            client\\n(out)sysio.nim(185)           readLine\\n(out)sysio.nim(158)           readLine\\n(out)SIGINT: Interrupted by Ctrl-C.</code></pre>\"}],[\"markdown\",{\"markdown\":\"There's a major catch here. Since sending and receiving messages is a simultaneous process, we would need some kinda GUI to handle these tasks asynchronously. Just think of it, suppose you are a client chatting on our server, you wouldn't receive any messages until you input a message because the `stdin.readLine()` will block all the code until the user hits <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client_sending.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\\n<pre data-language=\\\"client_receiving.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  let receivedMessage: string = client.recvLine()\\n  stdout.writeLine(\\\"Message: \\\", receivedMessage)\\n\\nclient.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"30-36\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n        continue\\n\\n      for receivingClient in clients:\\n        if receivingClient == client:\\n          continue\\n\\n        receivingClient.send(message & \\\"\\\\r\\\\L\\\")\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: What are you doing?</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> What are you doing?\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: What are you doing?</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/server-cpu-usage.png\",\"cardWidth\":\"\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"3-4,7,14,18-22,25-27,30-51,55\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\nimport os\\nimport selectors\\n\\nvar server: Socket = newSocket()\\nvar select: Selector[int] = newSelector[int]()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nselect.registerHandle(server.getFd(), {Event.Read}, -1)\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  var results: seq[ReadyKey] = select.select(-1)\\n\\n  for result in results:\\n    if Event.Read in result.events:\\n      if result.fd.SocketHandle == server.getFd():\\n        var client: Socket = new(Socket)\\n        server.accept(client)\\n\\n        client.getFd().setBlocking(false)\\n        select.registerHandle(client.getFd(), {Event.Read}, -1)\\n        clients.add(client)\\n        stdout.writeLine(\\\"Server: client connected\\\")\\n      else:\\n        var sourceClient: Socket = newSocket(result.fd.SocketHandle)\\n        var message = sourceClient.recvLine()\\n\\n        if message == \\\"\\\":\\n          var clientsToRemove: seq[int] = @[]\\n\\n          for index, client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              clientsToRemove.add(index)\\n\\n          for index in clientsToRemove:\\n            var client: Socket = clients[index]\\n            select.unregister(result.fd)\\n            clients.del(index)\\n            stdout.writeLine(\\\"Server: client disconnected\\\")\\n        else:\\n          stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\n          for client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              continue\\n\\n            client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nselect.close()\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Import the packages required for `select` functions. Note that we also imported `os` package. This is because, in Nim v0.18 and lower, `OSErrorCode` is not explicity imported in the `select` library. This is fixed in later versions.\\n> **7** We define our selector. It requires a type too. This would be the type of the data that we will associate in `registerHandle` method.\\n> **14** Register our server for read events. Note that read events on server socket would be incoming socket connections. Since we don't have any data associated with our server, we'll pass data as `-1`.\\n> **18** `select` returns a list of events along with their file descriptors for which the specified event was triggered.\\n> **21** We are only interested in read events.\\n> **22** The result received from `select` method contains the list of `events` that were captured and the file descriptor `fd` for which the event was triggered. Though our `fd` is enough, we compare the underlying socket for that file descriptor. If the one that triggered a read event was our server, it must mean that we recevied an incoming connection from a client.\\n> **26** Since clients are also handled by `select` we'll set them as non-blocking.\\n> **27** Just like our server, listen to read events of our client. Read event on a connected socket indicates that a new message has been arrived waiting to be read.\\n> **30** If the read event was not triggered by server, then it must be client. This means we received a message from a client which we have to broadcast to other clients.\\n> **31** Working with higher-level socket abstractions is easier. So, we convert our low-level socket from file descriptor in the result into a higher-level socket.\\n> **34-45** If a client is disconnected, remove it from clients list and [`unregister`](https://nim-lang.org/docs/selectors.html#unregister,Selector[T],) events for that client.\\n> **50** We could have compared the two objects directly. But since the newly created `sourceClient` object as a copy, it's identity would be different. This would cause an inequality even though the underlying sockets are same.\\n> **55** Like sockets, even select should be closed to signal the kernel that we are no longer listening to any events. This is a good practice to cleanly close everything before shutting down our program.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: select seems to be doing great</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> select seems to be doing great\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: select seems to be doing great</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/low-cpu-server.png\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://nim-lang.org\"]],[\"a\",[\"href\",\"https://nim-lang.org/install.html\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/Editor-Support\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/\"]],[\"a\",[\"href\",\"https://www.techopedia.com/definition/7154/full-duplex-fdx\"]],[\"a\",[\"href\",\"https://realtimeapi.io/hub/http-long-polling/\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/BOSH_(protocol)\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/Comet_(programming)\"]],[\"a\",[\"href\",\"https://www.tutorialspoint.com/unix_sockets/what_is_socket.htm\"]],[\"a\",[\"href\",\"https://www.html5rocks.com/en/tutorials/websockets/basics/\"]],[\"a\",[\"href\",\"https://caniuse.com/#feat=websockets\"]],[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"#server-snippet-1.13\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recv,Socket,int\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recvLine,Socket\"]],[\"a\",[\"href\",\"#server-snippet-2.9-11\"]],[\"a\",[\"href\",\"#server-snippet-2.10\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/nativesockets.html#setBlocking,SocketHandle,bool\"]],[\"a\",[\"href\",\"https://www.linuxjournal.com/content/getting-started-ncurses\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man2/select.2.html\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#registerHandle,Selector[T],,set[Event],T\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#select,Selector[T],int\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Build a simple chat server using nothing except sockets in Nim which pushes messages sent by any client to all other connected clients.\"]]],[1,\"p\",[[0,[],0,\"Since I'm at home now, on a break, not really doing anything, I decided to learn this new programming language called \"],[0,[0],1,\"Nim\"],[0,[],0,\" which is a perfect fusion between the elegance of Python and performance of C. What's better way to start with a language than actually creating something meaningful? So, I decided to not only create a simple chat server, but also write a step-by-step tutorial about it.\"]]],[1,\"h1\",[[0,[],0,\"Prerequisites\"]]],[3,\"ul\",[[[0,[],0,\"Install Nim compiler. You can get the download links or installation commands from their \"],[0,[1],1,\"installation\"],[0,[],0,\" page. The compiler version in this tutorial is 0.18.0, though newer versions should not have any issue.\"]],[[0,[],0,\"Get Nim plugins for your editor. Again you can refer to the \"],[0,[2],1,\"editor plugins page\"],[0,[],0,\" on their \"],[0,[3],1,\"GitHub\"],[0,[],0,\" \"],[0,[4],1,\"wiki\"],[0,[],0,\".\"]]]],[1,\"h1\",[[0,[],0,\"Problem statement\"]]],[1,\"blockquote\",[[0,[],0,\"Our chat server will be a single room (channel) chat where anyone can talk with everyone. When a user types in a message, it is sent to all other users connected to the chat server.\"]]],[1,\"p\",[[0,[],0,\"In any chat application, the core responsibility of a server is just to act as a relay and send messages from one client to the other. The server should be sufficiently fast enough to accept newer clients who join, read messages from the clients, broadcast those messages to all other clients, without showing any noticeable delay for any of the clients. This would truly make it an instant messaging platform.\"]]],[1,\"h1\",[[0,[],0,\"I. Plan\"]]],[1,\"p\",[[0,[],0,\"We need a \"],[0,[5],1,\"full duplex\"],[0,[],0,\" link between the server and the client so that messages can be sent and received at the same time. Of all the various methods like \"],[0,[6],1,\"long-polling\"],[0,[],0,\", \"],[0,[7],1,\"BOSH\"],[0,[],0,\", \"],[0,[8],1,\"comet\"],[0,[],0,\", my recommendation is to use \"],[0,[9],1,\"sockets\"],[0,[],0,\" (\"],[0,[10],1,\"web sockets\"],[0,[],0,\" for \"],[0,[11],1,\"browsers\"],[0,[],0,\"). They are truly bi-directional, light-weight and efficient for such use cases.\"]]],[3,\"ol\",[[[0,[],0,\"Our server would act as a socket server. \"]],[[0,[],0,\"It would bind to a specific port and IP address and listen for new socket connections.\"]],[[0,[],0,\"For every socket connected, it would add it to it's active socket connections list.\"]],[[0,[],0,\"When any connected socket sends a message to the server, the server will send it to all the sockets in the active socket connections list (except the one who sent it).\"]],[[0,[],0,\"If a connected socket closes connection, the server will remove it from the active list.\"]]]],[1,\"h1\",[[0,[],0,\"II. Getting started\"]]],[1,\"p\",[[0,[],0,\"Create a directory in your projects folder (or wherever you want) called \"],[0,[12],1,\"simple-chat-server\"],[0,[],0,\". You might want to open this directory in your code editor. \"],[0,[13],1,\"All path references here on will be relative to this directory.\"]]],[1,\"p\",[[0,[],0,\"Create a file called \"],[0,[12],1,\"server.nim\"],[0,[],0,\". This would be our core server file. To compile and run the code in this file, we will use \"],[0,[12],1,\"nim compile --run server.nim\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"We'll create a simple socket which will listen to new socket connections on port \"],[0,[12],1,\"5555\"],[0,[],0,\" and then close it.\"]]],[10,0],[10,1],[1,\"p\",[[0,[],0,\"To run the above code, we need to compile it first and then execute the binary. Fortunately, the Nim compiler can do both in a single command by specifying the \"],[0,[12],1,\"--run\"],[0,[],0,\" or \"],[0,[12],1,\"-r\"],[0,[],0,\" argument.\"]]],[1,\"p\",[[0,[],0,\"The compiler pulls all the required packages along with \"],[0,[12],1,\"server.nim\"],[0,[],0,\", transpiles them into C, links the libraries and creates an executable binary file with the same name as our file sans the file extension (in our case it becomes \"],[0,[12],1,\"server\"],[0,[],0,\") in the root of the project directory.\"]]],[10,2],[1,\"p\",[[0,[],0,\"The code ran but it didn't produce any output, except for compiler messages (we will be omitting compiler messages hereon). The server created the socket, listened for incoming connections and closed the socket connection.\"]]],[1,\"p\",[[0,[],0,\"Now we'll make the server wait until it receives new connections.\"]]],[10,3],[10,4],[1,\"p\",[[0,[],0,\"Our server is now actively listening for connections from clients. But… it's kinda stuck there because the server is waiting for a client to connect. We'll have to create one now. \"]]],[1,\"p\",[[0,[],0,\"Create a new file called \"],[0,[12],1,\"client.nim\"],[0,[],0,\". We'll use socket as a client and connect to the server.\"]]],[10,5],[10,6],[1,\"p\",[[0,[],0,\"Execute \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and at the same time, in a new terminal window/tab, execute \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,7],[1,\"p\",[[0,[],0,\"The server started and waited for connections. The moment we started the client, it connected to our socket server on the specified address. Server received this connection and assigned the client to the \"],[0,[12],1,\"client\"],[0,[],0,\" variable, and closed the socket.\"]]],[1,\"p\",[[0,[],0,\"This was a barebones socket server and client. We have to add the real magic - sending and receiving messages.\"]]],[1,\"h1\",[[0,[],0,\"III. Sending and receiving messages\"]]],[1,\"p\",[[0,[],0,\"A socket on an OS is a file descriptor (layman: just a file). When we say that a socket received some data, it actually signifies that some data was written on that file descriptor.\"]]],[1,\"p\",[[0,[],0,\"We have built a server which accepts socket connection and a client which connects to the server. Now, we'll dive into the actual communication between client and server.\"]]],[1,\"p\",[[0,[],0,\"On the client side, we'll prompt user to enter the message to be sent and then send this message over to the server.\"]]],[10,8],[10,9],[1,\"p\",[[0,[],0,\"On the server side, we need to listen to new messages from client. We'll also print the messages received from the client on the console.\"]]],[10,10],[10,11],[1,\"p\",[[0,[],0,\"Let's execute both \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" in two different terminal tabs/windows. Note that I have used \"],[0,[12],1,\"nim c -r\"],[0,[],0,\" which is a shorthand for \"],[0,[12],1,\"nim compile --run\"],[0,[],0,\".\"]]],[10,12],[1,\"p\",[[0,[],0,\"Something's gone horribly wrong here. Not only our client messages are truncated, but they are also mingled with other messages. We sent \"],[0,[14],1,\"Hello, world\"],[0,[],0,\" and \"],[0,[14],1,\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"],[0,[],0,\" as two different messages, but on the server side we're getting them in sort of mingled fashion. Also, our second message is incomplete.\"]]],[1,\"p\",[[0,[],0,\"The culprit here is line \"],[0,[15],1,\"13\"],[0,[],0,\". We specified that we'll only accept 10 characters from the socket. Also, until socket does not have at least 10 characters in its buffer, the \"],[0,[12,16],2,\"recv\"],[0,[],0,\" function will keep blocking indefinitely. The socket will keep reading messages until it has reached that count in its buffer and only then it will return the data. We can do the following,\"]]],[3,\"ol\",[[[0,[],0,\"We'll use some delimiting character. We'll read a very small amount of data from the socket and scan all characters in it and store it in our own buffer. If we encounter the delimiting character while scanning, we'll stop there, dump whatever we read so far in the buffer and return the buffer data.\"]],[[0,[],0,\"We can also use the \"],[0,[12],1,\"timeout\"],[0,[],0,\" parameter in the \"],[0,[12,16],2,\"recv\"],[0,[],0,\". By default, the timeout value is \"],[0,[12],1,\"-1\"],[0,[],0,\", which means we will wait indefinitely until there is enough data in the socket. We can set it to a small amount so that we don't wait indefinitely for new messages.\"]]]],[1,\"p\",[[0,[],0,\"A much better solution here would be to use the \"],[0,[12,17],2,\"recvLine\"],[0,[],0,\" method. It handles the complexity of handling the delimited character for us. It uses \"],[0,[12],1,\"\\\\r\\\\L\"],[0,[],0,\" as the delimiter. This means, on the client side, for each message we send, we would also need to append this delimiter. Let's make the changes accordingly.\"]]],[10,13],[10,14],[10,15],[10,16],[1,\"p\",[[0,[],0,\"If you're getting the above error, it's an indication that the port on which our server listens is being reserved for some reason. It happens when some process which is listening on that port is still running. Though in our case, even though we stopped the server, it's still giving us this error. The reason here is something called as \"],[0,[14],1,\"Linger Time\"],[0,[],0,\". When a socket is closed (especially TCP socket), some data which is marked to be sent, still exists in the socket's send buffer. Unless the buffer is emptied or a timeout period (usually 30 seconds) is passed, the system reserves the port.\"]]],[1,\"p\",[[0,[],0,\"To fix this, we use the \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of sockets. If a socket is created with this option enabled, instead of throwing an error, it checks whether a socket which is listening on the same port is in lingering state. If it is, the socket will use the same address with an assumption that the earlier socket will release the port soon. In Nim, we have the \"],[0,[12],1,\"OptReuseAddr\"],[0,[],0,\" option which can be set as \"],[0,[12],1,\"true\"],[0,[],0,\" to enable \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of the socket.\"]]],[10,17],[1,\"p\",[[0,[],0,\"Let's run the server and clients again.\"]]],[10,18],[1,\"p\",[[0,[],0,\"As you can see now, the messages are no longer truncated and they are received in the same manner as sent by the client.\"]]],[1,\"p\",[[0,[],0,\"Now that we have spawned our basic server which accepts messages from a client, let's spawn another client and see what happens. Don't kill the currently running \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" and instead run \"],[0,[12],1,\"client.nim\"],[0,[],0,\" again in a new tab/terminal and send a few messages.\"]]],[10,19],[1,\"p\",[[0,[],0,\"If you check the tab/terminal running our server, you wouldn't find these messages at all. The server did not receive any message at all from our new client. Can you identify the problem?\"]]],[1,\"p\",[[0,[],0,\"Notice the lines \"],[0,[18],1,\"9-11\"],[0,[],0,\", where we wait and accept connection from a client. The moment a client connects, we never again accept and listen to data from new clients. As soon as we get a client, we just listen to new data from that client. What we can do is, as we listen to new data from one client, we'll also accept new connections from other clients. Our flow would go like this, \"]]],[10,20],[1,\"p\",[[0,[],0,\"However, there is a slight problem in step 2. In our server socket, as seen here, the server will block the program flow while it is listening for new clients since \"],[0,[12,19],2,\"server.accept()\"],[0,[],0,\" is a blocking function. Thus our messages will only be read once a client connects to the server. This is not even an acceptable case for our chat server.\"]]],[1,\"p\",[[0,[],0,\"Fortunately, sockets have an option to run in non-blocking mode. This means, our \"],[0,[12],1,\"accept()\"],[0,[],0,\" and \"],[0,[12],1,\"recv()\"],[0,[],0,\" functions will no longer block the code. If they have anything meaningful to return (like an incoming socket connection or a message), they will return that and continue execution. Otherwise, they will throw an error. Which means, we have to keep checking for new connections or messages and also handle the error in case we don't get any. \"]]],[1,\"p\",[[0,[],0,\"In Nim, we enable non-blocking mode using the \"],[0,[12,20],2,\"setBlocking()\"],[0,[],0,\" function of the underlying native socket. We'll also store all our connected sockets in a list so that we can iterate over them and receive messages from each of them. We'll do both, accept new connections and receive data from sockets in a single infinite loop, so that we keep accepting new connections while we receive messages from existing ones. Let's give this a try.\"]]],[10,21],[10,22],[1,\"p\",[[0,[],0,\"Let's execute our server now with multiple clients.\"]]],[10,23],[1,\"p\",[[0,[],0,\"Yay! We have it now. Our server accepts and receives messages from multiple clients. We have also managed client disconnections. What our server should do now is send messages from one client to other clients, which a chat server should do. Let's do it.\"]]],[10,24],[1,\"p\",[[0,[],0,\"We can build a small GUI or use \"],[0,[21],1,\"ncurses\"],[0,[],0,\" to do that interactively in terminal. Since both of these are outside the scope of this tutorial, we'll make a hack for now. We'll create two different types of clients - one for sending messages and one for receiving. We call them \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" respectively. \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" is exactly same as our \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,25],[1,\"p\",[[0,[],0,\"We would need some minor changes in our \"],[0,[12],1,\"server.nim\"],[0,[],0,\". Once the server receives a message, it will send it to all connected clients, except the one who sent the message.\"]]],[10,26],[1,\"p\",[[0,[],0,\"Open three terminals - one for \"],[0,[12],1,\"server.nim\"],[0,[],0,\", one for \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and one for \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" - and execute the respective files. Try sending some messages from sending client and see if you get those in the receiving client.\"]]],[10,27],[1,\"p\",[[0,[],0,\"You can open multiple terminals with \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and send messages to one another. You would observer that all receiving clients receive messages from all sending clients. This is because our server is current broadcasting all messages to everyone. We can limit this behavior, but we can skip that for now.\"]]],[1,\"p\",[[0,[],0,\"With this, you have completed a simple chat server with somewhat hacky clients (we'll fix that later). However, if you're working on a laptop, you would have noticed the noise of your CPU fan every time you run the server. If you're curious enough, check the output of \"],[0,[12],1,\"top\"],[0,[],0,\" command and you'll notice that the server process is taking up some chunk of CPU.\"]]],[10,28],[1,\"p\",[[0,[],0,\"It seems our code needs some fixing. Indeed it does. The way we are handling new connections and incoming messages on our server is very inefficient. We are persistently asking the socket for new connection and a new message, that too in an infinite loop. If socket was an actual person, it would mean as if we are pestering him every now and then for new information.\"]]],[1,\"p\",[[0,[],0,\"We have a solution for this. We'll make use of something that is core of lot of chat servers and surprisingly available on all platforms - \"],[0,[12,22],2,\"select\"],[0,[],0,\".\"]]],[1,\"h1\",[[0,[],0,\"IV. Using \"],[0,[12],1,\"select\"],[0,[],0,\" for optimization\"]]],[1,\"p\",[[0,[],0,\"Of all the amazing things that happened in Unix world, one was \"],[0,[12],1,\"select\"],[0,[],0,\". Originally appeared in BSD, \"],[0,[12],1,\"select\"],[0,[],0,\" was quickly adopted in other popular OS. It's a kernel level utility which tells us which file descriptors are ready to be read, written or have an error condition. It does this using lower level file monitoring or interrupts, instead of iterating through all files and repeatedly checking if they have changed. This is cleaner, efficient and puts minimal load on our CPU.\"]]],[1,\"h3\",[[0,[],0,\"How to use \"],[0,[12],1,\"select\"],[0,[],0,\" with our chat server?\"]]],[1,\"p\",[[0,[],0,\"Since all connected clients are nothing but file descriptors, we'll tell \"],[0,[12],1,\"select\"],[0,[],0,\" to monitor these given file descriptors and notify us when there's any data on them that is yet to be read. Once \"],[0,[12],1,\"select\"],[0,[],0,\" notifies us, it will give us a list of file descriptors which contain unread data. We'll iterate over these and see what data they have. Remember, when a socket receives data, it essentially means that it has data to be read.\"]]],[1,\"p\",[[0,[12],1,\"select\"],[0,[],0,\" in Nim is a part of  \"],[0,[12],1,\"selectors\"],[0,[],0,\" package. It has two important methods of our concern - \"],[0,[12,23],2,\"registerHandle\"],[0,[],0,\" and \"],[0,[12,24],2,\"select\"],[0,[],0,\". \"],[0,[12],1,\"registerHandle\"],[0,[],0,\" takes in a file description, the events we want to listen to (read, write, error) and optional data that we wish to receive when the event is triggered. \"],[0,[12],1,\"select\"],[0,[],0,\" takes in the timeout period until which it will wait for events on the registered handles (file descriptors). If we want \"],[0,[12],1,\"select\"],[0,[],0,\" to block our code, we can set timeout as \"],[0,[12],1,\"-1\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Let's dive into the code.\"]]],[10,29],[10,30],[1,\"p\",[[0,[],0,\"Let's run the program now and see our CPU usage.\"]]],[10,31],[10,32],[1,\"p\",[[0,[],0,\"It's not even showing in the top CPU consuming processes. That's great.\"]]],[10,33],[1,\"p\",[[0,[],0,\"With this we complete our basic chat server. I know clients are still messy, but for that, we would need to dive deep into the interactivity part which is beyond the scope of this tutorial. Next up, we can add clients with identity information so that server can uniquely tag who sent which message, 1:1 messaging instead of group messaging and an interactive UI. I might write a follow-up article with all of these in future.\"]]],[1,\"p\",[[0,[],0,\"Nim is an amazing language. To be able to do so much, in so little and clean code is amazing. We haven't touched on code optimization yet, but I believe we can use some micro-optimizations to make this code even faster. It's been a great exercise for me to move away from Python and learn interesting languages like Nim. \"]]],[1,\"p\",[[0,[],0,\"Let me know about your feedback. If you feel there were any issues with the tutorial, or writing style, or any errors in text or code, or any difficulty in understanding, or if you just wanna give a compliment, leave your comments below.\"]]]]}","created_at_ts":1548364843995,"created_at":"2019-01-24 21:20:44"},{"id":"5c4a2c75f7e7b7692d246edd","post_id":"5c3229bfd149624e397d2920","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **1** All socket related functions, classes, utilities are in the [`net`](https://nim-lang.org/docs/net.html) package. We could have also used [`nativesockets`](https://nim-lang.org/docs/nativesockets.html) package which is exclusively for sockets. But it handles sockets at very low-level which might just lengthen our code.\\n> **3** Initialize our server socket using [`newSocket`](https://nim-lang.org/docs/net.html#newSocket,Domain,SockType,Protocol). This function also accepts some parameters which we will discuss in-depth later. For now, we are okay leaving it to the default values.\\n> **4-5** Set the socket to listen to new connections on port `5555` and start accepting new connections from other sockets. If [`address` parameter](https://nim-lang.org/docs/net.html#bindAddr,Socket,string) is not mentioned by default, the socket will listen to requests from all IP addresses.\\n> **8** Close our socket server. It is very important to close socket connections if they are no longer required. This is considered a clean way to end TCP connections with proper end-of-connection acknowledgement.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Hint: used config file '/etc/nim.cfg' [Conf]\\n(out)Hint: system [Processing]\\n(out)Hint: server [Processing]\\n(out)Hint: net [Processing]\\n(out)Hint: nativesockets [Processing]\\n(out)Hint: os [Processing]\\n(out)Hint: strutils [Processing]\\n(out)Hint: parseutils [Processing]\\n(out)Hint: math [Processing]\\n(out)Hint: algorithm [Processing]\\n(out)Hint: times [Processing]\\n(out)Hint: posix [Processing]\\n(out)Hint: ospaths [Processing]\\n(out)Hint: options [Processing]\\n(out)Hint: typetraits [Processing]\\n(out)Hint: sets [Processing]\\n(out)Hint: hashes [Processing]\\n(out)CC: server\\n(out)CC: stdlib_system\\n(out)CC: stdlib_net\\n(out)Hint:  [Link]\\n(out)Hint: operation successful (26847 lines compiled; 0.903 sec total; 47.43MiB peakmem; Debug Build) [SuccessX]\\n(out)Hint: /home/tejas/Projects/simple-chat-server/server  [Exec]</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"8-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Similar to the server, we need a socket object. The only difference here is, unlike server, which listens to connections, a client knows the server address and connects to it using the [`connect`](https://nim-lang.org/docs/net.html#connect,Socket,string) method. Thus, a client needs to have the address and port of the server.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"6-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message)\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **7** Once the user sends a message, we'll prompt for another message, sort of how chat applications provide a text box to send a message.\\n> **8-10** Prompt the user for a chat message and using the client socket, [`send`](https://nim-lang.org/docs/net.html#send,Socket,string) it to the server. Also, we are using [`readLine`](https://nim-lang.org/docs/system.html#readLine,File) so that the messsage gets stored only when user presses <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-1\\\" data-language=\\\"server.nim\\\" data-line=\\\"11-18\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recv(10)\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **12** Server will keep listening to new messages from all connected clients.\\n> **13** Read a few characters from the socket.\\n> **15-16** When a socket disconnects, it sends an empty string before disconnection. This can be used as an indication for the server that the client has disconnected. Since we are dealing with only one client, we'll stop receiving additional messages and exit the loop.\\n> **18** Print the received message on the console.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, wor\\n(out)Server: received from client: ldLorem ip\\n(out)Server: received from client: sum dolor \\n(out)Server: received from client: sit amet, \\n(out)Server: received from client: consectetu\\n(out)Server: received from client: r adipisci</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"13\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"If the server and client are still running, kill the processes with <kbd>Ctrl</kbd>+<kbd>C</kbd>. Execute `server.nim` and `client.nim` again.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)server.nim(6)            server\\n(out)net.nim(738)             bindAddr\\n(out)oserr.nim(110)           raiseOSError\\n(out)Error: unhandled exception: Address already in use [OSError]\\n(out)Error: execution of an external program failed: '/home/tejas/Projects/simple-chat-server/server '</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"4\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, world\\n(out)Server: received from client: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola, mundo\\n(out)> What's 1 + 1? Answer is 10 in binary.\\n(out)> </code></pre>\"}],[\"markdown\",{\"markdown\":\"1. Have an infinte loop (`while true`) which will keep our server running.\\n2. Inside the loop, accept new client connections and add those into our client list.\\n3. For each client in the client list, check if there is any data.\\n4. If there is any data, print it out.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"6,10-11,14-37\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **6** Set the socket as non-blocking. We set it on the low-level native socket API.\\n> **11** We need to store our connected clients in a list so that we can iterate over them to get messages.\\n> **13-37** Check if there are any existing connections. If yes, add them to the connected socket list. Then for each connected socket, check whether there are any messages to be read.\\n> **17** Add the connected socket in our clients list.\\n> **19** In non-blocking mode, [`accept`](https://nim-lang.org/docs/net.html#accept,Socket,Socket) throws an `OSError` if there are no pending connections at that moment. We ignore that exception because it's understandable that we won't have any pending connections all the time.\\n> **22** We maintain a list of clients which disconnected so that we remove those from our client list.\\n> **24** Iterate over all the connected clients and receive messages from them one by one.\\n> **26** We set the `timeout` to `1` since [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) call still blocks the code as the default timeout value is `-1`, which means block indefinitely till message is received.\\n> **29** Mark the client for removal if it has disconnected.\\n> **32** If no message is received within the timeout period, [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) throws a `TimeoutError`. Since we are operating in a non-blocking mode now, we shall ignore this error.\\n> **35-37** Remove any client marked for removal from the clients list.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: Hola\\n(out)Server: received from client: Foo\\n(out)Server: received from client: Bar\\n(out)Server: received from client: \\n(out)Server: client disconnected\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> Foo\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola\\n(out)> Bar\\n(out)> ^CTraceback (most recent call last)\\n(out)client.nim(9)            client\\n(out)sysio.nim(185)           readLine\\n(out)sysio.nim(158)           readLine\\n(out)SIGINT: Interrupted by Ctrl-C.</code></pre>\"}],[\"markdown\",{\"markdown\":\"There's a major catch here. Since sending and receiving messages is a simultaneous process, we would need some kinda GUI to handle these tasks asynchronously. Just think of it, suppose you are a client chatting on our server, you wouldn't receive any messages until you input a message because the `stdin.readLine()` will block all the code until the user hits <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client_sending.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\\n<pre data-language=\\\"client_receiving.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  let receivedMessage: string = client.recvLine()\\n  stdout.writeLine(\\\"Message: \\\", receivedMessage)\\n\\nclient.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"30-36\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n        continue\\n\\n      for receivingClient in clients:\\n        if receivingClient == client:\\n          continue\\n\\n        receivingClient.send(message & \\\"\\\\r\\\\L\\\")\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: What are you doing?</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> What are you doing?\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: What are you doing?</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/server-cpu-usage.png\",\"cardWidth\":\"\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"3-4,7,14,18-22,25-27,30-51,55\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\nimport os\\nimport selectors\\n\\nvar server: Socket = newSocket()\\nvar select: Selector[int] = newSelector[int]()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nselect.registerHandle(server.getFd(), {Event.Read}, -1)\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  var results: seq[ReadyKey] = select.select(-1)\\n\\n  for result in results:\\n    if Event.Read in result.events:\\n      if result.fd.SocketHandle == server.getFd():\\n        var client: Socket = new(Socket)\\n        server.accept(client)\\n\\n        client.getFd().setBlocking(false)\\n        select.registerHandle(client.getFd(), {Event.Read}, -1)\\n        clients.add(client)\\n        stdout.writeLine(\\\"Server: client connected\\\")\\n      else:\\n        var sourceClient: Socket = newSocket(result.fd.SocketHandle)\\n        var message = sourceClient.recvLine()\\n\\n        if message == \\\"\\\":\\n          var clientsToRemove: seq[int] = @[]\\n\\n          for index, client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              clientsToRemove.add(index)\\n\\n          for index in clientsToRemove:\\n            var client: Socket = clients[index]\\n            select.unregister(result.fd)\\n            clients.del(index)\\n            stdout.writeLine(\\\"Server: client disconnected\\\")\\n        else:\\n          stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\n          for client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              continue\\n\\n            client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nselect.close()\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Import the packages required for `select` functions. Note that we also imported `os` package. This is because, in Nim v0.18 and lower, `OSErrorCode` is not explicity imported in the `select` library. This is fixed in later versions.\\n> **7** We define our selector. It requires a type too. This would be the type of the data that we will associate in `registerHandle` method.\\n> **14** Register our server for read events. Note that read events on server socket would be incoming socket connections. Since we don't have any data associated with our server, we'll pass data as `-1`.\\n> **18** `select` returns a list of events along with their file descriptors for which the specified event was triggered.\\n> **21** We are only interested in read events.\\n> **22** The result received from `select` method contains the list of `events` that were captured and the file descriptor `fd` for which the event was triggered. Though our `fd` is enough, we compare the underlying socket for that file descriptor. If the one that triggered a read event was our server, it must mean that we recevied an incoming connection from a client.\\n> **26** Since clients are also handled by `select` we'll set them as non-blocking.\\n> **27** Just like our server, listen to read events of our client. Read event on a connected socket indicates that a new message has been arrived waiting to be read.\\n> **30** If the read event was not triggered by server, then it must be client. This means we received a message from a client which we have to broadcast to other clients.\\n> **31** Working with higher-level socket abstractions is easier. So, we convert our low-level socket from file descriptor in the result into a higher-level socket.\\n> **34-45** If a client is disconnected, remove it from clients list and [`unregister`](https://nim-lang.org/docs/selectors.html#unregister,Selector[T],) events for that client.\\n> **50** We could have compared the two objects directly. But since the newly created `sourceClient` object as a copy, it's identity would be different. This would cause an inequality even though the underlying sockets are same.\\n> **55** Like sockets, even select should be closed to signal the kernel that we are no longer listening to any events. This is a good practice to cleanly close everything before shutting down our program.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: select seems to be doing great</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> select seems to be doing great\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: select seems to be doing great</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/low-cpu-server.png\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://nim-lang.org\"]],[\"a\",[\"href\",\"https://nim-lang.org/install.html\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/Editor-Support\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/\"]],[\"a\",[\"href\",\"https://www.techopedia.com/definition/7154/full-duplex-fdx\"]],[\"a\",[\"href\",\"https://realtimeapi.io/hub/http-long-polling/\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/BOSH_(protocol)\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/Comet_(programming)\"]],[\"a\",[\"href\",\"https://www.tutorialspoint.com/unix_sockets/what_is_socket.htm\"]],[\"a\",[\"href\",\"https://www.html5rocks.com/en/tutorials/websockets/basics/\"]],[\"a\",[\"href\",\"https://caniuse.com/#feat=websockets\"]],[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"#server-snippet-1.13\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recv,Socket,int\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recvLine,Socket\"]],[\"a\",[\"href\",\"#server-snippet-2.9-11\"]],[\"a\",[\"href\",\"#server-snippet-2.10\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/nativesockets.html#setBlocking,SocketHandle,bool\"]],[\"a\",[\"href\",\"https://www.linuxjournal.com/content/getting-started-ncurses\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man2/select.2.html\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#registerHandle,Selector[T],,set[Event],T\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#select,Selector[T],int\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Build a simple chat server using nothing except sockets in Nim which pushes messages sent by any client to all other connected clients.\"]]],[1,\"p\",[[0,[],0,\"Since I'm at home now, on a break, not really doing anything, I decided to learn this new programming language called \"],[0,[0],1,\"Nim\"],[0,[],0,\" which is a perfect fusion between the elegance of Python and performance of C. What's better way to start with a language than actually creating something meaningful? So, I decided to not only create a simple chat server, but also write a step-by-step tutorial about it.\"]]],[1,\"h1\",[[0,[],0,\"Prerequisites\"]]],[3,\"ul\",[[[0,[],0,\"Install Nim compiler. You can get the download links or installation commands from their \"],[0,[1],1,\"installation\"],[0,[],0,\" page. The compiler version in this tutorial is 0.18.0, though newer versions should not have any issue.\"]],[[0,[],0,\"Get Nim plugins for your editor. Again you can refer to the \"],[0,[2],1,\"editor plugins page\"],[0,[],0,\" on their \"],[0,[3],1,\"GitHub\"],[0,[],0,\" \"],[0,[4],1,\"wiki\"],[0,[],0,\".\"]]]],[1,\"h1\",[[0,[],0,\"Problem statement\"]]],[1,\"blockquote\",[[0,[],0,\"Our chat server will be a single room (channel) chat where anyone can talk with everyone. When a user types in a message, it is sent to all other users connected to the chat server.\"]]],[1,\"p\",[[0,[],0,\"In any chat application, the core responsibility of a server is just to act as a relay and send messages from one client to the other. The server should be sufficiently fast enough to accept newer clients who join, read messages from the clients, broadcast those messages to all other clients, without showing any noticeable delay for any of the clients. This would truly make it an instant messaging platform.\"]]],[1,\"h1\",[[0,[],0,\"I. Plan\"]]],[1,\"p\",[[0,[],0,\"We need a \"],[0,[5],1,\"full duplex\"],[0,[],0,\" link between the server and the client so that messages can be sent and received at the same time. Of all the various methods like \"],[0,[6],1,\"long-polling\"],[0,[],0,\", \"],[0,[7],1,\"BOSH\"],[0,[],0,\", \"],[0,[8],1,\"comet\"],[0,[],0,\", my recommendation is to use \"],[0,[9],1,\"sockets\"],[0,[],0,\" (\"],[0,[10],1,\"web sockets\"],[0,[],0,\" for \"],[0,[11],1,\"browsers\"],[0,[],0,\"). They are truly bi-directional, light-weight and efficient for such use cases.\"]]],[3,\"ol\",[[[0,[],0,\"Our server would act as a socket server. \"]],[[0,[],0,\"It would bind to a specific port and IP address and listen for new socket connections.\"]],[[0,[],0,\"For every socket connected, it would add it to it's active socket connections list.\"]],[[0,[],0,\"When any connected socket sends a message to the server, the server will send it to all the sockets in the active socket connections list (except the one who sent it).\"]],[[0,[],0,\"If a connected socket closes connection, the server will remove it from the active list.\"]]]],[1,\"h1\",[[0,[],0,\"II. Getting started\"]]],[1,\"p\",[[0,[],0,\"Create a directory in your projects folder (or wherever you want) called \"],[0,[12],1,\"simple-chat-server\"],[0,[],0,\". You might want to open this directory in your code editor. \"],[0,[13],1,\"All path references here on will be relative to this directory.\"]]],[1,\"p\",[[0,[],0,\"Create a file called \"],[0,[12],1,\"server.nim\"],[0,[],0,\". This would be our core server file. To compile and run the code in this file, we will use \"],[0,[12],1,\"nim compile --run server.nim\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"We'll create a simple socket which will listen to new socket connections on port \"],[0,[12],1,\"5555\"],[0,[],0,\" and then close it.\"]]],[10,0],[10,1],[1,\"p\",[[0,[],0,\"To run the above code, we need to compile it first and then execute the binary. Fortunately, the Nim compiler can do both in a single command by specifying the \"],[0,[12],1,\"--run\"],[0,[],0,\" or \"],[0,[12],1,\"-r\"],[0,[],0,\" argument.\"]]],[1,\"p\",[[0,[],0,\"The compiler pulls all the required packages along with \"],[0,[12],1,\"server.nim\"],[0,[],0,\", transpiles them into C, links the libraries and creates an executable binary file with the same name as our file sans the file extension (in our case it becomes \"],[0,[12],1,\"server\"],[0,[],0,\") in the root of the project directory.\"]]],[10,2],[1,\"p\",[[0,[],0,\"The code ran but it didn't produce any output, except for compiler messages (we will be omitting compiler messages hereon). The server created the socket, listened for incoming connections and closed the socket connection.\"]]],[1,\"p\",[[0,[],0,\"Now we'll make the server wait until it receives new connections.\"]]],[10,3],[10,4],[1,\"p\",[[0,[],0,\"Our server is now actively listening for connections from clients. But… it's kinda stuck there because the server is waiting for a client to connect. We'll have to create one now. \"]]],[1,\"p\",[[0,[],0,\"Create a new file called \"],[0,[12],1,\"client.nim\"],[0,[],0,\". We'll use socket as a client and connect to the server.\"]]],[10,5],[10,6],[1,\"p\",[[0,[],0,\"Execute \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and at the same time, in a new terminal window/tab, execute \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,7],[1,\"p\",[[0,[],0,\"The server started and waited for connections. The moment we started the client, it connected to our socket server on the specified address. Server received this connection and assigned the client to the \"],[0,[12],1,\"client\"],[0,[],0,\" variable, and closed the socket.\"]]],[1,\"p\",[[0,[],0,\"This was a barebones socket server and client. We have to add the real magic - sending and receiving messages.\"]]],[1,\"h1\",[[0,[],0,\"III. Sending and receiving messages\"]]],[1,\"p\",[[0,[],0,\"A socket on an OS is a file descriptor (layman: just a file). When we say that a socket received some data, it actually signifies that some data was written on that file descriptor.\"]]],[1,\"p\",[[0,[],0,\"We have built a server which accepts socket connection and a client which connects to the server. Now, we'll dive into the actual communication between client and server.\"]]],[1,\"p\",[[0,[],0,\"On the client side, we'll prompt user to enter the message to be sent and then send this message over to the server.\"]]],[10,8],[10,9],[1,\"p\",[[0,[],0,\"On the server side, we need to listen to new messages from client. We'll also print the messages received from the client on the console.\"]]],[10,10],[10,11],[1,\"p\",[[0,[],0,\"Let's execute both \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" in two different terminal tabs/windows. Note that I have used \"],[0,[12],1,\"nim c -r\"],[0,[],0,\" which is a shorthand for \"],[0,[12],1,\"nim compile --run\"],[0,[],0,\".\"]]],[10,12],[1,\"p\",[[0,[],0,\"Something's gone horribly wrong here. Not only our client messages are truncated, but they are also mingled with other messages. We sent \"],[0,[14],1,\"Hello, world\"],[0,[],0,\" and \"],[0,[14],1,\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"],[0,[],0,\" as two different messages, but on the server side we're getting them in sort of mingled fashion. Also, our second message is incomplete.\"]]],[1,\"p\",[[0,[],0,\"The culprit here is line \"],[0,[15],1,\"13\"],[0,[],0,\". We specified that we'll only accept 10 characters from the socket. Also, until socket does not have at least 10 characters in its buffer, the \"],[0,[12,16],2,\"recv\"],[0,[],0,\" function will keep blocking indefinitely. The socket will keep reading messages until it has reached that count in its buffer and only then it will return the data. We can do the following,\"]]],[3,\"ol\",[[[0,[],0,\"We'll use some delimiting character. We'll read a very small amount of data from the socket and scan all characters in it and store it in our own buffer. If we encounter the delimiting character while scanning, we'll stop there, dump whatever we read so far in the buffer and return the buffer data.\"]],[[0,[],0,\"We can also use the \"],[0,[12],1,\"timeout\"],[0,[],0,\" parameter in the \"],[0,[12,16],2,\"recv\"],[0,[],0,\". By default, the timeout value is \"],[0,[12],1,\"-1\"],[0,[],0,\", which means we will wait indefinitely until there is enough data in the socket. We can set it to a small amount so that we don't wait indefinitely for new messages.\"]]]],[1,\"p\",[[0,[],0,\"A much better solution here would be to use the \"],[0,[12,17],2,\"recvLine\"],[0,[],0,\" method. It handles the complexity of handling the delimited character for us. It uses \"],[0,[12],1,\"\\\\r\\\\L\"],[0,[],0,\" as the delimiter. This means, on the client side, for each message we send, we would also need to append this delimiter. Let's make the changes accordingly.\"]]],[10,13],[10,14],[10,15],[10,16],[1,\"p\",[[0,[],0,\"If you're getting the above error, it's an indication that the port on which our server listens is being reserved for some reason. It happens when some process which is listening on that port is still running. Though in our case, even though we stopped the server, it's still giving us this error. The reason here is something called as \"],[0,[14],1,\"Linger Time\"],[0,[],0,\". When a socket is closed (especially TCP socket), some data which is marked to be sent, still exists in the socket's send buffer. Unless the buffer is emptied or a timeout period (usually 30 seconds) is passed, the system reserves the port.\"]]],[1,\"p\",[[0,[],0,\"To fix this, we use the \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of sockets. If a socket is created with this option enabled, instead of throwing an error, it checks whether a socket which is listening on the same port is in lingering state. If it is, the socket will use the same address with an assumption that the earlier socket will release the port soon. In Nim, we have the \"],[0,[12],1,\"OptReuseAddr\"],[0,[],0,\" option which can be set as \"],[0,[12],1,\"true\"],[0,[],0,\" to enable \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of the socket.\"]]],[10,17],[1,\"p\",[[0,[],0,\"Let's run the server and clients again.\"]]],[10,18],[1,\"p\",[[0,[],0,\"As you can see now, the messages are no longer truncated and they are received in the same manner as sent by the client.\"]]],[1,\"p\",[[0,[],0,\"Now that we have spawned our basic server which accepts messages from a client, let's spawn another client and see what happens. Don't kill the currently running \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" and instead run \"],[0,[12],1,\"client.nim\"],[0,[],0,\" again in a new tab/terminal and send a few messages.\"]]],[10,19],[1,\"p\",[[0,[],0,\"If you check the tab/terminal running our server, you wouldn't find these messages at all. The server did not receive any message at all from our new client. Can you identify the problem?\"]]],[1,\"p\",[[0,[],0,\"Notice the lines \"],[0,[18],1,\"9-11\"],[0,[],0,\", where we wait and accept connection from a client. The moment a client connects, we never again accept and listen to data from new clients. As soon as we get a client, we just listen to new data from that client. What we can do is, as we listen to new data from one client, we'll also accept new connections from other clients. Our flow would go like this, \"]]],[10,20],[1,\"p\",[[0,[],0,\"However, there is a slight problem in step 2. In our server socket, as seen here, the server will block the program flow while it is listening for new clients since \"],[0,[12,19],2,\"server.accept()\"],[0,[],0,\" is a blocking function. Thus our messages will only be read once a client connects to the server. This is not even an acceptable case for our chat server.\"]]],[1,\"p\",[[0,[],0,\"Fortunately, sockets have an option to run in non-blocking mode. This means, our \"],[0,[12],1,\"accept()\"],[0,[],0,\" and \"],[0,[12],1,\"recv()\"],[0,[],0,\" functions will no longer block the code. If they have anything meaningful to return (like an incoming socket connection or a message), they will return that and continue execution. Otherwise, they will throw an error. Which means, we have to keep checking for new connections or messages and also handle the error in case we don't get any. \"]]],[1,\"p\",[[0,[],0,\"In Nim, we enable non-blocking mode using the \"],[0,[12,20],2,\"setBlocking()\"],[0,[],0,\" function of the underlying native socket. We'll also store all our connected sockets in a list so that we can iterate over them and receive messages from each of them. We'll do both, accept new connections and receive data from sockets in a single infinite loop, so that we keep accepting new connections while we receive messages from existing ones. Let's give this a try.\"]]],[10,21],[10,22],[1,\"p\",[[0,[],0,\"Let's execute our server now with multiple clients.\"]]],[10,23],[1,\"p\",[[0,[],0,\"Yay! We have it now. Our server accepts and receives messages from multiple clients. We have also managed client disconnections. What our server should do now is send messages from one client to other clients, which a chat server should do. Let's do it.\"]]],[10,24],[1,\"p\",[[0,[],0,\"We can build a small GUI or use \"],[0,[21],1,\"ncurses\"],[0,[],0,\" to do that interactively in terminal. Since both of these are outside the scope of this tutorial, we'll make a hack for now. We'll create two different types of clients - one for sending messages and one for receiving. We call them \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" respectively. \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" is exactly same as our \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,25],[1,\"p\",[[0,[],0,\"We would need some minor changes in our \"],[0,[12],1,\"server.nim\"],[0,[],0,\". Once the server receives a message, it will send it to all connected clients, except the one who sent the message.\"]]],[10,26],[1,\"p\",[[0,[],0,\"Open three terminals - one for \"],[0,[12],1,\"server.nim\"],[0,[],0,\", one for \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and one for \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" - and execute the respective files. Try sending some messages from sending client and see if you get those in the receiving client.\"]]],[10,27],[1,\"p\",[[0,[],0,\"You can open multiple terminals with \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and send messages to one another. You would observer that all receiving clients receive messages from all sending clients. This is because our server is current broadcasting all messages to everyone. We can limit this behavior, but we can skip that for now.\"]]],[1,\"p\",[[0,[],0,\"With this, you have completed a simple chat server with somewhat hacky clients (we'll fix that later). However, if you're working on a laptop, you would have noticed the noise of your CPU fan every time you run the server. If you're curious enough, check the output of \"],[0,[12],1,\"top\"],[0,[],0,\" command and you'll notice that the server process is taking up some chunk of CPU.\"]]],[10,28],[1,\"p\",[[0,[],0,\"It seems our code needs some fixing. Indeed it does. The way we are handling new connections and incoming messages on our server is very inefficient. We are persistently asking the socket for new connection and a new message, that too in an infinite loop. If socket was an actual person, it would mean as if we are pestering him every now and then for new information.\"]]],[1,\"p\",[[0,[],0,\"We have a solution for this. We'll make use of something that is core of lot of chat servers and surprisingly available on all platforms - \"],[0,[12,22],2,\"select\"],[0,[],0,\".\"]]],[1,\"h1\",[[0,[],0,\"IV. Using \"],[0,[12],1,\"select\"],[0,[],0,\" for optimization\"]]],[1,\"p\",[[0,[],0,\"Of all the amazing things that happened in Unix world, one was \"],[0,[12],1,\"select\"],[0,[],0,\". Originally appeared in BSD, \"],[0,[12],1,\"select\"],[0,[],0,\" was quickly adopted in other popular OS. It's a kernel level utility which tells us which file descriptors are ready to be read, written or have an error condition. It does this using low-level file monitoring or interrupts, instead of iterating through all files and repeatedly checking if they have changed. This is cleaner, efficient and puts minimal load on our CPU.\"]]],[1,\"h3\",[[0,[],0,\"How to use \"],[0,[12],1,\"select\"],[0,[],0,\" with our chat server?\"]]],[1,\"p\",[[0,[],0,\"Since all connected clients are nothing but file descriptors, we'll tell \"],[0,[12],1,\"select\"],[0,[],0,\" to monitor these given file descriptors and notify us when there's any data on them that is yet to be read. Once \"],[0,[12],1,\"select\"],[0,[],0,\" notifies us, it will give us a list of file descriptors which contain unread data. We'll iterate over these and see what data they have. Remember, when a socket receives data, it essentially means that it has data to be read.\"]]],[1,\"p\",[[0,[12],1,\"select\"],[0,[],0,\" in Nim is a part of  \"],[0,[12],1,\"selectors\"],[0,[],0,\" package. It has two important methods of our concern - \"],[0,[12,23],2,\"registerHandle\"],[0,[],0,\" and \"],[0,[12,24],2,\"select\"],[0,[],0,\". \"],[0,[12],1,\"registerHandle\"],[0,[],0,\" takes in a file description, the events we want to listen to (read, write, error) and optional data that we wish to receive when the event is triggered. \"],[0,[12],1,\"select\"],[0,[],0,\" takes in the timeout period until which it will wait for events on the registered handles (file descriptors). If we want \"],[0,[12],1,\"select\"],[0,[],0,\" to block our code, we can set timeout as \"],[0,[12],1,\"-1\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Let's dive into the code.\"]]],[10,29],[10,30],[1,\"p\",[[0,[],0,\"Let's run the program now and see our CPU usage.\"]]],[10,31],[10,32],[1,\"p\",[[0,[],0,\"It's not even showing in the top CPU consuming processes. That's great.\"]]],[10,33],[1,\"p\",[[0,[],0,\"With this we complete our basic chat server. I know clients are still messy, but for that, we would need to dive deep into the interactivity part which is beyond the scope of this tutorial. Next up, we can add clients with identity information so that server can uniquely tag who sent which message, 1:1 messaging instead of group messaging and an interactive UI. I might write a follow-up article with all of these in future.\"]]],[1,\"p\",[[0,[],0,\"Nim is an amazing language. To be able to do so much, in so little and clean code is amazing. We haven't touched on code optimization yet, but I believe we can use some micro-optimizations to make this code even faster. It's been a great exercise for me to move away from Python and learn interesting languages like Nim. \"]]],[1,\"p\",[[0,[],0,\"Let me know about your feedback. If you feel there were any issues with the tutorial, or writing style, or any errors in text or code, or any difficulty in understanding, or if you just wanna give a compliment, leave your comments below.\"]]]]}","created_at_ts":1548364917354,"created_at":"2019-01-24 21:21:57"},{"id":"5c4a2c7cf7e7b7692d246ede","post_id":"5c3229bfd149624e397d2920","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **1** All socket related functions, classes, utilities are in the [`net`](https://nim-lang.org/docs/net.html) package. We could have also used [`nativesockets`](https://nim-lang.org/docs/nativesockets.html) package which is exclusively for sockets. But it handles sockets at very low-level which might just lengthen our code.\\n> **3** Initialize our server socket using [`newSocket`](https://nim-lang.org/docs/net.html#newSocket,Domain,SockType,Protocol). This function also accepts some parameters which we will discuss in-depth later. For now, we are okay leaving it to the default values.\\n> **4-5** Set the socket to listen to new connections on port `5555` and start accepting new connections from other sockets. If [`address` parameter](https://nim-lang.org/docs/net.html#bindAddr,Socket,string) is not mentioned by default, the socket will listen to requests from all IP addresses.\\n> **8** Close our socket server. It is very important to close socket connections if they are no longer required. This is considered a clean way to end TCP connections with proper end-of-connection acknowledgement.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Hint: used config file '/etc/nim.cfg' [Conf]\\n(out)Hint: system [Processing]\\n(out)Hint: server [Processing]\\n(out)Hint: net [Processing]\\n(out)Hint: nativesockets [Processing]\\n(out)Hint: os [Processing]\\n(out)Hint: strutils [Processing]\\n(out)Hint: parseutils [Processing]\\n(out)Hint: math [Processing]\\n(out)Hint: algorithm [Processing]\\n(out)Hint: times [Processing]\\n(out)Hint: posix [Processing]\\n(out)Hint: ospaths [Processing]\\n(out)Hint: options [Processing]\\n(out)Hint: typetraits [Processing]\\n(out)Hint: sets [Processing]\\n(out)Hint: hashes [Processing]\\n(out)CC: server\\n(out)CC: stdlib_system\\n(out)CC: stdlib_net\\n(out)Hint:  [Link]\\n(out)Hint: operation successful (26847 lines compiled; 0.903 sec total; 47.43MiB peakmem; Debug Build) [SuccessX]\\n(out)Hint: /home/tejas/Projects/simple-chat-server/server  [Exec]</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"8-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Similar to the server, we need a socket object. The only difference here is, unlike server, which listens to connections, a client knows the server address and connects to it using the [`connect`](https://nim-lang.org/docs/net.html#connect,Socket,string) method. Thus, a client needs to have the address and port of the server.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"6-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message)\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **7** Once the user sends a message, we'll prompt for another message, sort of how chat applications provide a text box to send a message.\\n> **8-10** Prompt the user for a chat message and using the client socket, [`send`](https://nim-lang.org/docs/net.html#send,Socket,string) it to the server. Also, we are using [`readLine`](https://nim-lang.org/docs/system.html#readLine,File) so that the messsage gets stored only when user presses <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-1\\\" data-language=\\\"server.nim\\\" data-line=\\\"11-18\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recv(10)\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **12** Server will keep listening to new messages from all connected clients.\\n> **13** Read a few characters from the socket.\\n> **15-16** When a socket disconnects, it sends an empty string before disconnection. This can be used as an indication for the server that the client has disconnected. Since we are dealing with only one client, we'll stop receiving additional messages and exit the loop.\\n> **18** Print the received message on the console.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, wor\\n(out)Server: received from client: ldLorem ip\\n(out)Server: received from client: sum dolor \\n(out)Server: received from client: sit amet, \\n(out)Server: received from client: consectetu\\n(out)Server: received from client: r adipisci</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"13\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"If the server and client are still running, kill the processes with <kbd>Ctrl</kbd>+<kbd>C</kbd>. Execute `server.nim` and `client.nim` again.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)server.nim(6)            server\\n(out)net.nim(738)             bindAddr\\n(out)oserr.nim(110)           raiseOSError\\n(out)Error: unhandled exception: Address already in use [OSError]\\n(out)Error: execution of an external program failed: '/home/tejas/Projects/simple-chat-server/server '</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"4\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, world\\n(out)Server: received from client: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola, mundo\\n(out)> What's 1 + 1? Answer is 10 in binary.\\n(out)> </code></pre>\"}],[\"markdown\",{\"markdown\":\"1. Have an infinte loop (`while true`) which will keep our server running.\\n2. Inside the loop, accept new client connections and add those into our client list.\\n3. For each client in the client list, check if there is any data.\\n4. If there is any data, print it out.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"6,10-11,14-37\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **6** Set the socket as non-blocking. We set it on the low-level native socket API.\\n> **11** We need to store our connected clients in a list so that we can iterate over them to get messages.\\n> **13-37** Check if there are any existing connections. If yes, add them to the connected socket list. Then for each connected socket, check whether there are any messages to be read.\\n> **17** Add the connected socket in our clients list.\\n> **19** In non-blocking mode, [`accept`](https://nim-lang.org/docs/net.html#accept,Socket,Socket) throws an `OSError` if there are no pending connections at that moment. We ignore that exception because it's understandable that we won't have any pending connections all the time.\\n> **22** We maintain a list of clients which disconnected so that we remove those from our client list.\\n> **24** Iterate over all the connected clients and receive messages from them one by one.\\n> **26** We set the `timeout` to `1` since [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) call still blocks the code as the default timeout value is `-1`, which means block indefinitely till message is received.\\n> **29** Mark the client for removal if it has disconnected.\\n> **32** If no message is received within the timeout period, [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) throws a `TimeoutError`. Since we are operating in a non-blocking mode now, we shall ignore this error.\\n> **35-37** Remove any client marked for removal from the clients list.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: Hola\\n(out)Server: received from client: Foo\\n(out)Server: received from client: Bar\\n(out)Server: received from client: \\n(out)Server: client disconnected\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> Foo\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola\\n(out)> Bar\\n(out)> ^CTraceback (most recent call last)\\n(out)client.nim(9)            client\\n(out)sysio.nim(185)           readLine\\n(out)sysio.nim(158)           readLine\\n(out)SIGINT: Interrupted by Ctrl-C.</code></pre>\"}],[\"markdown\",{\"markdown\":\"There's a major catch here. Since sending and receiving messages is a simultaneous process, we would need some kinda GUI to handle these tasks asynchronously. Just think of it, suppose you are a client chatting on our server, you wouldn't receive any messages until you input a message because the `stdin.readLine()` will block all the code until the user hits <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client_sending.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\\n<pre data-language=\\\"client_receiving.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  let receivedMessage: string = client.recvLine()\\n  stdout.writeLine(\\\"Message: \\\", receivedMessage)\\n\\nclient.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"30-36\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n        continue\\n\\n      for receivingClient in clients:\\n        if receivingClient == client:\\n          continue\\n\\n        receivingClient.send(message & \\\"\\\\r\\\\L\\\")\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: What are you doing?</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> What are you doing?\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: What are you doing?</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/server-cpu-usage.png\",\"cardWidth\":\"\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"3-4,7,14,18-22,25-27,30-51,55\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\nimport os\\nimport selectors\\n\\nvar server: Socket = newSocket()\\nvar select: Selector[int] = newSelector[int]()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nselect.registerHandle(server.getFd(), {Event.Read}, -1)\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  var results: seq[ReadyKey] = select.select(-1)\\n\\n  for result in results:\\n    if Event.Read in result.events:\\n      if result.fd.SocketHandle == server.getFd():\\n        var client: Socket = new(Socket)\\n        server.accept(client)\\n\\n        client.getFd().setBlocking(false)\\n        select.registerHandle(client.getFd(), {Event.Read}, -1)\\n        clients.add(client)\\n        stdout.writeLine(\\\"Server: client connected\\\")\\n      else:\\n        var sourceClient: Socket = newSocket(result.fd.SocketHandle)\\n        var message = sourceClient.recvLine()\\n\\n        if message == \\\"\\\":\\n          var clientsToRemove: seq[int] = @[]\\n\\n          for index, client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              clientsToRemove.add(index)\\n\\n          for index in clientsToRemove:\\n            var client: Socket = clients[index]\\n            select.unregister(result.fd)\\n            clients.del(index)\\n            stdout.writeLine(\\\"Server: client disconnected\\\")\\n        else:\\n          stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\n          for client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              continue\\n\\n            client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nselect.close()\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Import the packages required for `select` functions. Note that we also imported `os` package. This is because, in Nim v0.18 and lower, `OSErrorCode` is not explicity imported in the `select` library. This is fixed in later versions.\\n> **7** We define our selector. It requires a type too. This would be the type of the data that we will associate in `registerHandle` method.\\n> **14** Register our server for read events. Note that read events on server socket would be incoming socket connections. Since we don't have any data associated with our server, we'll pass data as `-1`.\\n> **18** `select` returns a list of events along with their file descriptors for which the specified event was triggered.\\n> **21** We are only interested in read events.\\n> **22** The result received from `select` method contains the list of `events` that were captured and the file descriptor `fd` for which the event was triggered. Though our `fd` is enough, we compare the underlying socket for that file descriptor. If the one that triggered a read event was our server, it must mean that we recevied an incoming connection from a client.\\n> **26** Since clients are also handled by `select` we'll set them as non-blocking.\\n> **27** Just like our server, listen to read events of our client. Read event on a connected socket indicates that a new message has been arrived waiting to be read.\\n> **30** If the read event was not triggered by server, then it must be client. This means we received a message from a client which we have to broadcast to other clients.\\n> **31** Working with higher-level socket abstractions is easier. So, we convert our low-level socket from file descriptor in the result into a higher-level socket.\\n> **34-45** If a client is disconnected, remove it from clients list and [`unregister`](https://nim-lang.org/docs/selectors.html#unregister,Selector[T],) events for that client.\\n> **50** We could have compared the two objects directly. But since the newly created `sourceClient` object as a copy, it's identity would be different. This would cause an inequality even though the underlying sockets are same.\\n> **55** Like sockets, even select should be closed to signal the kernel that we are no longer listening to any events. This is a good practice to cleanly close everything before shutting down our program.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: select seems to be doing great</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> select seems to be doing great\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: select seems to be doing great</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/low-cpu-server.png\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://nim-lang.org\"]],[\"a\",[\"href\",\"https://nim-lang.org/install.html\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/Editor-Support\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/\"]],[\"a\",[\"href\",\"https://www.techopedia.com/definition/7154/full-duplex-fdx\"]],[\"a\",[\"href\",\"https://realtimeapi.io/hub/http-long-polling/\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/BOSH_(protocol)\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/Comet_(programming)\"]],[\"a\",[\"href\",\"https://www.tutorialspoint.com/unix_sockets/what_is_socket.htm\"]],[\"a\",[\"href\",\"https://www.html5rocks.com/en/tutorials/websockets/basics/\"]],[\"a\",[\"href\",\"https://caniuse.com/#feat=websockets\"]],[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"#server-snippet-1.13\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recv,Socket,int\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recvLine,Socket\"]],[\"a\",[\"href\",\"#server-snippet-2.9-11\"]],[\"a\",[\"href\",\"#server-snippet-2.10\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/nativesockets.html#setBlocking,SocketHandle,bool\"]],[\"a\",[\"href\",\"https://www.linuxjournal.com/content/getting-started-ncurses\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man2/select.2.html\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#registerHandle,Selector[T],,set[Event],T\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#select,Selector[T],int\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Build a simple chat server using nothing except sockets in Nim which pushes messages sent by any client to all other connected clients.\"]]],[1,\"p\",[[0,[],0,\"Since I'm at home now, on a break, not really doing anything, I decided to learn this new programming language called \"],[0,[0],1,\"Nim\"],[0,[],0,\" which is a perfect fusion between the elegance of Python and performance of C. What's better way to start with a language than actually creating something meaningful? So, I decided to not only create a simple chat server, but also write a step-by-step tutorial about it.\"]]],[1,\"h1\",[[0,[],0,\"Prerequisites\"]]],[3,\"ul\",[[[0,[],0,\"Install Nim compiler. You can get the download links or installation commands from their \"],[0,[1],1,\"installation\"],[0,[],0,\" page. The compiler version in this tutorial is 0.18.0, though newer versions should not have any issue.\"]],[[0,[],0,\"Get Nim plugins for your editor. Again you can refer to the \"],[0,[2],1,\"editor plugins page\"],[0,[],0,\" on their \"],[0,[3],1,\"GitHub\"],[0,[],0,\" \"],[0,[4],1,\"wiki\"],[0,[],0,\".\"]]]],[1,\"h1\",[[0,[],0,\"Problem statement\"]]],[1,\"blockquote\",[[0,[],0,\"Our chat server will be a single room (channel) chat where anyone can talk with everyone. When a user types in a message, it is sent to all other users connected to the chat server.\"]]],[1,\"p\",[[0,[],0,\"In any chat application, the core responsibility of a server is just to act as a relay and send messages from one client to the other. The server should be sufficiently fast enough to accept newer clients who join, read messages from the clients, broadcast those messages to all other clients, without showing any noticeable delay for any of the clients. This would truly make it an instant messaging platform.\"]]],[1,\"h1\",[[0,[],0,\"I. Plan\"]]],[1,\"p\",[[0,[],0,\"We need a \"],[0,[5],1,\"full duplex\"],[0,[],0,\" link between the server and the client so that messages can be sent and received at the same time. Of all the various methods like \"],[0,[6],1,\"long-polling\"],[0,[],0,\", \"],[0,[7],1,\"BOSH\"],[0,[],0,\", \"],[0,[8],1,\"comet\"],[0,[],0,\", my recommendation is to use \"],[0,[9],1,\"sockets\"],[0,[],0,\" (\"],[0,[10],1,\"web sockets\"],[0,[],0,\" for \"],[0,[11],1,\"browsers\"],[0,[],0,\"). They are truly bi-directional, light-weight and efficient for such use cases.\"]]],[3,\"ol\",[[[0,[],0,\"Our server would act as a socket server. \"]],[[0,[],0,\"It would bind to a specific port and IP address and listen for new socket connections.\"]],[[0,[],0,\"For every socket connected, it would add it to it's active socket connections list.\"]],[[0,[],0,\"When any connected socket sends a message to the server, the server will send it to all the sockets in the active socket connections list (except the one who sent it).\"]],[[0,[],0,\"If a connected socket closes connection, the server will remove it from the active list.\"]]]],[1,\"h1\",[[0,[],0,\"II. Getting started\"]]],[1,\"p\",[[0,[],0,\"Create a directory in your projects folder (or wherever you want) called \"],[0,[12],1,\"simple-chat-server\"],[0,[],0,\". You might want to open this directory in your code editor. \"],[0,[13],1,\"All path references here on will be relative to this directory.\"]]],[1,\"p\",[[0,[],0,\"Create a file called \"],[0,[12],1,\"server.nim\"],[0,[],0,\". This would be our core server file. To compile and run the code in this file, we will use \"],[0,[12],1,\"nim compile --run server.nim\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"We'll create a simple socket which will listen to new socket connections on port \"],[0,[12],1,\"5555\"],[0,[],0,\" and then close it.\"]]],[10,0],[10,1],[1,\"p\",[[0,[],0,\"To run the above code, we need to compile it first and then execute the binary. Fortunately, the Nim compiler can do both in a single command by specifying the \"],[0,[12],1,\"--run\"],[0,[],0,\" or \"],[0,[12],1,\"-r\"],[0,[],0,\" argument.\"]]],[1,\"p\",[[0,[],0,\"The compiler pulls all the required packages along with \"],[0,[12],1,\"server.nim\"],[0,[],0,\", transpiles them into C, links the libraries and creates an executable binary file with the same name as our file sans the file extension (in our case it becomes \"],[0,[12],1,\"server\"],[0,[],0,\") in the root of the project directory.\"]]],[10,2],[1,\"p\",[[0,[],0,\"The code ran but it didn't produce any output, except for compiler messages (we will be omitting compiler messages hereon). The server created the socket, listened for incoming connections and closed the socket connection.\"]]],[1,\"p\",[[0,[],0,\"Now we'll make the server wait until it receives new connections.\"]]],[10,3],[10,4],[1,\"p\",[[0,[],0,\"Our server is now actively listening for connections from clients. But… it's kinda stuck there because the server is waiting for a client to connect. We'll have to create one now. \"]]],[1,\"p\",[[0,[],0,\"Create a new file called \"],[0,[12],1,\"client.nim\"],[0,[],0,\". We'll use socket as a client and connect to the server.\"]]],[10,5],[10,6],[1,\"p\",[[0,[],0,\"Execute \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and at the same time, in a new terminal window/tab, execute \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,7],[1,\"p\",[[0,[],0,\"The server started and waited for connections. The moment we started the client, it connected to our socket server on the specified address. Server received this connection and assigned the client to the \"],[0,[12],1,\"client\"],[0,[],0,\" variable, and closed the socket.\"]]],[1,\"p\",[[0,[],0,\"This was a barebones socket server and client. We have to add the real magic - sending and receiving messages.\"]]],[1,\"h1\",[[0,[],0,\"III. Sending and receiving messages\"]]],[1,\"p\",[[0,[],0,\"A socket on an OS is a file descriptor (layman: just a file). When we say that a socket received some data, it actually signifies that some data was written on that file descriptor.\"]]],[1,\"p\",[[0,[],0,\"We have built a server which accepts socket connection and a client which connects to the server. Now, we'll dive into the actual communication between client and server.\"]]],[1,\"p\",[[0,[],0,\"On the client side, we'll prompt user to enter the message to be sent and then send this message over to the server.\"]]],[10,8],[10,9],[1,\"p\",[[0,[],0,\"On the server side, we need to listen to new messages from client. We'll also print the messages received from the client on the console.\"]]],[10,10],[10,11],[1,\"p\",[[0,[],0,\"Let's execute both \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" in two different terminal tabs/windows. Note that I have used \"],[0,[12],1,\"nim c -r\"],[0,[],0,\" which is a shorthand for \"],[0,[12],1,\"nim compile --run\"],[0,[],0,\".\"]]],[10,12],[1,\"p\",[[0,[],0,\"Something's gone horribly wrong here. Not only our client messages are truncated, but they are also mingled with other messages. We sent \"],[0,[14],1,\"Hello, world\"],[0,[],0,\" and \"],[0,[14],1,\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"],[0,[],0,\" as two different messages, but on the server side we're getting them in sort of mingled fashion. Also, our second message is incomplete.\"]]],[1,\"p\",[[0,[],0,\"The culprit here is line \"],[0,[15],1,\"13\"],[0,[],0,\". We specified that we'll only accept 10 characters from the socket. Also, until socket does not have at least 10 characters in its buffer, the \"],[0,[12,16],2,\"recv\"],[0,[],0,\" function will keep blocking indefinitely. The socket will keep reading messages until it has reached that count in its buffer and only then it will return the data. We can do the following,\"]]],[3,\"ol\",[[[0,[],0,\"We'll use some delimiting character. We'll read a very small amount of data from the socket and scan all characters in it and store it in our own buffer. If we encounter the delimiting character while scanning, we'll stop there, dump whatever we read so far in the buffer and return the buffer data.\"]],[[0,[],0,\"We can also use the \"],[0,[12],1,\"timeout\"],[0,[],0,\" parameter in the \"],[0,[12,16],2,\"recv\"],[0,[],0,\". By default, the timeout value is \"],[0,[12],1,\"-1\"],[0,[],0,\", which means we will wait indefinitely until there is enough data in the socket. We can set it to a small amount so that we don't wait indefinitely for new messages.\"]]]],[1,\"p\",[[0,[],0,\"A much better solution here would be to use the \"],[0,[12,17],2,\"recvLine\"],[0,[],0,\" method. It handles the complexity of handling the delimited character for us. It uses \"],[0,[12],1,\"\\\\r\\\\L\"],[0,[],0,\" as the delimiter. This means, on the client side, for each message we send, we would also need to append this delimiter. Let's make the changes accordingly.\"]]],[10,13],[10,14],[10,15],[10,16],[1,\"p\",[[0,[],0,\"If you're getting the above error, it's an indication that the port on which our server listens is being reserved for some reason. It happens when some process which is listening on that port is still running. Though in our case, even though we stopped the server, it's still giving us this error. The reason here is something called as \"],[0,[14],1,\"Linger Time\"],[0,[],0,\". When a socket is closed (especially TCP socket), some data which is marked to be sent, still exists in the socket's send buffer. Unless the buffer is emptied or a timeout period (usually 30 seconds) is passed, the system reserves the port.\"]]],[1,\"p\",[[0,[],0,\"To fix this, we use the \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of sockets. If a socket is created with this option enabled, instead of throwing an error, it checks whether a socket which is listening on the same port is in lingering state. If it is, the socket will use the same address with an assumption that the earlier socket will release the port soon. In Nim, we have the \"],[0,[12],1,\"OptReuseAddr\"],[0,[],0,\" option which can be set as \"],[0,[12],1,\"true\"],[0,[],0,\" to enable \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of the socket.\"]]],[10,17],[1,\"p\",[[0,[],0,\"Let's run the server and clients again.\"]]],[10,18],[1,\"p\",[[0,[],0,\"As you can see now, the messages are no longer truncated and they are received in the same manner as sent by the client.\"]]],[1,\"p\",[[0,[],0,\"Now that we have spawned our basic server which accepts messages from a client, let's spawn another client and see what happens. Don't kill the currently running \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" and instead run \"],[0,[12],1,\"client.nim\"],[0,[],0,\" again in a new tab/terminal and send a few messages.\"]]],[10,19],[1,\"p\",[[0,[],0,\"If you check the tab/terminal running our server, you wouldn't find these messages at all. The server did not receive any message at all from our new client. Can you identify the problem?\"]]],[1,\"p\",[[0,[],0,\"Notice the lines \"],[0,[18],1,\"9-11\"],[0,[],0,\", where we wait and accept connection from a client. The moment a client connects, we never again accept and listen to data from new clients. As soon as we get a client, we just listen to new data from that client. What we can do is, as we listen to new data from one client, we'll also accept new connections from other clients. Our flow would go like this, \"]]],[10,20],[1,\"p\",[[0,[],0,\"However, there is a slight problem in step 2. In our server socket, as seen here, the server will block the program flow while it is listening for new clients since \"],[0,[12,19],2,\"server.accept()\"],[0,[],0,\" is a blocking function. Thus our messages will only be read once a client connects to the server. This is not even an acceptable case for our chat server.\"]]],[1,\"p\",[[0,[],0,\"Fortunately, sockets have an option to run in non-blocking mode. This means, our \"],[0,[12],1,\"accept()\"],[0,[],0,\" and \"],[0,[12],1,\"recv()\"],[0,[],0,\" functions will no longer block the code. If they have anything meaningful to return (like an incoming socket connection or a message), they will return that and continue execution. Otherwise, they will throw an error. Which means, we have to keep checking for new connections or messages and also handle the error in case we don't get any. \"]]],[1,\"p\",[[0,[],0,\"In Nim, we enable non-blocking mode using the \"],[0,[12,20],2,\"setBlocking()\"],[0,[],0,\" function of the underlying native socket. We'll also store all our connected sockets in a list so that we can iterate over them and receive messages from each of them. We'll do both, accept new connections and receive data from sockets in a single infinite loop, so that we keep accepting new connections while we receive messages from existing ones. Let's give this a try.\"]]],[10,21],[10,22],[1,\"p\",[[0,[],0,\"Let's execute our server now with multiple clients.\"]]],[10,23],[1,\"p\",[[0,[],0,\"Yay! We have it now. Our server accepts and receives messages from multiple clients. We have also managed client disconnections. What our server should do now is send messages from one client to other clients, which a chat server should do. Let's do it.\"]]],[10,24],[1,\"p\",[[0,[],0,\"We can build a small GUI or use \"],[0,[21],1,\"ncurses\"],[0,[],0,\" to do that interactively in terminal. Since both of these are outside the scope of this tutorial, we'll make a hack for now. We'll create two different types of clients - one for sending messages and one for receiving. We call them \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" respectively. \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" is exactly same as our \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,25],[1,\"p\",[[0,[],0,\"We would need some minor changes in our \"],[0,[12],1,\"server.nim\"],[0,[],0,\". Once the server receives a message, it will send it to all connected clients, except the one who sent the message.\"]]],[10,26],[1,\"p\",[[0,[],0,\"Open three terminals - one for \"],[0,[12],1,\"server.nim\"],[0,[],0,\", one for \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and one for \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" - and execute the respective files. Try sending some messages from sending client and see if you get those in the receiving client.\"]]],[10,27],[1,\"p\",[[0,[],0,\"You can open multiple terminals with \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and send messages to one another. You would observer that all receiving clients receive messages from all sending clients. This is because our server is current broadcasting all messages to everyone. We can limit this behavior, but we can skip that for now.\"]]],[1,\"p\",[[0,[],0,\"With this, you have completed a simple chat server with somewhat hacky clients (we'll fix that later). However, if you're working on a laptop, you would have noticed the noise of your CPU fan every time you run the server. If you're curious enough, check the output of \"],[0,[12],1,\"top\"],[0,[],0,\" command and you'll notice that the server process is taking up some chunk of CPU.\"]]],[10,28],[1,\"p\",[[0,[],0,\"It seems our code needs some fixing. Indeed it does. The way we are handling new connections and incoming messages on our server is very inefficient. We are persistently asking the socket for new connection and a new message, that too in an infinite loop. If socket was an actual person, it would mean as if we are pestering him every now and then for new information.\"]]],[1,\"p\",[[0,[],0,\"We have a solution for this. We'll make use of something that is core of lot of chat servers and surprisingly available on all platforms - \"],[0,[12,22],2,\"select\"],[0,[],0,\".\"]]],[1,\"h1\",[[0,[],0,\"IV. Using \"],[0,[12],1,\"select\"],[0,[],0,\" for optimization\"]]],[1,\"p\",[[0,[],0,\"Of all the amazing things that happened in Unix world, one was \"],[0,[12],1,\"select\"],[0,[],0,\". Originally appeared in BSD, \"],[0,[12],1,\"select\"],[0,[],0,\" was quickly adopted in other popular OS. It's a kernel level utility which tells us which file descriptors are ready to be read, written or have an error condition. It does this using low-level file monitoring and interrupts, instead of iterating through all files and repeatedly checking if they have changed. This is cleaner, efficient and puts minimal load on our CPU.\"]]],[1,\"h3\",[[0,[],0,\"How to use \"],[0,[12],1,\"select\"],[0,[],0,\" with our chat server?\"]]],[1,\"p\",[[0,[],0,\"Since all connected clients are nothing but file descriptors, we'll tell \"],[0,[12],1,\"select\"],[0,[],0,\" to monitor these given file descriptors and notify us when there's any data on them that is yet to be read. Once \"],[0,[12],1,\"select\"],[0,[],0,\" notifies us, it will give us a list of file descriptors which contain unread data. We'll iterate over these and see what data they have. Remember, when a socket receives data, it essentially means that it has data to be read.\"]]],[1,\"p\",[[0,[12],1,\"select\"],[0,[],0,\" in Nim is a part of  \"],[0,[12],1,\"selectors\"],[0,[],0,\" package. It has two important methods of our concern - \"],[0,[12,23],2,\"registerHandle\"],[0,[],0,\" and \"],[0,[12,24],2,\"select\"],[0,[],0,\". \"],[0,[12],1,\"registerHandle\"],[0,[],0,\" takes in a file description, the events we want to listen to (read, write, error) and optional data that we wish to receive when the event is triggered. \"],[0,[12],1,\"select\"],[0,[],0,\" takes in the timeout period until which it will wait for events on the registered handles (file descriptors). If we want \"],[0,[12],1,\"select\"],[0,[],0,\" to block our code, we can set timeout as \"],[0,[12],1,\"-1\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Let's dive into the code.\"]]],[10,29],[10,30],[1,\"p\",[[0,[],0,\"Let's run the program now and see our CPU usage.\"]]],[10,31],[10,32],[1,\"p\",[[0,[],0,\"It's not even showing in the top CPU consuming processes. That's great.\"]]],[10,33],[1,\"p\",[[0,[],0,\"With this we complete our basic chat server. I know clients are still messy, but for that, we would need to dive deep into the interactivity part which is beyond the scope of this tutorial. Next up, we can add clients with identity information so that server can uniquely tag who sent which message, 1:1 messaging instead of group messaging and an interactive UI. I might write a follow-up article with all of these in future.\"]]],[1,\"p\",[[0,[],0,\"Nim is an amazing language. To be able to do so much, in so little and clean code is amazing. We haven't touched on code optimization yet, but I believe we can use some micro-optimizations to make this code even faster. It's been a great exercise for me to move away from Python and learn interesting languages like Nim. \"]]],[1,\"p\",[[0,[],0,\"Let me know about your feedback. If you feel there were any issues with the tutorial, or writing style, or any errors in text or code, or any difficulty in understanding, or if you just wanna give a compliment, leave your comments below.\"]]]]}","created_at_ts":1548364924351,"created_at":"2019-01-24 21:22:04"},{"id":"5c4a2cbaf7e7b7692d246edf","post_id":"5c3229bfd149624e397d2920","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **1** All socket related functions, classes, utilities are in the [`net`](https://nim-lang.org/docs/net.html) package. We could have also used [`nativesockets`](https://nim-lang.org/docs/nativesockets.html) package which is exclusively for sockets. But it handles sockets at very low-level which might just lengthen our code.\\n> **3** Initialize our server socket using [`newSocket`](https://nim-lang.org/docs/net.html#newSocket,Domain,SockType,Protocol). This function also accepts some parameters which we will discuss in-depth later. For now, we are okay leaving it to the default values.\\n> **4-5** Set the socket to listen to new connections on port `5555` and start accepting new connections from other sockets. If [`address` parameter](https://nim-lang.org/docs/net.html#bindAddr,Socket,string) is not mentioned by default, the socket will listen to requests from all IP addresses.\\n> **8** Close our socket server. It is very important to close socket connections if they are no longer required. This is considered a clean way to end TCP connections with proper end-of-connection acknowledgement.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Hint: used config file '/etc/nim.cfg' [Conf]\\n(out)Hint: system [Processing]\\n(out)Hint: server [Processing]\\n(out)Hint: net [Processing]\\n(out)Hint: nativesockets [Processing]\\n(out)Hint: os [Processing]\\n(out)Hint: strutils [Processing]\\n(out)Hint: parseutils [Processing]\\n(out)Hint: math [Processing]\\n(out)Hint: algorithm [Processing]\\n(out)Hint: times [Processing]\\n(out)Hint: posix [Processing]\\n(out)Hint: ospaths [Processing]\\n(out)Hint: options [Processing]\\n(out)Hint: typetraits [Processing]\\n(out)Hint: sets [Processing]\\n(out)Hint: hashes [Processing]\\n(out)CC: server\\n(out)CC: stdlib_system\\n(out)CC: stdlib_net\\n(out)Hint:  [Link]\\n(out)Hint: operation successful (26847 lines compiled; 0.903 sec total; 47.43MiB peakmem; Debug Build) [SuccessX]\\n(out)Hint: /home/tejas/Projects/simple-chat-server/server  [Exec]</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"8-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Similar to the server, we need a socket object. The only difference here is, unlike server, which listens to connections, a client knows the server address and connects to it using the [`connect`](https://nim-lang.org/docs/net.html#connect,Socket,string) method. Thus, a client needs to have the address and port of the server.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"6-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message)\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **7** Once the user sends a message, we'll prompt for another message, sort of how chat applications provide a text box to send a message.\\n> **8-10** Prompt the user for a chat message and using the client socket, [`send`](https://nim-lang.org/docs/net.html#send,Socket,string) it to the server. Also, we are using [`readLine`](https://nim-lang.org/docs/system.html#readLine,File) so that the messsage gets stored only when user presses <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-1\\\" data-language=\\\"server.nim\\\" data-line=\\\"11-18\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recv(10)\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **12** Server will keep listening to new messages from all connected clients.\\n> **13** Read a few characters from the socket.\\n> **15-16** When a socket disconnects, it sends an empty string before disconnection. This can be used as an indication for the server that the client has disconnected. Since we are dealing with only one client, we'll stop receiving additional messages and exit the loop.\\n> **18** Print the received message on the console.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, wor\\n(out)Server: received from client: ldLorem ip\\n(out)Server: received from client: sum dolor \\n(out)Server: received from client: sit amet, \\n(out)Server: received from client: consectetu\\n(out)Server: received from client: r adipisci</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"13\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"If the server and client are still running, kill the processes with <kbd>Ctrl</kbd>+<kbd>C</kbd>. Execute `server.nim` and `client.nim` again.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)server.nim(6)            server\\n(out)net.nim(738)             bindAddr\\n(out)oserr.nim(110)           raiseOSError\\n(out)Error: unhandled exception: Address already in use [OSError]\\n(out)Error: execution of an external program failed: '/home/tejas/Projects/simple-chat-server/server '</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"4\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, world\\n(out)Server: received from client: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola, mundo\\n(out)> What's 1 + 1? Answer is 10 in binary.\\n(out)> </code></pre>\"}],[\"markdown\",{\"markdown\":\"1. Have an infinte loop (`while true`) which will keep our server running.\\n2. Inside the loop, accept new client connections and add those into our client list.\\n3. For each client in the client list, check if there is any data.\\n4. If there is any data, print it out.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"6,10-11,14-37\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **6** Set the socket as non-blocking. We set it on the low-level native socket API.\\n> **11** We need to store our connected clients in a list so that we can iterate over them to get messages.\\n> **13-37** Check if there are any existing connections. If yes, add them to the connected socket list. Then for each connected socket, check whether there are any messages to be read.\\n> **17** Add the connected socket in our clients list.\\n> **19** In non-blocking mode, [`accept`](https://nim-lang.org/docs/net.html#accept,Socket,Socket) throws an `OSError` if there are no pending connections at that moment. We ignore that exception because it's understandable that we won't have any pending connections all the time.\\n> **22** We maintain a list of clients which disconnected so that we remove those from our client list.\\n> **24** Iterate over all the connected clients and receive messages from them one by one.\\n> **26** We set the `timeout` to `1` since [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) call still blocks the code as the default timeout value is `-1`, which means block indefinitely till message is received.\\n> **29** Mark the client for removal if it has disconnected.\\n> **32** If no message is received within the timeout period, [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) throws a `TimeoutError`. Since we are operating in a non-blocking mode now, we shall ignore this error.\\n> **35-37** Remove any client marked for removal from the clients list.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: Hola\\n(out)Server: received from client: Foo\\n(out)Server: received from client: Bar\\n(out)Server: received from client: \\n(out)Server: client disconnected\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> Foo\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola\\n(out)> Bar\\n(out)> ^CTraceback (most recent call last)\\n(out)client.nim(9)            client\\n(out)sysio.nim(185)           readLine\\n(out)sysio.nim(158)           readLine\\n(out)SIGINT: Interrupted by Ctrl-C.</code></pre>\"}],[\"markdown\",{\"markdown\":\"There's a major catch here. Since sending and receiving messages is a simultaneous process, we would need some kinda GUI to handle these tasks asynchronously. Just think of it, suppose you are a client chatting on our server, you wouldn't receive any messages until you input a message because the `stdin.readLine()` will block all the code until the user hits <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client_sending.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\\n<pre data-language=\\\"client_receiving.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  let receivedMessage: string = client.recvLine()\\n  stdout.writeLine(\\\"Message: \\\", receivedMessage)\\n\\nclient.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"30-36\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n        continue\\n\\n      for receivingClient in clients:\\n        if receivingClient == client:\\n          continue\\n\\n        receivingClient.send(message & \\\"\\\\r\\\\L\\\")\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: What are you doing?</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> What are you doing?\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: What are you doing?</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/server-cpu-usage.png\",\"cardWidth\":\"\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"3-4,7,14,18-22,25-27,30-51,55\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\nimport os\\nimport selectors\\n\\nvar server: Socket = newSocket()\\nvar select: Selector[int] = newSelector[int]()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nselect.registerHandle(server.getFd(), {Event.Read}, -1)\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  var results: seq[ReadyKey] = select.select(-1)\\n\\n  for result in results:\\n    if Event.Read in result.events:\\n      if result.fd.SocketHandle == server.getFd():\\n        var client: Socket = new(Socket)\\n        server.accept(client)\\n\\n        client.getFd().setBlocking(false)\\n        select.registerHandle(client.getFd(), {Event.Read}, -1)\\n        clients.add(client)\\n        stdout.writeLine(\\\"Server: client connected\\\")\\n      else:\\n        var sourceClient: Socket = newSocket(result.fd.SocketHandle)\\n        var message = sourceClient.recvLine()\\n\\n        if message == \\\"\\\":\\n          var clientsToRemove: seq[int] = @[]\\n\\n          for index, client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              clientsToRemove.add(index)\\n\\n          for index in clientsToRemove:\\n            var client: Socket = clients[index]\\n            select.unregister(result.fd)\\n            clients.del(index)\\n            stdout.writeLine(\\\"Server: client disconnected\\\")\\n        else:\\n          stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\n          for client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              continue\\n\\n            client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nselect.close()\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Import the packages required for `select` functions. Note that we also imported `os` package. This is because, in Nim v0.18 and lower, `OSErrorCode` is not explicity imported in the `select` library. This is fixed in later versions.\\n> **7** We define our selector. It requires a type too. This would be the type of the data that we will associate in `registerHandle` method.\\n> **14** Register our server for read events. Note that read events on server socket would be incoming socket connections. Since we don't have any data associated with our server, we'll pass data as `-1`.\\n> **18** `select` returns a list of events along with their file descriptors for which the specified event was triggered.\\n> **21** We are only interested in read events.\\n> **22** The result received from `select` method contains the list of `events` that were captured and the file descriptor `fd` for which the event was triggered. Though our `fd` is enough, we compare the underlying socket for that file descriptor. If the one that triggered a read event was our server, it must mean that we recevied an incoming connection from a client.\\n> **26** Since clients are also handled by `select` we'll set them as non-blocking.\\n> **27** Just like our server, listen to read events of our client. Read event on a connected socket indicates that a new message has been arrived waiting to be read.\\n> **30** If the read event was not triggered by server, then it must be client. This means we received a message from a client which we have to broadcast to other clients.\\n> **31** Working with higher-level socket abstractions is easier. So, we convert our low-level socket from file descriptor in the result into a higher-level socket.\\n> **34-45** If a client is disconnected, remove it from clients list and [`unregister`](https://nim-lang.org/docs/selectors.html#unregister,Selector[T],) events for that client.\\n> **50** We could have compared the two objects directly. But since the newly created `sourceClient` object as a copy, it's identity would be different. This would cause an inequality even though the underlying sockets are same.\\n> **55** Like sockets, even select should be closed to signal the kernel that we are no longer listening to any events. This is a good practice to cleanly close everything before shutting down our program.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: select seems to be doing great</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> select seems to be doing great\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: select seems to be doing great</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/low-cpu-server.png\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://nim-lang.org\"]],[\"a\",[\"href\",\"https://nim-lang.org/install.html\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/Editor-Support\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/\"]],[\"a\",[\"href\",\"https://www.techopedia.com/definition/7154/full-duplex-fdx\"]],[\"a\",[\"href\",\"https://realtimeapi.io/hub/http-long-polling/\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/BOSH_(protocol)\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/Comet_(programming)\"]],[\"a\",[\"href\",\"https://www.tutorialspoint.com/unix_sockets/what_is_socket.htm\"]],[\"a\",[\"href\",\"https://www.html5rocks.com/en/tutorials/websockets/basics/\"]],[\"a\",[\"href\",\"https://caniuse.com/#feat=websockets\"]],[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"#server-snippet-1.13\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recv,Socket,int\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recvLine,Socket\"]],[\"a\",[\"href\",\"#server-snippet-2.9-11\"]],[\"a\",[\"href\",\"#server-snippet-2.10\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/nativesockets.html#setBlocking,SocketHandle,bool\"]],[\"a\",[\"href\",\"https://www.linuxjournal.com/content/getting-started-ncurses\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man2/select.2.html\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#registerHandle,Selector[T],,set[Event],T\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#select,Selector[T],int\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Build a simple chat server using nothing except sockets in Nim which pushes messages sent by any client to all other connected clients.\"]]],[1,\"p\",[[0,[],0,\"Since I'm at home now, on a break, not really doing anything, I decided to learn this new programming language called \"],[0,[0],1,\"Nim\"],[0,[],0,\" which is a perfect fusion between the elegance of Python and performance of C. What's better way to start with a language than actually creating something meaningful? So, I decided to not only create a simple chat server, but also write a step-by-step tutorial about it.\"]]],[1,\"h1\",[[0,[],0,\"Prerequisites\"]]],[3,\"ul\",[[[0,[],0,\"Install Nim compiler. You can get the download links or installation commands from their \"],[0,[1],1,\"installation\"],[0,[],0,\" page. The compiler version in this tutorial is 0.18.0, though newer versions should not have any issue.\"]],[[0,[],0,\"Get Nim plugins for your editor. Again you can refer to the \"],[0,[2],1,\"editor plugins page\"],[0,[],0,\" on their \"],[0,[3],1,\"GitHub\"],[0,[],0,\" \"],[0,[4],1,\"wiki\"],[0,[],0,\".\"]]]],[1,\"h1\",[[0,[],0,\"Problem statement\"]]],[1,\"blockquote\",[[0,[],0,\"Our chat server will be a single room (channel) chat where anyone can talk with everyone. When a user types in a message, it is sent to all other users connected to the chat server.\"]]],[1,\"p\",[[0,[],0,\"In any chat application, the core responsibility of a server is just to act as a relay and send messages from one client to the other. The server should be sufficiently fast enough to accept newer clients who join, read messages from the clients, broadcast those messages to all other clients, without showing any noticeable delay for any of the clients. This would truly make it an instant messaging platform.\"]]],[1,\"h1\",[[0,[],0,\"I. Plan\"]]],[1,\"p\",[[0,[],0,\"We need a \"],[0,[5],1,\"full duplex\"],[0,[],0,\" link between the server and the client so that messages can be sent and received at the same time. Of all the various methods like \"],[0,[6],1,\"long-polling\"],[0,[],0,\", \"],[0,[7],1,\"BOSH\"],[0,[],0,\", \"],[0,[8],1,\"comet\"],[0,[],0,\", my recommendation is to use \"],[0,[9],1,\"sockets\"],[0,[],0,\" (\"],[0,[10],1,\"web sockets\"],[0,[],0,\" for \"],[0,[11],1,\"browsers\"],[0,[],0,\"). They are truly bi-directional, light-weight and efficient for such use cases.\"]]],[3,\"ol\",[[[0,[],0,\"Our server would act as a socket server. \"]],[[0,[],0,\"It would bind to a specific port and IP address and listen for new socket connections.\"]],[[0,[],0,\"For every socket connected, it would add it to it's active socket connections list.\"]],[[0,[],0,\"When any connected socket sends a message to the server, the server will send it to all the sockets in the active socket connections list (except the one who sent it).\"]],[[0,[],0,\"If a connected socket closes connection, the server will remove it from the active list.\"]]]],[1,\"h1\",[[0,[],0,\"II. Getting started\"]]],[1,\"p\",[[0,[],0,\"Create a directory in your projects folder (or wherever you want) called \"],[0,[12],1,\"simple-chat-server\"],[0,[],0,\". You might want to open this directory in your code editor. \"],[0,[13],1,\"All path references here on will be relative to this directory.\"]]],[1,\"p\",[[0,[],0,\"Create a file called \"],[0,[12],1,\"server.nim\"],[0,[],0,\". This would be our core server file. To compile and run the code in this file, we will use \"],[0,[12],1,\"nim compile --run server.nim\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"We'll create a simple socket which will listen to new socket connections on port \"],[0,[12],1,\"5555\"],[0,[],0,\" and then close it.\"]]],[10,0],[10,1],[1,\"p\",[[0,[],0,\"To run the above code, we need to compile it first and then execute the binary. Fortunately, the Nim compiler can do both in a single command by specifying the \"],[0,[12],1,\"--run\"],[0,[],0,\" or \"],[0,[12],1,\"-r\"],[0,[],0,\" argument.\"]]],[1,\"p\",[[0,[],0,\"The compiler pulls all the required packages along with \"],[0,[12],1,\"server.nim\"],[0,[],0,\", transpiles them into C, links the libraries and creates an executable binary file with the same name as our file sans the file extension (in our case it becomes \"],[0,[12],1,\"server\"],[0,[],0,\") in the root of the project directory.\"]]],[10,2],[1,\"p\",[[0,[],0,\"The code ran but it didn't produce any output, except for compiler messages (we will be omitting compiler messages hereon). The server created the socket, listened for incoming connections and closed the socket connection.\"]]],[1,\"p\",[[0,[],0,\"Now we'll make the server wait until it receives new connections.\"]]],[10,3],[10,4],[1,\"p\",[[0,[],0,\"Our server is now actively listening for connections from clients. But… it's kinda stuck there because the server is waiting for a client to connect. We'll have to create one now. \"]]],[1,\"p\",[[0,[],0,\"Create a new file called \"],[0,[12],1,\"client.nim\"],[0,[],0,\". We'll use socket as a client and connect to the server.\"]]],[10,5],[10,6],[1,\"p\",[[0,[],0,\"Execute \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and at the same time, in a new terminal window/tab, execute \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,7],[1,\"p\",[[0,[],0,\"The server started and waited for connections. The moment we started the client, it connected to our socket server on the specified address. Server received this connection and assigned the client to the \"],[0,[12],1,\"client\"],[0,[],0,\" variable, and closed the socket.\"]]],[1,\"p\",[[0,[],0,\"This was a barebones socket server and client. We have to add the real magic - sending and receiving messages.\"]]],[1,\"h1\",[[0,[],0,\"III. Sending and receiving messages\"]]],[1,\"p\",[[0,[],0,\"A socket on an OS is a file descriptor (layman: just a file). When we say that a socket received some data, it actually signifies that some data was written on that file descriptor.\"]]],[1,\"p\",[[0,[],0,\"We have built a server which accepts socket connection and a client which connects to the server. Now, we'll dive into the actual communication between client and server.\"]]],[1,\"p\",[[0,[],0,\"On the client side, we'll prompt user to enter the message to be sent and then send this message over to the server.\"]]],[10,8],[10,9],[1,\"p\",[[0,[],0,\"On the server side, we need to listen to new messages from client. We'll also print the messages received from the client on the console.\"]]],[10,10],[10,11],[1,\"p\",[[0,[],0,\"Let's execute both \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" in two different terminal tabs/windows. Note that I have used \"],[0,[12],1,\"nim c -r\"],[0,[],0,\" which is a shorthand for \"],[0,[12],1,\"nim compile --run\"],[0,[],0,\".\"]]],[10,12],[1,\"p\",[[0,[],0,\"Something's gone horribly wrong here. Not only our client messages are truncated, but they are also mingled with other messages. We sent \"],[0,[14],1,\"Hello, world\"],[0,[],0,\" and \"],[0,[14],1,\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"],[0,[],0,\" as two different messages, but on the server side we're getting them in sort of mingled fashion. Also, our second message is incomplete.\"]]],[1,\"p\",[[0,[],0,\"The culprit here is line \"],[0,[15],1,\"13\"],[0,[],0,\". We specified that we'll only accept 10 characters from the socket. Also, until socket does not have at least 10 characters in its buffer, the \"],[0,[12,16],2,\"recv\"],[0,[],0,\" function will keep blocking indefinitely. The socket will keep reading messages until it has reached that count in its buffer and only then it will return the data. We can do the following,\"]]],[3,\"ol\",[[[0,[],0,\"We'll use some delimiting character. We'll read a very small amount of data from the socket and scan all characters in it and store it in our own buffer. If we encounter the delimiting character while scanning, we'll stop there, dump whatever we read so far in the buffer and return the buffer data.\"]],[[0,[],0,\"We can also use the \"],[0,[12],1,\"timeout\"],[0,[],0,\" parameter in the \"],[0,[12,16],2,\"recv\"],[0,[],0,\". By default, the timeout value is \"],[0,[12],1,\"-1\"],[0,[],0,\", which means we will wait indefinitely until there is enough data in the socket. We can set it to a small amount so that we don't wait indefinitely for new messages.\"]]]],[1,\"p\",[[0,[],0,\"A much better solution here would be to use the \"],[0,[12,17],2,\"recvLine\"],[0,[],0,\" method. It handles the complexity of handling the delimited character for us. It uses \"],[0,[12],1,\"\\\\r\\\\L\"],[0,[],0,\" as the delimiter. This means, on the client side, for each message we send, we would also need to append this delimiter. Let's make the changes accordingly.\"]]],[10,13],[10,14],[10,15],[10,16],[1,\"p\",[[0,[],0,\"If you're getting the above error, it's an indication that the port on which our server listens is being reserved for some reason. It happens when some process which is listening on that port is still running. Though in our case, even though we stopped the server, it's still giving us this error. The reason here is something called as \"],[0,[14],1,\"Linger Time\"],[0,[],0,\". When a socket is closed (especially TCP socket), some data which is marked to be sent, still exists in the socket's send buffer. Unless the buffer is emptied or a timeout period (usually 30 seconds) is passed, the system reserves the port.\"]]],[1,\"p\",[[0,[],0,\"To fix this, we use the \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of sockets. If a socket is created with this option enabled, instead of throwing an error, it checks whether a socket which is listening on the same port is in lingering state. If it is, the socket will use the same address with an assumption that the earlier socket will release the port soon. In Nim, we have the \"],[0,[12],1,\"OptReuseAddr\"],[0,[],0,\" option which can be set as \"],[0,[12],1,\"true\"],[0,[],0,\" to enable \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of the socket.\"]]],[10,17],[1,\"p\",[[0,[],0,\"Let's run the server and clients again.\"]]],[10,18],[1,\"p\",[[0,[],0,\"As you can see now, the messages are no longer truncated and they are received in the same manner as sent by the client.\"]]],[1,\"p\",[[0,[],0,\"Now that we have spawned our basic server which accepts messages from a client, let's spawn another client and see what happens. Don't kill the currently running \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" and instead run \"],[0,[12],1,\"client.nim\"],[0,[],0,\" again in a new tab/terminal and send a few messages.\"]]],[10,19],[1,\"p\",[[0,[],0,\"If you check the tab/terminal running our server, you wouldn't find these messages at all. The server did not receive any message at all from our new client. Can you identify the problem?\"]]],[1,\"p\",[[0,[],0,\"Notice the lines \"],[0,[18],1,\"9-11\"],[0,[],0,\", where we wait and accept connection from a client. The moment a client connects, we never again accept and listen to data from new clients. As soon as we get a client, we just listen to new data from that client. What we can do is, as we listen to new data from one client, we'll also accept new connections from other clients. Our flow would go like this, \"]]],[10,20],[1,\"p\",[[0,[],0,\"However, there is a slight problem in step 2. In our server socket, as seen here, the server will block the program flow while it is listening for new clients since \"],[0,[12,19],2,\"server.accept()\"],[0,[],0,\" is a blocking function. Thus our messages will only be read once a client connects to the server. This is not even an acceptable case for our chat server.\"]]],[1,\"p\",[[0,[],0,\"Fortunately, sockets have an option to run in non-blocking mode. This means, our \"],[0,[12],1,\"accept()\"],[0,[],0,\" and \"],[0,[12],1,\"recv()\"],[0,[],0,\" functions will no longer block the code. If they have anything meaningful to return (like an incoming socket connection or a message), they will return that and continue execution. Otherwise, they will throw an error. Which means, we have to keep checking for new connections or messages and also handle the error in case we don't get any. \"]]],[1,\"p\",[[0,[],0,\"In Nim, we enable non-blocking mode using the \"],[0,[12,20],2,\"setBlocking()\"],[0,[],0,\" function of the underlying native socket. We'll also store all our connected sockets in a list so that we can iterate over them and receive messages from each of them. We'll do both, accept new connections and receive data from sockets in a single infinite loop, so that we keep accepting new connections while we receive messages from existing ones. Let's give this a try.\"]]],[10,21],[10,22],[1,\"p\",[[0,[],0,\"Let's execute our server now with multiple clients.\"]]],[10,23],[1,\"p\",[[0,[],0,\"Yay! We have it now. Our server accepts and receives messages from multiple clients. We have also managed client disconnections. What our server should do now is send messages from one client to other clients, which a chat server should do. Let's do it.\"]]],[10,24],[1,\"p\",[[0,[],0,\"We can build a small GUI or use \"],[0,[21],1,\"ncurses\"],[0,[],0,\" to do that interactively in terminal. Since both of these are outside the scope of this tutorial, we'll make a hack for now. We'll create two different types of clients - one for sending messages and one for receiving. We call them \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" respectively. \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" is exactly same as our \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,25],[1,\"p\",[[0,[],0,\"We would need some minor changes in our \"],[0,[12],1,\"server.nim\"],[0,[],0,\". Once the server receives a message, it will send it to all connected clients, except the one who sent the message.\"]]],[10,26],[1,\"p\",[[0,[],0,\"Open three terminals - one for \"],[0,[12],1,\"server.nim\"],[0,[],0,\", one for \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and one for \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" - and execute the respective files. Try sending some messages from sending client and see if you get those in the receiving client.\"]]],[10,27],[1,\"p\",[[0,[],0,\"You can open multiple terminals with \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and send messages to one another. You would observer that all receiving clients receive messages from all sending clients. This is because our server is current broadcasting all messages to everyone. We can limit this behavior, but we can skip that for now.\"]]],[1,\"p\",[[0,[],0,\"With this, you have completed a simple chat server with somewhat hacky clients (we'll fix that later). However, if you're working on a laptop, you would have noticed the noise of your CPU fan every time you run the server. If you're curious enough, check the output of \"],[0,[12],1,\"top\"],[0,[],0,\" command and you'll notice that the server process is taking up some chunk of CPU.\"]]],[10,28],[1,\"p\",[[0,[],0,\"It seems our code needs some fixing. Indeed it does. The way we are handling new connections and incoming messages on our server is very inefficient. We are persistently asking the socket for new connection and a new message, that too in an infinite loop. If socket was an actual person, it would mean as if we are pestering him every now and then for new information.\"]]],[1,\"p\",[[0,[],0,\"We have a solution for this. We'll make use of something that is core of lot of chat servers and surprisingly available on all platforms - \"],[0,[12,22],2,\"select\"],[0,[],0,\".\"]]],[1,\"h1\",[[0,[],0,\"IV. Using \"],[0,[12],1,\"select\"],[0,[],0,\" for optimization\"]]],[1,\"p\",[[0,[],0,\"Of all the amazing things that happened in Unix world, one was \"],[0,[12],1,\"select\"],[0,[],0,\". Originally appeared in BSD, \"],[0,[12],1,\"select\"],[0,[],0,\" was quickly adopted in other popular OS. It's a kernel level utility which tells us which file descriptors are ready to be read, written or have an error condition. It does this using low-level file monitoring and interrupts, instead of iterating through all files and repeatedly checking if they have changed. This is cleaner, efficient and puts minimal load on our CPU.\"]]],[1,\"h3\",[[0,[],0,\"How to use \"],[0,[12],1,\"select\"],[0,[],0,\" with our chat server?\"]]],[1,\"p\",[[0,[],0,\"Since all connected clients are nothing but file descriptors, we'll tell \"],[0,[12],1,\"select\"],[0,[],0,\" to monitor these given file descriptors and notify us when there's any data on them that is yet to be read. Once \"],[0,[12],1,\"select\"],[0,[],0,\" notifies us, it will give us a list of file descriptors which contain unread data. We'll iterate over these and see what data they have. Remember, when a socket receives data, it essentially means that it has data to be read.\"]]],[1,\"p\",[[0,[12],1,\"select\"],[0,[],0,\" in Nim is a part of  \"],[0,[12],1,\"selectors\"],[0,[],0,\" package. It has two important methods of our concern - \"],[0,[12,23],2,\"registerHandle\"],[0,[],0,\" and \"],[0,[12,24],2,\"select\"],[0,[],0,\". \"],[0,[12],1,\"registerHandle\"],[0,[],0,\" takes in a file descriptor, the events we want to listen to (read, write, error) and optional data that we wish to receive when the event is triggered. \"],[0,[12],1,\"select\"],[0,[],0,\" takes in the timeout period until which it will wait for events on the registered handles (file descriptors). If we want \"],[0,[12],1,\"select\"],[0,[],0,\" to block our code, we can set timeout as \"],[0,[12],1,\"-1\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Let's dive into the code.\"]]],[10,29],[10,30],[1,\"p\",[[0,[],0,\"Let's run the program now and see our CPU usage.\"]]],[10,31],[10,32],[1,\"p\",[[0,[],0,\"It's not even showing in the top CPU consuming processes. That's great.\"]]],[10,33],[1,\"p\",[[0,[],0,\"With this we complete our basic chat server. I know clients are still messy, but for that, we would need to dive deep into the interactivity part which is beyond the scope of this tutorial. Next up, we can add clients with identity information so that server can uniquely tag who sent which message, 1:1 messaging instead of group messaging and an interactive UI. I might write a follow-up article with all of these in future.\"]]],[1,\"p\",[[0,[],0,\"Nim is an amazing language. To be able to do so much, in so little and clean code is amazing. We haven't touched on code optimization yet, but I believe we can use some micro-optimizations to make this code even faster. It's been a great exercise for me to move away from Python and learn interesting languages like Nim. \"]]],[1,\"p\",[[0,[],0,\"Let me know about your feedback. If you feel there were any issues with the tutorial, or writing style, or any errors in text or code, or any difficulty in understanding, or if you just wanna give a compliment, leave your comments below.\"]]]]}","created_at_ts":1548364986653,"created_at":"2019-01-24 21:23:06"},{"id":"5c4b071ff7e7b7692d246eea","post_id":"5c3229bfd149624e397d2920","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **1** All socket related functions, classes, utilities are in the [`net`](https://nim-lang.org/docs/net.html) package. We could have also used [`nativesockets`](https://nim-lang.org/docs/nativesockets.html) package which is exclusively for sockets. But it handles sockets at very low-level which might just lengthen our code.\\n> **3** Initialize our server socket using [`newSocket`](https://nim-lang.org/docs/net.html#newSocket,Domain,SockType,Protocol). This function also accepts some parameters which we will discuss in-depth later. For now, we are okay leaving it to the default values.\\n> **4-5** Set the socket to listen to new connections on port `5555` and start accepting new connections from other sockets. If [`address` parameter](https://nim-lang.org/docs/net.html#bindAddr,Socket,string) is not mentioned by default, the socket will listen to requests from all IP addresses.\\n> **8** Close our socket server. It is very important to close socket connections if they are no longer required. This is considered a clean way to end TCP connections with proper end-of-connection acknowledgement.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Hint: used config file '/etc/nim.cfg' [Conf]\\n(out)Hint: system [Processing]\\n(out)Hint: server [Processing]\\n(out)Hint: net [Processing]\\n(out)Hint: nativesockets [Processing]\\n(out)Hint: os [Processing]\\n(out)Hint: strutils [Processing]\\n(out)Hint: parseutils [Processing]\\n(out)Hint: math [Processing]\\n(out)Hint: algorithm [Processing]\\n(out)Hint: times [Processing]\\n(out)Hint: posix [Processing]\\n(out)Hint: ospaths [Processing]\\n(out)Hint: options [Processing]\\n(out)Hint: typetraits [Processing]\\n(out)Hint: sets [Processing]\\n(out)Hint: hashes [Processing]\\n(out)CC: server\\n(out)CC: stdlib_system\\n(out)CC: stdlib_net\\n(out)Hint:  [Link]\\n(out)Hint: operation successful (26847 lines compiled; 0.903 sec total; 47.43MiB peakmem; Debug Build) [SuccessX]\\n(out)Hint: /home/tejas/Projects/simple-chat-server/server  [Exec]</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"8-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Similar to the server, we need a socket object. The only difference here is, unlike server, which listens to connections, a client knows the server address and connects to it using the [`connect`](https://nim-lang.org/docs/net.html#connect,Socket,string) method. Thus, a client needs to have the address and port of the server.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"6-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message)\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **7** Once the user sends a message, we'll prompt for another message, sort of how chat applications provide a text box to send a message.\\n> **8-10** Prompt the user for a chat message and using the client socket, [`send`](https://nim-lang.org/docs/net.html#send,Socket,string) it to the server. Also, we are using [`readLine`](https://nim-lang.org/docs/system.html#readLine,File) so that the messsage gets stored only when user presses <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-1\\\" data-language=\\\"server.nim\\\" data-line=\\\"11-18\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recv(10)\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **12** Server will keep listening to new messages from all connected clients.\\n> **13** Read a few characters from the socket.\\n> **15-16** When a socket disconnects, it sends an empty string before disconnection. This can be used as an indication for the server that the client has disconnected. Since we are dealing with only one client, we'll stop receiving additional messages and exit the loop.\\n> **18** Print the received message on the console.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, wor\\n(out)Server: received from client: ldLorem ip\\n(out)Server: received from client: sum dolor \\n(out)Server: received from client: sit amet, \\n(out)Server: received from client: consectetu\\n(out)Server: received from client: r adipisci</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"13\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"If the server and client are still running, kill the processes with <kbd>Ctrl</kbd>+<kbd>C</kbd>. Execute `server.nim` and `client.nim` again.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)server.nim(6)            server\\n(out)net.nim(738)             bindAddr\\n(out)oserr.nim(110)           raiseOSError\\n(out)Error: unhandled exception: Address already in use [OSError]\\n(out)Error: execution of an external program failed: '/home/tejas/Projects/simple-chat-server/server '</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"4\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, world\\n(out)Server: received from client: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola, mundo\\n(out)> What's 1 + 1? Answer is 10 in binary.\\n(out)> </code></pre>\"}],[\"markdown\",{\"markdown\":\"1. Have an infinte loop (`while true`) which will keep our server running.\\n2. Inside the loop, accept new client connections and add those into our client list.\\n3. For each client in the client list, check if there is any data.\\n4. If there is any data, print it out.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"6,10-11,14-37\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **6** Set the socket as non-blocking. We set it on the low-level native socket API.\\n> **11** We need to store our connected clients in a list so that we can iterate over them to get messages.\\n> **13-37** Check if there are any existing connections. If yes, add them to the connected socket list. Then for each connected socket, check whether there are any messages to be read.\\n> **17** Add the connected socket in our clients list.\\n> **19** In non-blocking mode, [`accept`](https://nim-lang.org/docs/net.html#accept,Socket,Socket) throws an `OSError` if there are no pending connections at that moment. We ignore that exception because it's understandable that we won't have any pending connections all the time.\\n> **22** We maintain a list of clients which disconnected so that we remove those from our client list.\\n> **24** Iterate over all the connected clients and receive messages from them one by one.\\n> **26** We set the `timeout` to `1` since [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) call still blocks the code as the default timeout value is `-1`, which means block indefinitely till message is received.\\n> **29** Mark the client for removal if it has disconnected.\\n> **32** If no message is received within the timeout period, [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) throws a `TimeoutError`. Since we are operating in a non-blocking mode now, we shall ignore this error.\\n> **35-37** Remove any client marked for removal from the clients list.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: Hola\\n(out)Server: received from client: Foo\\n(out)Server: received from client: Bar\\n(out)Server: received from client: \\n(out)Server: client disconnected\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> Foo\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola\\n(out)> Bar\\n(out)> ^CTraceback (most recent call last)\\n(out)client.nim(9)            client\\n(out)sysio.nim(185)           readLine\\n(out)sysio.nim(158)           readLine\\n(out)SIGINT: Interrupted by Ctrl-C.</code></pre>\"}],[\"markdown\",{\"markdown\":\"There's a major catch here. Since sending and receiving messages is a simultaneous process, we would need some kinda GUI to handle these tasks asynchronously. Just think of it, suppose you are a client chatting on our server, you wouldn't receive any messages until you input a message because the `stdin.readLine()` will block all the code until the user hits <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client_sending.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\\n<pre data-language=\\\"client_receiving.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  let receivedMessage: string = client.recvLine()\\n  stdout.writeLine(\\\"Message: \\\", receivedMessage)\\n\\nclient.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"30-36\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n        continue\\n\\n      for receivingClient in clients:\\n        if receivingClient == client:\\n          continue\\n\\n        receivingClient.send(message & \\\"\\\\r\\\\L\\\")\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: What are you doing?</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> What are you doing?\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: What are you doing?</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/server-cpu-usage-1.png\",\"cardWidth\":\"\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"3-4,7,14,18-22,25-27,30-51,55\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\nimport os\\nimport selectors\\n\\nvar server: Socket = newSocket()\\nvar select: Selector[int] = newSelector[int]()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nselect.registerHandle(server.getFd(), {Event.Read}, -1)\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  var results: seq[ReadyKey] = select.select(-1)\\n\\n  for result in results:\\n    if Event.Read in result.events:\\n      if result.fd.SocketHandle == server.getFd():\\n        var client: Socket = new(Socket)\\n        server.accept(client)\\n\\n        client.getFd().setBlocking(false)\\n        select.registerHandle(client.getFd(), {Event.Read}, -1)\\n        clients.add(client)\\n        stdout.writeLine(\\\"Server: client connected\\\")\\n      else:\\n        var sourceClient: Socket = newSocket(result.fd.SocketHandle)\\n        var message = sourceClient.recvLine()\\n\\n        if message == \\\"\\\":\\n          var clientsToRemove: seq[int] = @[]\\n\\n          for index, client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              clientsToRemove.add(index)\\n\\n          for index in clientsToRemove:\\n            var client: Socket = clients[index]\\n            select.unregister(result.fd)\\n            clients.del(index)\\n            stdout.writeLine(\\\"Server: client disconnected\\\")\\n        else:\\n          stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\n          for client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              continue\\n\\n            client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nselect.close()\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Import the packages required for `select` functions. Note that we also imported `os` package. This is because, in Nim v0.18 and lower, `OSErrorCode` is not explicity imported in the `select` library. This is fixed in later versions.\\n> **7** We define our selector. It requires a type too. This would be the type of the data that we will associate in `registerHandle` method.\\n> **14** Register our server for read events. Note that read events on server socket would be incoming socket connections. Since we don't have any data associated with our server, we'll pass data as `-1`.\\n> **18** `select` returns a list of events along with their file descriptors for which the specified event was triggered.\\n> **21** We are only interested in read events.\\n> **22** The result received from `select` method contains the list of `events` that were captured and the file descriptor `fd` for which the event was triggered. Though our `fd` is enough, we compare the underlying socket for that file descriptor. If the one that triggered a read event was our server, it must mean that we recevied an incoming connection from a client.\\n> **26** Since clients are also handled by `select` we'll set them as non-blocking.\\n> **27** Just like our server, listen to read events of our client. Read event on a connected socket indicates that a new message has been arrived waiting to be read.\\n> **30** If the read event was not triggered by server, then it must be client. This means we received a message from a client which we have to broadcast to other clients.\\n> **31** Working with higher-level socket abstractions is easier. So, we convert our low-level socket from file descriptor in the result into a higher-level socket.\\n> **34-45** If a client is disconnected, remove it from clients list and [`unregister`](https://nim-lang.org/docs/selectors.html#unregister,Selector[T],) events for that client.\\n> **50** We could have compared the two objects directly. But since the newly created `sourceClient` object as a copy, it's identity would be different. This would cause an inequality even though the underlying sockets are same.\\n> **55** Like sockets, even select should be closed to signal the kernel that we are no longer listening to any events. This is a good practice to cleanly close everything before shutting down our program.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: select seems to be doing great</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> select seems to be doing great\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: select seems to be doing great</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/low-cpu-server.png\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://nim-lang.org\"]],[\"a\",[\"href\",\"https://nim-lang.org/install.html\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/Editor-Support\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/\"]],[\"a\",[\"href\",\"https://www.techopedia.com/definition/7154/full-duplex-fdx\"]],[\"a\",[\"href\",\"https://realtimeapi.io/hub/http-long-polling/\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/BOSH_(protocol)\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/Comet_(programming)\"]],[\"a\",[\"href\",\"https://www.tutorialspoint.com/unix_sockets/what_is_socket.htm\"]],[\"a\",[\"href\",\"https://www.html5rocks.com/en/tutorials/websockets/basics/\"]],[\"a\",[\"href\",\"https://caniuse.com/#feat=websockets\"]],[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"#server-snippet-1.13\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recv,Socket,int\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recvLine,Socket\"]],[\"a\",[\"href\",\"#server-snippet-2.9-11\"]],[\"a\",[\"href\",\"#server-snippet-2.10\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/nativesockets.html#setBlocking,SocketHandle,bool\"]],[\"a\",[\"href\",\"https://www.linuxjournal.com/content/getting-started-ncurses\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man2/select.2.html\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#registerHandle,Selector[T],,set[Event],T\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#select,Selector[T],int\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Build a simple chat server using nothing except sockets in Nim which pushes messages sent by any client to all other connected clients.\"]]],[1,\"p\",[[0,[],0,\"Since I'm at home now, on a break, not really doing anything, I decided to learn this new programming language called \"],[0,[0],1,\"Nim\"],[0,[],0,\" which is a perfect fusion between the elegance of Python and performance of C. What's better way to start with a language than actually creating something meaningful? So, I decided to not only create a simple chat server, but also write a step-by-step tutorial about it.\"]]],[1,\"h1\",[[0,[],0,\"Prerequisites\"]]],[3,\"ul\",[[[0,[],0,\"Install Nim compiler. You can get the download links or installation commands from their \"],[0,[1],1,\"installation\"],[0,[],0,\" page. The compiler version in this tutorial is 0.18.0, though newer versions should not have any issue.\"]],[[0,[],0,\"Get Nim plugins for your editor. Again you can refer to the \"],[0,[2],1,\"editor plugins page\"],[0,[],0,\" on their \"],[0,[3],1,\"GitHub\"],[0,[],0,\" \"],[0,[4],1,\"wiki\"],[0,[],0,\".\"]]]],[1,\"h1\",[[0,[],0,\"Problem statement\"]]],[1,\"blockquote\",[[0,[],0,\"Our chat server will be a single room (channel) chat where anyone can talk with everyone. When a user types in a message, it is sent to all other users connected to the chat server.\"]]],[1,\"p\",[[0,[],0,\"In any chat application, the core responsibility of a server is just to act as a relay and send messages from one client to the other. The server should be sufficiently fast enough to accept newer clients who join, read messages from the clients, broadcast those messages to all other clients, without showing any noticeable delay for any of the clients. This would truly make it an instant messaging platform.\"]]],[1,\"h1\",[[0,[],0,\"I. Plan\"]]],[1,\"p\",[[0,[],0,\"We need a \"],[0,[5],1,\"full duplex\"],[0,[],0,\" link between the server and the client so that messages can be sent and received at the same time. Of all the various methods like \"],[0,[6],1,\"long-polling\"],[0,[],0,\", \"],[0,[7],1,\"BOSH\"],[0,[],0,\", \"],[0,[8],1,\"comet\"],[0,[],0,\", my recommendation is to use \"],[0,[9],1,\"sockets\"],[0,[],0,\" (\"],[0,[10],1,\"web sockets\"],[0,[],0,\" for \"],[0,[11],1,\"browsers\"],[0,[],0,\"). They are truly bi-directional, light-weight and efficient for such use cases.\"]]],[3,\"ol\",[[[0,[],0,\"Our server would act as a socket server. \"]],[[0,[],0,\"It would bind to a specific port and IP address and listen for new socket connections.\"]],[[0,[],0,\"For every socket connected, it would add it to it's active socket connections list.\"]],[[0,[],0,\"When any connected socket sends a message to the server, the server will send it to all the sockets in the active socket connections list (except the one who sent it).\"]],[[0,[],0,\"If a connected socket closes connection, the server will remove it from the active list.\"]]]],[1,\"h1\",[[0,[],0,\"II. Getting started\"]]],[1,\"p\",[[0,[],0,\"Create a directory in your projects folder (or wherever you want) called \"],[0,[12],1,\"simple-chat-server\"],[0,[],0,\". You might want to open this directory in your code editor. \"],[0,[13],1,\"All path references here on will be relative to this directory.\"]]],[1,\"p\",[[0,[],0,\"Create a file called \"],[0,[12],1,\"server.nim\"],[0,[],0,\". This would be our core server file. To compile and run the code in this file, we will use \"],[0,[12],1,\"nim compile --run server.nim\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"We'll create a simple socket which will listen to new socket connections on port \"],[0,[12],1,\"5555\"],[0,[],0,\" and then close it.\"]]],[10,0],[10,1],[1,\"p\",[[0,[],0,\"To run the above code, we need to compile it first and then execute the binary. Fortunately, the Nim compiler can do both in a single command by specifying the \"],[0,[12],1,\"--run\"],[0,[],0,\" or \"],[0,[12],1,\"-r\"],[0,[],0,\" argument.\"]]],[1,\"p\",[[0,[],0,\"The compiler pulls all the required packages along with \"],[0,[12],1,\"server.nim\"],[0,[],0,\", transpiles them into C, links the libraries and creates an executable binary file with the same name as our file sans the file extension (in our case it becomes \"],[0,[12],1,\"server\"],[0,[],0,\") in the root of the project directory.\"]]],[10,2],[1,\"p\",[[0,[],0,\"The code ran but it didn't produce any output, except for compiler messages (we will be omitting compiler messages hereon). The server created the socket, listened for incoming connections and closed the socket connection.\"]]],[1,\"p\",[[0,[],0,\"Now we'll make the server wait until it receives new connections.\"]]],[10,3],[10,4],[1,\"p\",[[0,[],0,\"Our server is now actively listening for connections from clients. But… it's kinda stuck there because the server is waiting for a client to connect. We'll have to create one now. \"]]],[1,\"p\",[[0,[],0,\"Create a new file called \"],[0,[12],1,\"client.nim\"],[0,[],0,\". We'll use socket as a client and connect to the server.\"]]],[10,5],[10,6],[1,\"p\",[[0,[],0,\"Execute \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and at the same time, in a new terminal window/tab, execute \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,7],[1,\"p\",[[0,[],0,\"The server started and waited for connections. The moment we started the client, it connected to our socket server on the specified address. Server received this connection and assigned the client to the \"],[0,[12],1,\"client\"],[0,[],0,\" variable, and closed the socket.\"]]],[1,\"p\",[[0,[],0,\"This was a barebones socket server and client. We have to add the real magic - sending and receiving messages.\"]]],[1,\"h1\",[[0,[],0,\"III. Sending and receiving messages\"]]],[1,\"p\",[[0,[],0,\"A socket on an OS is a file descriptor (layman: just a file). When we say that a socket received some data, it actually signifies that some data was written on that file descriptor.\"]]],[1,\"p\",[[0,[],0,\"We have built a server which accepts socket connection and a client which connects to the server. Now, we'll dive into the actual communication between client and server.\"]]],[1,\"p\",[[0,[],0,\"On the client side, we'll prompt user to enter the message to be sent and then send this message over to the server.\"]]],[10,8],[10,9],[1,\"p\",[[0,[],0,\"On the server side, we need to listen to new messages from client. We'll also print the messages received from the client on the console.\"]]],[10,10],[10,11],[1,\"p\",[[0,[],0,\"Let's execute both \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" in two different terminal tabs/windows. Note that I have used \"],[0,[12],1,\"nim c -r\"],[0,[],0,\" which is a shorthand for \"],[0,[12],1,\"nim compile --run\"],[0,[],0,\".\"]]],[10,12],[1,\"p\",[[0,[],0,\"Something's gone horribly wrong here. Not only our client messages are truncated, but they are also mingled with other messages. We sent \"],[0,[14],1,\"Hello, world\"],[0,[],0,\" and \"],[0,[14],1,\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"],[0,[],0,\" as two different messages, but on the server side we're getting them in sort of mingled fashion. Also, our second message is incomplete.\"]]],[1,\"p\",[[0,[],0,\"The culprit here is line \"],[0,[15],1,\"13\"],[0,[],0,\". We specified that we'll only accept 10 characters from the socket. Also, until socket does not have at least 10 characters in its buffer, the \"],[0,[12,16],2,\"recv\"],[0,[],0,\" function will keep blocking indefinitely. The socket will keep reading messages until it has reached that count in its buffer and only then it will return the data. We can do the following,\"]]],[3,\"ol\",[[[0,[],0,\"We'll use some delimiting character. We'll read a very small amount of data from the socket and scan all characters in it and store it in our own buffer. If we encounter the delimiting character while scanning, we'll stop there, dump whatever we read so far in the buffer and return the buffer data.\"]],[[0,[],0,\"We can also use the \"],[0,[12],1,\"timeout\"],[0,[],0,\" parameter in the \"],[0,[12,16],2,\"recv\"],[0,[],0,\". By default, the timeout value is \"],[0,[12],1,\"-1\"],[0,[],0,\", which means we will wait indefinitely until there is enough data in the socket. We can set it to a small amount so that we don't wait indefinitely for new messages.\"]]]],[1,\"p\",[[0,[],0,\"A much better solution here would be to use the \"],[0,[12,17],2,\"recvLine\"],[0,[],0,\" method. It handles the complexity of handling the delimited character for us. It uses \"],[0,[12],1,\"\\\\r\\\\L\"],[0,[],0,\" as the delimiter. This means, on the client side, for each message we send, we would also need to append this delimiter. Let's make the changes accordingly.\"]]],[10,13],[10,14],[10,15],[10,16],[1,\"p\",[[0,[],0,\"If you're getting the above error, it's an indication that the port on which our server listens is being reserved for some reason. It happens when some process which is listening on that port is still running. Though in our case, even though we stopped the server, it's still giving us this error. The reason here is something called as \"],[0,[14],1,\"Linger Time\"],[0,[],0,\". When a socket is closed (especially TCP socket), some data which is marked to be sent, still exists in the socket's send buffer. Unless the buffer is emptied or a timeout period (usually 30 seconds) is passed, the system reserves the port.\"]]],[1,\"p\",[[0,[],0,\"To fix this, we use the \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of sockets. If a socket is created with this option enabled, instead of throwing an error, it checks whether a socket which is listening on the same port is in lingering state. If it is, the socket will use the same address with an assumption that the earlier socket will release the port soon. In Nim, we have the \"],[0,[12],1,\"OptReuseAddr\"],[0,[],0,\" option which can be set as \"],[0,[12],1,\"true\"],[0,[],0,\" to enable \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of the socket.\"]]],[10,17],[1,\"p\",[[0,[],0,\"Let's run the server and clients again.\"]]],[10,18],[1,\"p\",[[0,[],0,\"As you can see now, the messages are no longer truncated and they are received in the same manner as sent by the client.\"]]],[1,\"p\",[[0,[],0,\"Now that we have spawned our basic server which accepts messages from a client, let's spawn another client and see what happens. Don't kill the currently running \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" and instead run \"],[0,[12],1,\"client.nim\"],[0,[],0,\" again in a new tab/terminal and send a few messages.\"]]],[10,19],[1,\"p\",[[0,[],0,\"If you check the tab/terminal running our server, you wouldn't find these messages at all. The server did not receive any message at all from our new client. Can you identify the problem?\"]]],[1,\"p\",[[0,[],0,\"Notice the lines \"],[0,[18],1,\"9-11\"],[0,[],0,\", where we wait and accept connection from a client. The moment a client connects, we never again accept and listen to data from new clients. As soon as we get a client, we just listen to new data from that client. What we can do is, as we listen to new data from one client, we'll also accept new connections from other clients. Our flow would go like this, \"]]],[10,20],[1,\"p\",[[0,[],0,\"However, there is a slight problem in step 2. In our server socket, as seen here, the server will block the program flow while it is listening for new clients since \"],[0,[12,19],2,\"server.accept()\"],[0,[],0,\" is a blocking function. Thus our messages will only be read once a client connects to the server. This is not even an acceptable case for our chat server.\"]]],[1,\"p\",[[0,[],0,\"Fortunately, sockets have an option to run in non-blocking mode. This means, our \"],[0,[12],1,\"accept()\"],[0,[],0,\" and \"],[0,[12],1,\"recv()\"],[0,[],0,\" functions will no longer block the code. If they have anything meaningful to return (like an incoming socket connection or a message), they will return that and continue execution. Otherwise, they will throw an error. Which means, we have to keep checking for new connections or messages and also handle the error in case we don't get any. \"]]],[1,\"p\",[[0,[],0,\"In Nim, we enable non-blocking mode using the \"],[0,[12,20],2,\"setBlocking()\"],[0,[],0,\" function of the underlying native socket. We'll also store all our connected sockets in a list so that we can iterate over them and receive messages from each of them. We'll do both, accept new connections and receive data from sockets in a single infinite loop, so that we keep accepting new connections while we receive messages from existing ones. Let's give this a try.\"]]],[10,21],[10,22],[1,\"p\",[[0,[],0,\"Let's execute our server now with multiple clients.\"]]],[10,23],[1,\"p\",[[0,[],0,\"Yay! We have it now. Our server accepts and receives messages from multiple clients. We have also managed client disconnections. What our server should do now is send messages from one client to other clients, which a chat server should do. Let's do it.\"]]],[10,24],[1,\"p\",[[0,[],0,\"We can build a small GUI or use \"],[0,[21],1,\"ncurses\"],[0,[],0,\" to do that interactively in terminal. Since both of these are outside the scope of this tutorial, we'll make a hack for now. We'll create two different types of clients - one for sending messages and one for receiving. We call them \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" respectively. \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" is exactly same as our \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,25],[1,\"p\",[[0,[],0,\"We would need some minor changes in our \"],[0,[12],1,\"server.nim\"],[0,[],0,\". Once the server receives a message, it will send it to all connected clients, except the one who sent the message.\"]]],[10,26],[1,\"p\",[[0,[],0,\"Open three terminals - one for \"],[0,[12],1,\"server.nim\"],[0,[],0,\", one for \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and one for \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" - and execute the respective files. Try sending some messages from sending client and see if you get those in the receiving client.\"]]],[10,27],[1,\"p\",[[0,[],0,\"You can open multiple terminals with \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and send messages to one another. You would observer that all receiving clients receive messages from all sending clients. This is because our server is current broadcasting all messages to everyone. We can limit this behavior, but we can skip that for now.\"]]],[1,\"p\",[[0,[],0,\"With this, you have completed a simple chat server with somewhat hacky clients (we'll fix that later). However, if you're working on a laptop, you would have noticed the noise of your CPU fan every time you run the server. If you're curious enough, check the output of \"],[0,[12],1,\"top\"],[0,[],0,\" command and you'll notice that the server process is taking up some chunk of CPU.\"]]],[10,28],[1,\"p\",[[0,[],0,\"It seems our code needs some fixing. Indeed it does. The way we are handling new connections and incoming messages on our server is very inefficient. We are persistently asking the socket for new connection and a new message, that too in an infinite loop. If socket was an actual person, it would mean as if we are pestering him every now and then for new information.\"]]],[1,\"p\",[[0,[],0,\"We have a solution for this. We'll make use of something that is core of lot of chat servers and surprisingly available on all platforms - \"],[0,[12,22],2,\"select\"],[0,[],0,\".\"]]],[1,\"h1\",[[0,[],0,\"IV. Using \"],[0,[12],1,\"select\"],[0,[],0,\" for optimization\"]]],[1,\"p\",[[0,[],0,\"Of all the amazing things that happened in Unix world, one was \"],[0,[12],1,\"select\"],[0,[],0,\". Originally appeared in BSD, \"],[0,[12],1,\"select\"],[0,[],0,\" was quickly adopted in other popular OS. It's a kernel level utility which tells us which file descriptors are ready to be read, written or have an error condition. It does this using low-level file monitoring and interrupts, instead of iterating through all files and repeatedly checking if they have changed. This is cleaner, efficient and puts minimal load on our CPU.\"]]],[1,\"h3\",[[0,[],0,\"How to use \"],[0,[12],1,\"select\"],[0,[],0,\" with our chat server?\"]]],[1,\"p\",[[0,[],0,\"Since all connected clients are nothing but file descriptors, we'll tell \"],[0,[12],1,\"select\"],[0,[],0,\" to monitor these given file descriptors and notify us when there's any data on them that is yet to be read. Once \"],[0,[12],1,\"select\"],[0,[],0,\" notifies us, it will give us a list of file descriptors which contain unread data. We'll iterate over these and see what data they have. Remember, when a socket receives data, it essentially means that it has data to be read.\"]]],[1,\"p\",[[0,[12],1,\"select\"],[0,[],0,\" in Nim is a part of  \"],[0,[12],1,\"selectors\"],[0,[],0,\" package. It has two important methods of our concern - \"],[0,[12,23],2,\"registerHandle\"],[0,[],0,\" and \"],[0,[12,24],2,\"select\"],[0,[],0,\". \"],[0,[12],1,\"registerHandle\"],[0,[],0,\" takes in a file descriptor, the events we want to listen to (read, write, error) and optional data that we wish to receive when the event is triggered. \"],[0,[12],1,\"select\"],[0,[],0,\" takes in the timeout period until which it will wait for events on the registered handles (file descriptors). If we want \"],[0,[12],1,\"select\"],[0,[],0,\" to block our code, we can set timeout as \"],[0,[12],1,\"-1\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Let's dive into the code.\"]]],[10,29],[10,30],[1,\"p\",[[0,[],0,\"Let's run the program now and see our CPU usage.\"]]],[10,31],[10,32],[1,\"p\",[[0,[],0,\"It's not even showing in the top CPU consuming processes. That's great.\"]]],[10,33],[1,\"p\",[[0,[],0,\"With this we complete our basic chat server. I know clients are still messy, but for that, we would need to dive deep into the interactivity part which is beyond the scope of this tutorial. Next up, we can add clients with identity information so that server can uniquely tag who sent which message, 1:1 messaging instead of group messaging and an interactive UI. I might write a follow-up article with all of these in future.\"]]],[1,\"p\",[[0,[],0,\"Nim is an amazing language. To be able to do so much, in so little and clean code is amazing. We haven't touched on code optimization yet, but I believe we can use some micro-optimizations to make this code even faster. It's been a great exercise for me to move away from Python and learn interesting languages like Nim. \"]]],[1,\"p\",[[0,[],0,\"Let me know about your feedback. If you feel there were any issues with the tutorial, or writing style, or any errors in text or code, or any difficulty in understanding, or if you just wanna give a compliment, leave your comments below.\"]]]]}","created_at_ts":1548420895655,"created_at":"2019-01-25 12:54:55"},{"id":"5c4b09bbf7e7b7692d246eeb","post_id":"5c3229bfd149624e397d2920","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **1** All socket related functions, classes, utilities are in the [`net`](https://nim-lang.org/docs/net.html) package. We could have also used [`nativesockets`](https://nim-lang.org/docs/nativesockets.html) package which is exclusively for sockets. But it handles sockets at very low-level which might just lengthen our code.\\n> **3** Initialize our server socket using [`newSocket`](https://nim-lang.org/docs/net.html#newSocket,Domain,SockType,Protocol). This function also accepts some parameters which we will discuss in-depth later. For now, we are okay leaving it to the default values.\\n> **4-5** Set the socket to listen to new connections on port `5555` and start accepting new connections from other sockets. If [`address` parameter](https://nim-lang.org/docs/net.html#bindAddr,Socket,string) is not mentioned by default, the socket will listen to requests from all IP addresses.\\n> **8** Close our socket server. It is very important to close socket connections if they are no longer required. This is considered a clean way to end TCP connections with proper end-of-connection acknowledgement.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Hint: used config file '/etc/nim.cfg' [Conf]\\n(out)Hint: system [Processing]\\n(out)Hint: server [Processing]\\n(out)Hint: net [Processing]\\n(out)Hint: nativesockets [Processing]\\n(out)Hint: os [Processing]\\n(out)Hint: strutils [Processing]\\n(out)Hint: parseutils [Processing]\\n(out)Hint: math [Processing]\\n(out)Hint: algorithm [Processing]\\n(out)Hint: times [Processing]\\n(out)Hint: posix [Processing]\\n(out)Hint: ospaths [Processing]\\n(out)Hint: options [Processing]\\n(out)Hint: typetraits [Processing]\\n(out)Hint: sets [Processing]\\n(out)Hint: hashes [Processing]\\n(out)CC: server\\n(out)CC: stdlib_system\\n(out)CC: stdlib_net\\n(out)Hint:  [Link]\\n(out)Hint: operation successful (26847 lines compiled; 0.903 sec total; 47.43MiB peakmem; Debug Build) [SuccessX]\\n(out)Hint: /home/tejas/Projects/simple-chat-server/server  [Exec]</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"8-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Similar to the server, we need a socket object. The only difference here is, unlike server, which listens to connections, a client knows the server address and connects to it using the [`connect`](https://nim-lang.org/docs/net.html#connect,Socket,string) method. Thus, a client needs to have the address and port of the server.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim compile --run client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"6-10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message)\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **7** Once the user sends a message, we'll prompt for another message, sort of how chat applications provide a text box to send a message.\\n> **8-10** Prompt the user for a chat message and using the client socket, [`send`](https://nim-lang.org/docs/net.html#send,Socket,string) it to the server. Also, we are using [`readLine`](https://nim-lang.org/docs/system.html#readLine,File) so that the messsage gets stored only when user presses <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-1\\\" data-language=\\\"server.nim\\\" data-line=\\\"11-18\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recv(10)\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **12** Server will keep listening to new messages from all connected clients.\\n> **13** Read a few characters from the socket.\\n> **15-16** When a socket disconnects, it sends an empty string before disconnection. This can be used as an indication for the server that the client has disconnected. Since we are dealing with only one client, we'll stop receiving additional messages and exit the loop.\\n> **18** Print the received message on the console.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, wor\\n(out)Server: received from client: ldLorem ip\\n(out)Server: received from client: sum dolor \\n(out)Server: received from client: sit amet, \\n(out)Server: received from client: consectetu\\n(out)Server: received from client: r adipisci</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"server.nim\\\" data-line=\\\"13\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client.nim\\\" data-line=\\\"10\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"If the server and client are still running, kill the processes with <kbd>Ctrl</kbd>+<kbd>C</kbd>. Execute `server.nim` and `client.nim` again.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)server.nim(6)            server\\n(out)net.nim(738)             bindAddr\\n(out)oserr.nim(110)           raiseOSError\\n(out)Error: unhandled exception: Address already in use [OSError]\\n(out)Error: execution of an external program failed: '/home/tejas/Projects/simple-chat-server/server '</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"4\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar client: Socket = new(Socket)\\nserver.accept(client)\\nstdout.writeLine(\\\"Server: client connected\\\")\\n\\nwhile true:\\n  let message: string = client.recvLine()\\n\\n  if message == \\\"\\\":\\n    break\\n\\n  stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\nserver.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: received from client: Hello, world\\n(out)Server: received from client: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello, world\\n(out)> Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n(out)> </code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola, mundo\\n(out)> What's 1 + 1? Answer is 10 in binary.\\n(out)> </code></pre>\"}],[\"markdown\",{\"markdown\":\"1. Have an infinte loop (`while true`) which will keep our server running.\\n2. Inside the loop, accept new client connections and add those into our client list.\\n3. For each client in the client list, check if there is any data.\\n4. If there is any data, print it out.\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"6,10-11,14-37\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **6** Set the socket as non-blocking. We set it on the low-level native socket API.\\n> **11** We need to store our connected clients in a list so that we can iterate over them to get messages.\\n> **13-37** Check if there are any existing connections. If yes, add them to the connected socket list. Then for each connected socket, check whether there are any messages to be read.\\n> **17** Add the connected socket in our clients list.\\n> **19** In non-blocking mode, [`accept`](https://nim-lang.org/docs/net.html#accept,Socket,Socket) throws an `OSError` if there are no pending connections at that moment. We ignore that exception because it's understandable that we won't have any pending connections all the time.\\n> **22** We maintain a list of clients which disconnected so that we remove those from our client list.\\n> **24** Iterate over all the connected clients and receive messages from them one by one.\\n> **26** We set the `timeout` to `1` since [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) call still blocks the code as the default timeout value is `-1`, which means block indefinitely till message is received.\\n> **29** Mark the client for removal if it has disconnected.\\n> **32** If no message is received within the timeout period, [`recvLine`](https://nim-lang.org/docs/net.html#recvLine,Socket) throws a `TimeoutError`. Since we are operating in a non-blocking mode now, we shall ignore this error.\\n> **35-37** Remove any client marked for removal from the clients list.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim \\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: Hola\\n(out)Server: received from client: Foo\\n(out)Server: received from client: Bar\\n(out)Server: received from client: \\n(out)Server: client disconnected\\n(out) </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> Foo\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client.nim \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hola\\n(out)> Bar\\n(out)> ^CTraceback (most recent call last)\\n(out)client.nim(9)            client\\n(out)sysio.nim(185)           readLine\\n(out)sysio.nim(158)           readLine\\n(out)SIGINT: Interrupted by Ctrl-C.</code></pre>\"}],[\"markdown\",{\"markdown\":\"There's a major catch here. Since sending and receiving messages is a simultaneous process, we would need some kinda GUI to handle these tasks asynchronously. Just think of it, suppose you are a client chatting on our server, you wouldn't receive any messages until you input a message because the `stdin.readLine()` will block all the code until the user hits <kbd>Enter</kbd>.\"}],[\"html\",{\"html\":\"<pre data-language=\\\"client_sending.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  stdout.write(\\\"> \\\")\\n  let message: string = stdin.readLine()\\n  client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nclient.close()</code></pre>\\n<pre data-language=\\\"client_receiving.nim\\\"><code class=\\\"language-nim line-numbers\\\">import net\\n\\nlet client: Socket = newSocket()\\nclient.connect(\\\"127.0.0.1\\\", Port(5555))\\nstdout.writeLine(\\\"Client: connected to server on address 127.0.0.1:5555\\\")\\n\\nwhile true:\\n  let receivedMessage: string = client.recvLine()\\n  stdout.writeLine(\\\"Message: \\\", receivedMessage)\\n\\nclient.close()</code></pre>\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"30-36\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\n\\nvar server: Socket = newSocket()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  try:\\n    var client: Socket = new(Socket)\\n    server.accept(client)\\n    clients.add(client)\\n    stdout.writeLine(\\\"Server: client connected\\\")\\n  except OSError:\\n    discard\\n\\n  var clientsToRemove: seq[int] = @[]\\n\\n  for index, client in clients:\\n    try:\\n      let message: string = client.recvLine(timeout = 1)\\n\\n      if message == \\\"\\\":\\n        clientsToRemove.add(index)\\n        continue\\n\\n      for receivingClient in clients:\\n        if receivingClient == client:\\n          continue\\n\\n        receivingClient.send(message & \\\"\\\\r\\\\L\\\")\\n\\n      stdout.writeLine(\\\"Server: received from client: \\\", message)\\n    except TimeoutError:\\n        discard\\n\\n  for index in clientsToRemove:\\n    clients.del(index)\\n    stdout.writeLine(\\\"Server: client disconnected\\\")\\n\\nserver.close()\\n</code></pre>\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: What are you doing?</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> What are you doing?\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: What are you doing?</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/server-cpu-usage-2.png\",\"cardWidth\":\"\"}],[\"html\",{\"html\":\"<pre id=\\\"server-snippet-2\\\" data-language=\\\"server.nim\\\" data-line=\\\"3-4,7,14,18-22,25-27,30-51,55\\\"><code class=\\\"language-nim line-numbers\\\">import net\\nimport nativesockets\\nimport os\\nimport selectors\\n\\nvar server: Socket = newSocket()\\nvar select: Selector[int] = newSelector[int]()\\nserver.setSockOpt(OptReuseAddr, true)\\nserver.getFd().setBlocking(false)\\nserver.bindAddr(Port(5555))\\nserver.listen()\\nstdout.writeLine(\\\"Server: started. Listening to new connections on port 5555...\\\")\\n\\nselect.registerHandle(server.getFd(), {Event.Read}, -1)\\nvar clients: seq[Socket] = @[]\\n\\nwhile true:\\n  var results: seq[ReadyKey] = select.select(-1)\\n\\n  for result in results:\\n    if Event.Read in result.events:\\n      if result.fd.SocketHandle == server.getFd():\\n        var client: Socket = new(Socket)\\n        server.accept(client)\\n\\n        client.getFd().setBlocking(false)\\n        select.registerHandle(client.getFd(), {Event.Read}, -1)\\n        clients.add(client)\\n        stdout.writeLine(\\\"Server: client connected\\\")\\n      else:\\n        var sourceClient: Socket = newSocket(result.fd.SocketHandle)\\n        var message = sourceClient.recvLine()\\n\\n        if message == \\\"\\\":\\n          var clientsToRemove: seq[int] = @[]\\n\\n          for index, client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              clientsToRemove.add(index)\\n\\n          for index in clientsToRemove:\\n            var client: Socket = clients[index]\\n            select.unregister(result.fd)\\n            clients.del(index)\\n            stdout.writeLine(\\\"Server: client disconnected\\\")\\n        else:\\n          stdout.writeLine(\\\"Server: received from client: \\\", message)\\n\\n          for client in clients:\\n            if client.getFd() == sourceClient.getFd():\\n              continue\\n\\n            client.send(message & \\\"\\\\r\\\\L\\\")\\n\\nselect.close()\\nserver.close()</code></pre>\"}],[\"markdown\",{\"markdown\":\"###### Explanation\\n> **3-4** Import the packages required for `select` functions. Note that we also imported `os` package. This is because, in Nim v0.18 and lower, `OSErrorCode` is not explicity imported in the `select` library. This is fixed in later versions.\\n> **7** We define our selector. It requires a type too. This would be the type of the data that we will associate in `registerHandle` method.\\n> **14** Register our server for read events. Note that read events on server socket would be incoming socket connections. Since we don't have any data associated with our server, we'll pass data as `-1`.\\n> **18** `select` returns a list of events along with their file descriptors for which the specified event was triggered.\\n> **21** We are only interested in read events.\\n> **22** The result received from `select` method contains the list of `events` that were captured and the file descriptor `fd` for which the event was triggered. Though our `fd` is enough, we compare the underlying socket for that file descriptor. If the one that triggered a read event was our server, it must mean that we recevied an incoming connection from a client.\\n> **26** Since clients are also handled by `select` we'll set them as non-blocking.\\n> **27** Just like our server, listen to read events of our client. Read event on a connected socket indicates that a new message has been arrived waiting to be read.\\n> **30** If the read event was not triggered by server, then it must be client. This means we received a message from a client which we have to broadcast to other clients.\\n> **31** Working with higher-level socket abstractions is easier. So, we convert our low-level socket from file descriptor in the result into a higher-level socket.\\n> **34-45** If a client is disconnected, remove it from clients list and [`unregister`](https://nim-lang.org/docs/selectors.html#unregister,Selector[T],) events for that client.\\n> **50** We could have compared the two objects directly. But since the newly created `sourceClient` object as a copy, it's identity would be different. This would cause an inequality even though the underlying sockets are same.\\n> **55** Like sockets, even select should be closed to signal the kernel that we are no longer listening to any events. This is a good practice to cleanly close everything before shutting down our program.\"}],[\"html\",{\"html\":\"<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r server.nim\\n(out)Server: started. Listening to new connections on port 5555...\\n(out)Server: client connected\\n(out)Server: client connected\\n(out)Server: received from client: Hello\\n(out)Server: received from client: How are you?\\n(out)Server: received from client: select seems to be doing great</code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_sending.nim  \\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)> Hello\\n(out)> How are you?\\n(out)> select seems to be doing great\\n(out)> </code></pre>\\n<pre class=\\\"command-line\\\" data-user=\\\"tejas\\\" data-filter-output=\\\"(out)\\\"><code class=\\\"language-bash\\\">nim c -r client_receiving.nim\\n(out)Client: connected to server on address 127.0.0.1:5555\\n(out)Message: Hello\\n(out)Message: How are you?\\n(out)Message: select seems to be doing great</code></pre>\"}],[\"image\",{\"src\":\"/content/images/2019/01/low-cpu-server.png\"}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://nim-lang.org\"]],[\"a\",[\"href\",\"https://nim-lang.org/install.html\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/Editor-Support\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/\"]],[\"a\",[\"href\",\"https://github.com/nim-lang/Nim/wiki/\"]],[\"a\",[\"href\",\"https://www.techopedia.com/definition/7154/full-duplex-fdx\"]],[\"a\",[\"href\",\"https://realtimeapi.io/hub/http-long-polling/\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/BOSH_(protocol)\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/Comet_(programming)\"]],[\"a\",[\"href\",\"https://www.tutorialspoint.com/unix_sockets/what_is_socket.htm\"]],[\"a\",[\"href\",\"https://www.html5rocks.com/en/tutorials/websockets/basics/\"]],[\"a\",[\"href\",\"https://caniuse.com/#feat=websockets\"]],[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"#server-snippet-1.13\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recv,Socket,int\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/net.html#recvLine,Socket\"]],[\"a\",[\"href\",\"#server-snippet-2.9-11\"]],[\"a\",[\"href\",\"#server-snippet-2.10\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/nativesockets.html#setBlocking,SocketHandle,bool\"]],[\"a\",[\"href\",\"https://www.linuxjournal.com/content/getting-started-ncurses\"]],[\"a\",[\"href\",\"http://man7.org/linux/man-pages/man2/select.2.html\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#registerHandle,Selector[T],,set[Event],T\"]],[\"a\",[\"href\",\"https://nim-lang.org/docs/selectors.html#select,Selector[T],int\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Build a simple chat server using nothing except sockets in Nim which pushes messages sent by any client to all other connected clients.\"]]],[1,\"p\",[[0,[],0,\"Since I'm at home now, on a break, not really doing anything, I decided to learn this new programming language called \"],[0,[0],1,\"Nim\"],[0,[],0,\" which is a perfect fusion between the elegance of Python and performance of C. What's better way to start with a language than actually creating something meaningful? So, I decided to not only create a simple chat server, but also write a step-by-step tutorial about it.\"]]],[1,\"h1\",[[0,[],0,\"Prerequisites\"]]],[3,\"ul\",[[[0,[],0,\"Install Nim compiler. You can get the download links or installation commands from their \"],[0,[1],1,\"installation\"],[0,[],0,\" page. The compiler version in this tutorial is 0.18.0, though newer versions should not have any issue.\"]],[[0,[],0,\"Get Nim plugins for your editor. Again you can refer to the \"],[0,[2],1,\"editor plugins page\"],[0,[],0,\" on their \"],[0,[3],1,\"GitHub\"],[0,[],0,\" \"],[0,[4],1,\"wiki\"],[0,[],0,\".\"]]]],[1,\"h1\",[[0,[],0,\"Problem statement\"]]],[1,\"blockquote\",[[0,[],0,\"Our chat server will be a single room (channel) chat where anyone can talk with everyone. When a user types in a message, it is sent to all other users connected to the chat server.\"]]],[1,\"p\",[[0,[],0,\"In any chat application, the core responsibility of a server is just to act as a relay and send messages from one client to the other. The server should be sufficiently fast enough to accept newer clients who join, read messages from the clients, broadcast those messages to all other clients, without showing any noticeable delay for any of the clients. This would truly make it an instant messaging platform.\"]]],[1,\"h1\",[[0,[],0,\"I. Plan\"]]],[1,\"p\",[[0,[],0,\"We need a \"],[0,[5],1,\"full duplex\"],[0,[],0,\" link between the server and the client so that messages can be sent and received at the same time. Of all the various methods like \"],[0,[6],1,\"long-polling\"],[0,[],0,\", \"],[0,[7],1,\"BOSH\"],[0,[],0,\", \"],[0,[8],1,\"comet\"],[0,[],0,\", my recommendation is to use \"],[0,[9],1,\"sockets\"],[0,[],0,\" (\"],[0,[10],1,\"web sockets\"],[0,[],0,\" for \"],[0,[11],1,\"browsers\"],[0,[],0,\"). They are truly bi-directional, light-weight and efficient for such use cases.\"]]],[3,\"ol\",[[[0,[],0,\"Our server would act as a socket server. \"]],[[0,[],0,\"It would bind to a specific port and IP address and listen for new socket connections.\"]],[[0,[],0,\"For every socket connected, it would add it to it's active socket connections list.\"]],[[0,[],0,\"When any connected socket sends a message to the server, the server will send it to all the sockets in the active socket connections list (except the one who sent it).\"]],[[0,[],0,\"If a connected socket closes connection, the server will remove it from the active list.\"]]]],[1,\"h1\",[[0,[],0,\"II. Getting started\"]]],[1,\"p\",[[0,[],0,\"Create a directory in your projects folder (or wherever you want) called \"],[0,[12],1,\"simple-chat-server\"],[0,[],0,\". You might want to open this directory in your code editor. \"],[0,[13],1,\"All path references here on will be relative to this directory.\"]]],[1,\"p\",[[0,[],0,\"Create a file called \"],[0,[12],1,\"server.nim\"],[0,[],0,\". This would be our core server file. To compile and run the code in this file, we will use \"],[0,[12],1,\"nim compile --run server.nim\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"We'll create a simple socket which will listen to new socket connections on port \"],[0,[12],1,\"5555\"],[0,[],0,\" and then close it.\"]]],[10,0],[10,1],[1,\"p\",[[0,[],0,\"To run the above code, we need to compile it first and then execute the binary. Fortunately, the Nim compiler can do both in a single command by specifying the \"],[0,[12],1,\"--run\"],[0,[],0,\" or \"],[0,[12],1,\"-r\"],[0,[],0,\" argument.\"]]],[1,\"p\",[[0,[],0,\"The compiler pulls all the required packages along with \"],[0,[12],1,\"server.nim\"],[0,[],0,\", transpiles them into C, links the libraries and creates an executable binary file with the same name as our file sans the file extension (in our case it becomes \"],[0,[12],1,\"server\"],[0,[],0,\") in the root of the project directory.\"]]],[10,2],[1,\"p\",[[0,[],0,\"The code ran but it didn't produce any output, except for compiler messages (we will be omitting compiler messages hereon). The server created the socket, listened for incoming connections and closed the socket connection.\"]]],[1,\"p\",[[0,[],0,\"Now we'll make the server wait until it receives new connections.\"]]],[10,3],[10,4],[1,\"p\",[[0,[],0,\"Our server is now actively listening for connections from clients. But… it's kinda stuck there because the server is waiting for a client to connect. We'll have to create one now. \"]]],[1,\"p\",[[0,[],0,\"Create a new file called \"],[0,[12],1,\"client.nim\"],[0,[],0,\". We'll use socket as a client and connect to the server.\"]]],[10,5],[10,6],[1,\"p\",[[0,[],0,\"Execute \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and at the same time, in a new terminal window/tab, execute \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,7],[1,\"p\",[[0,[],0,\"The server started and waited for connections. The moment we started the client, it connected to our socket server on the specified address. Server received this connection and assigned the client to the \"],[0,[12],1,\"client\"],[0,[],0,\" variable, and closed the socket.\"]]],[1,\"p\",[[0,[],0,\"This was a barebones socket server and client. We have to add the real magic - sending and receiving messages.\"]]],[1,\"h1\",[[0,[],0,\"III. Sending and receiving messages\"]]],[1,\"p\",[[0,[],0,\"A socket on an OS is a file descriptor (layman: just a file). When we say that a socket received some data, it actually signifies that some data was written on that file descriptor.\"]]],[1,\"p\",[[0,[],0,\"We have built a server which accepts socket connection and a client which connects to the server. Now, we'll dive into the actual communication between client and server.\"]]],[1,\"p\",[[0,[],0,\"On the client side, we'll prompt user to enter the message to be sent and then send this message over to the server.\"]]],[10,8],[10,9],[1,\"p\",[[0,[],0,\"On the server side, we need to listen to new messages from client. We'll also print the messages received from the client on the console.\"]]],[10,10],[10,11],[1,\"p\",[[0,[],0,\"Let's execute both \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" in two different terminal tabs/windows. Note that I have used \"],[0,[12],1,\"nim c -r\"],[0,[],0,\" which is a shorthand for \"],[0,[12],1,\"nim compile --run\"],[0,[],0,\".\"]]],[10,12],[1,\"p\",[[0,[],0,\"Something's gone horribly wrong here. Not only our client messages are truncated, but they are also mingled with other messages. We sent \"],[0,[14],1,\"Hello, world\"],[0,[],0,\" and \"],[0,[14],1,\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"],[0,[],0,\" as two different messages, but on the server side we're getting them in sort of mingled fashion. Also, our second message is incomplete.\"]]],[1,\"p\",[[0,[],0,\"The culprit here is line \"],[0,[15],1,\"13\"],[0,[],0,\". We specified that we'll only accept 10 characters from the socket. Also, until socket does not have at least 10 characters in its buffer, the \"],[0,[12,16],2,\"recv\"],[0,[],0,\" function will keep blocking indefinitely. The socket will keep reading messages until it has reached that count in its buffer and only then it will return the data. We can do the following,\"]]],[3,\"ol\",[[[0,[],0,\"We'll use some delimiting character. We'll read a very small amount of data from the socket and scan all characters in it and store it in our own buffer. If we encounter the delimiting character while scanning, we'll stop there, dump whatever we read so far in the buffer and return the buffer data.\"]],[[0,[],0,\"We can also use the \"],[0,[12],1,\"timeout\"],[0,[],0,\" parameter in the \"],[0,[12,16],2,\"recv\"],[0,[],0,\". By default, the timeout value is \"],[0,[12],1,\"-1\"],[0,[],0,\", which means we will wait indefinitely until there is enough data in the socket. We can set it to a small amount so that we don't wait indefinitely for new messages.\"]]]],[1,\"p\",[[0,[],0,\"A much better solution here would be to use the \"],[0,[12,17],2,\"recvLine\"],[0,[],0,\" method. It handles the complexity of handling the delimited character for us. It uses \"],[0,[12],1,\"\\\\r\\\\L\"],[0,[],0,\" as the delimiter. This means, on the client side, for each message we send, we would also need to append this delimiter. Let's make the changes accordingly.\"]]],[10,13],[10,14],[10,15],[10,16],[1,\"p\",[[0,[],0,\"If you're getting the above error, it's an indication that the port on which our server listens is being reserved for some reason. It happens when some process which is listening on that port is still running. Though in our case, even though we stopped the server, it's still giving us this error. The reason here is something called as \"],[0,[14],1,\"Linger Time\"],[0,[],0,\". When a socket is closed (especially TCP socket), some data which is marked to be sent, still exists in the socket's send buffer. Unless the buffer is emptied or a timeout period (usually 30 seconds) is passed, the system reserves the port.\"]]],[1,\"p\",[[0,[],0,\"To fix this, we use the \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of sockets. If a socket is created with this option enabled, instead of throwing an error, it checks whether a socket which is listening on the same port is in lingering state. If it is, the socket will use the same address with an assumption that the earlier socket will release the port soon. In Nim, we have the \"],[0,[12],1,\"OptReuseAddr\"],[0,[],0,\" option which can be set as \"],[0,[12],1,\"true\"],[0,[],0,\" to enable \"],[0,[12],1,\"SO_REUSEADDR\"],[0,[],0,\" property of the socket.\"]]],[10,17],[1,\"p\",[[0,[],0,\"Let's run the server and clients again.\"]]],[10,18],[1,\"p\",[[0,[],0,\"As you can see now, the messages are no longer truncated and they are received in the same manner as sent by the client.\"]]],[1,\"p\",[[0,[],0,\"Now that we have spawned our basic server which accepts messages from a client, let's spawn another client and see what happens. Don't kill the currently running \"],[0,[12],1,\"server.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client.nim\"],[0,[],0,\" and instead run \"],[0,[12],1,\"client.nim\"],[0,[],0,\" again in a new tab/terminal and send a few messages.\"]]],[10,19],[1,\"p\",[[0,[],0,\"If you check the tab/terminal running our server, you wouldn't find these messages at all. The server did not receive any message at all from our new client. Can you identify the problem?\"]]],[1,\"p\",[[0,[],0,\"Notice the lines \"],[0,[18],1,\"9-11\"],[0,[],0,\", where we wait and accept connection from a client. The moment a client connects, we never again accept and listen to data from new clients. As soon as we get a client, we just listen to new data from that client. What we can do is, as we listen to new data from one client, we'll also accept new connections from other clients. Our flow would go like this, \"]]],[10,20],[1,\"p\",[[0,[],0,\"However, there is a slight problem in step 2. In our server socket, as seen here, the server will block the program flow while it is listening for new clients since \"],[0,[12,19],2,\"server.accept()\"],[0,[],0,\" is a blocking function. Thus our messages will only be read once a client connects to the server. This is not even an acceptable case for our chat server.\"]]],[1,\"p\",[[0,[],0,\"Fortunately, sockets have an option to run in non-blocking mode. This means, our \"],[0,[12],1,\"accept()\"],[0,[],0,\" and \"],[0,[12],1,\"recv()\"],[0,[],0,\" functions will no longer block the code. If they have anything meaningful to return (like an incoming socket connection or a message), they will return that and continue execution. Otherwise, they will throw an error. Which means, we have to keep checking for new connections or messages and also handle the error in case we don't get any. \"]]],[1,\"p\",[[0,[],0,\"In Nim, we enable non-blocking mode using the \"],[0,[12,20],2,\"setBlocking()\"],[0,[],0,\" function of the underlying native socket. We'll also store all our connected sockets in a list so that we can iterate over them and receive messages from each of them. We'll do both, accept new connections and receive data from sockets in a single infinite loop, so that we keep accepting new connections while we receive messages from existing ones. Let's give this a try.\"]]],[10,21],[10,22],[1,\"p\",[[0,[],0,\"Let's execute our server now with multiple clients.\"]]],[10,23],[1,\"p\",[[0,[],0,\"Yay! We have it now. Our server accepts and receives messages from multiple clients. We have also managed client disconnections. What our server should do now is send messages from one client to other clients, which a chat server should do. Let's do it.\"]]],[10,24],[1,\"p\",[[0,[],0,\"We can build a small GUI or use \"],[0,[21],1,\"ncurses\"],[0,[],0,\" to do that interactively in terminal. Since both of these are outside the scope of this tutorial, we'll make a hack for now. We'll create two different types of clients - one for sending messages and one for receiving. We call them \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" respectively. \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" is exactly same as our \"],[0,[12],1,\"client.nim\"],[0,[],0,\".\"]]],[10,25],[1,\"p\",[[0,[],0,\"We would need some minor changes in our \"],[0,[12],1,\"server.nim\"],[0,[],0,\". Once the server receives a message, it will send it to all connected clients, except the one who sent the message.\"]]],[10,26],[1,\"p\",[[0,[],0,\"Open three terminals - one for \"],[0,[12],1,\"server.nim\"],[0,[],0,\", one for \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and one for \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" - and execute the respective files. Try sending some messages from sending client and see if you get those in the receiving client.\"]]],[10,27],[1,\"p\",[[0,[],0,\"You can open multiple terminals with \"],[0,[12],1,\"client_receiving.nim\"],[0,[],0,\" and \"],[0,[12],1,\"client_sending.nim\"],[0,[],0,\" and send messages to one another. You would observer that all receiving clients receive messages from all sending clients. This is because our server is current broadcasting all messages to everyone. We can limit this behavior, but we can skip that for now.\"]]],[1,\"p\",[[0,[],0,\"With this, you have completed a simple chat server with somewhat hacky clients (we'll fix that later). However, if you're working on a laptop, you would have noticed the noise of your CPU fan every time you run the server. If you're curious enough, check the output of \"],[0,[12],1,\"top\"],[0,[],0,\" command and you'll notice that the server process is taking up some chunk of CPU.\"]]],[10,28],[1,\"p\",[[0,[],0,\"It seems our code needs some fixing. Indeed it does. The way we are handling new connections and incoming messages on our server is very inefficient. We are persistently asking the socket for new connection and a new message, that too in an infinite loop. If socket was an actual person, it would mean as if we are pestering him every now and then for new information.\"]]],[1,\"p\",[[0,[],0,\"We have a solution for this. We'll make use of something that is core of lot of chat servers and surprisingly available on all platforms - \"],[0,[12,22],2,\"select\"],[0,[],0,\".\"]]],[1,\"h1\",[[0,[],0,\"IV. Using \"],[0,[12],1,\"select\"],[0,[],0,\" for optimization\"]]],[1,\"p\",[[0,[],0,\"Of all the amazing things that happened in Unix world, one was \"],[0,[12],1,\"select\"],[0,[],0,\". Originally appeared in BSD, \"],[0,[12],1,\"select\"],[0,[],0,\" was quickly adopted in other popular OS. It's a kernel level utility which tells us which file descriptors are ready to be read, written or have an error condition. It does this using low-level file monitoring and interrupts, instead of iterating through all files and repeatedly checking if they have changed. This is cleaner, efficient and puts minimal load on our CPU.\"]]],[1,\"h3\",[[0,[],0,\"How to use \"],[0,[12],1,\"select\"],[0,[],0,\" with our chat server?\"]]],[1,\"p\",[[0,[],0,\"Since all connected clients are nothing but file descriptors, we'll tell \"],[0,[12],1,\"select\"],[0,[],0,\" to monitor these given file descriptors and notify us when there's any data on them that is yet to be read. Once \"],[0,[12],1,\"select\"],[0,[],0,\" notifies us, it will give us a list of file descriptors which contain unread data. We'll iterate over these and see what data they have. Remember, when a socket receives data, it essentially means that it has data to be read.\"]]],[1,\"p\",[[0,[12],1,\"select\"],[0,[],0,\" in Nim is a part of  \"],[0,[12],1,\"selectors\"],[0,[],0,\" package. It has two important methods of our concern - \"],[0,[12,23],2,\"registerHandle\"],[0,[],0,\" and \"],[0,[12,24],2,\"select\"],[0,[],0,\". \"],[0,[12],1,\"registerHandle\"],[0,[],0,\" takes in a file descriptor, the events we want to listen to (read, write, error) and optional data that we wish to receive when the event is triggered. \"],[0,[12],1,\"select\"],[0,[],0,\" takes in the timeout period until which it will wait for events on the registered handles (file descriptors). If we want \"],[0,[12],1,\"select\"],[0,[],0,\" to block our code, we can set timeout as \"],[0,[12],1,\"-1\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Let's dive into the code.\"]]],[10,29],[10,30],[1,\"p\",[[0,[],0,\"Let's run the program now and see our CPU usage.\"]]],[10,31],[10,32],[1,\"p\",[[0,[],0,\"It's not even showing in the top CPU consuming processes. That's great.\"]]],[10,33],[1,\"p\",[[0,[],0,\"With this we complete our basic chat server. I know clients are still messy, but for that, we would need to dive deep into the interactivity part which is beyond the scope of this tutorial. Next up, we can add clients with identity information so that server can uniquely tag who sent which message, 1:1 messaging instead of group messaging and an interactive UI. I might write a follow-up article with all of these in future.\"]]],[1,\"p\",[[0,[],0,\"Nim is an amazing language. To be able to do so much, in so little and clean code is amazing. We haven't touched on code optimization yet, but I believe we can use some micro-optimizations to make this code even faster. It's been a great exercise for me to move away from Python and learn interesting languages like Nim. \"]]],[1,\"p\",[[0,[],0,\"Let me know about your feedback. If you feel there were any issues with the tutorial, or writing style, or any errors in text or code, or any difficulty in understanding, or if you just wanna give a compliment, leave your comments below.\"]]]]}","created_at_ts":1548421562967,"created_at":"2019-01-25 13:06:03"},{"id":"5cf7f23be3cecf1d3b1cfe1f","post_id":"5c0c1e7aabc169173fada4ca","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=2sdORk7V-Do\",\"html\":\"<iframe width=\\\"480\\\" height=\\\"270\\\" src=\\\"https://www.youtube.com/embed/2sdORk7V-Do?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\",\"type\":\"video\",\"caption\":\"Craftsdwarf's video highlights one the core reasons why Skypiea is so amazing\"}],[\"hr\",{}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.youtube.com/channel/UCMG_DhlUf6UXgSaFfS6JD1g\"]],[\"a\",[\"href\",\"https://www.youtube.com/watch?v=2sdORk7V-Do\"]],[\"strong\"],[\"em\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Have you ever read a fantasy story which was so amazing that you regretted not being a part of? For me, it's Skypiea from One Piece.\"]]],[1,\"p\",[[0,[],0,\"I am fan of J. R. R. Tolkien and his world building prowess. If you thought Lord of the Rings was detailed enough, wait until you read Silmarillion which talks about creation of Arda (the world of LOTR), its mythology, revelations of mighty characters and their lineages (House of Beor, Noldorian elves, Numenors, etc.), history of all evil (Morgoth, Balrogs, Dragons, etc.) and the consequential story of the Silmarils. I was always in awe with the depth as well as the breadth of Tolkien's work. Then, around 3 years back, I started watching One Piece by Eiichiro Oda. I wasn't impressed at first but, after the Arlong Park arc, I began to acknowledge the character building and story telling in One Piece.\"]]],[1,\"p\",[[0,[],0,\"Then came Skypiea. I still consider it as Oda's finest work in terms of world building. You can check out \"],[0,[0],1,\"Craftsdwarf\"],[0,[],0,\"'s \"],[0,[1],1,\"video\"],[0,[],0,\" which delineates how impressively Skypiea was constructed.\"]]],[10,0],[1,\"p\",[[0,[],0,\"I will discuss this in two parts. First I will explain what makes this one so special and second, I will highlight a few amazing moments from the arcs.\"]]],[10,1],[1,\"blockquote\",[[0,[2],1,\"SPOILER ALERT:\"],[0,[],0,\" I will be exploring a lot of One Piece content. If you have never watched One Piece before, I would strongly suggest at least finishing till the Skypiea arc before reading on. You can continue at your own risk, if you want to.\"]]],[10,2],[1,\"h1\",[[0,[],0,\"What made Skypiea special\"]]],[1,\"h2\",[[0,[],0,\"The build up gives us mysteries to ponder over\"]]],[1,\"p\",[[0,[],0,\"The Sky Island saga is build up of two arcs - Jaya arc and Skypiea arc. Though Skypiea is where all the thrill happens, it is the Jaya arc which I appreciate the most. I will just highlight a few points here,\"]]],[1,\"h3\",[[0,[],0,\"Lot of major character introductions \"]]],[1,\"p\",[[0,[],0,\"First comes Robin aka \"],[0,[3],1,\"Miss All Sunday\"],[0,[],0,\", the villain from the Alabasta arc and Crocodile's second in command (I guess). For the first time, we see an antagonist willingly switching sides and getting into the main crew. Though her introduction and initial interaction with the crew members is hilarious, there's still an air of mystery around her. An archeologist and an assassin with a bounty of 79 million berries at a mere age of eight, she's definitely one of the most powerful crew members whose true strength is yet to be revealed.\"]]],[1,\"p\",[[0,[],0,\"Then comes the revelations of the most interesting pirate group in the entire One Piece universe. An amazing sniper who manages to shoot down a bird not even visible to human eye, a mad wrestler who plummets even the most hardened pirates on the island, an old sick man who offers explosive apples to people, and a big fat guy who talks about fate and shares Luffy's idea of pursuing dreams and not giving up. Who would know these guys would dramatically change the entire course of the One Piece world in future?\"]]],[1,\"p\",[[0,[],0,\"We further get to know about a guy named Montblanc Noland. He was a botanist and an adventurer who had explored the whole world. His adventures were so thrilling and captivating that it was difficult to tell apart whether he was lying or not. His death is also one of the most tragic ones wherein he gets executed by his king for lying about the gold treasure on Jaya island. Montblanc Noland would eventually become one of the most referenced characters in the story.\"]]],[1,\"h3\",[[0,[],0,\"Geographical phenomena\"]]],[1,\"p\",[[0,[],0,\"In the entire series so far, no arc has ever explored so much about the geographical aspects of the One Piece world than this one. Let's talk about a few of these concepts.\"]]],[3,\"ul\",[[[0,[],0,\"Knock-up streams: When water pockets trapped under sea heat up due to geothermal heat, it boils and once enough pressure accumulates, it causes a violent undersea explosion. The impact can propagate to the surface and shoot huge water column into the sky. I loved this simple explanation for such a fictional phenomenon and it looks plausible.\"]],[[0,[],0,\"Island clouds: When a sea stone element is trapped inside water vapor, it forms island cloud. Depending on its density, it either forms an island cloud or a sea cloud. The fact that it contains sea stone element makes up a good explanation why these clouds are sturdy enough to bear the weight of the sky islands and also why devil fruit users feel powerless when they \\\"drown\\\" in the sea cloud.\"]],[[0,[],0,\"Sky island biology: Owing to far lesser air pressure, any being coming from the ground experiences initial difficulties especially adjusting to this new environment. Also, beings which were \"]]]],[1,\"h3\",[[0,[],0,\"Lots of areas are left open to be explored afterwards\"]]],[1,\"p\",[[0,[],0,\"Jaya\"],[1,[],0,0],[0,[],0,\"Getting into the clouds\"],[1,[],0,1],[0,[],0,\"Exploration\"]]]]}","created_at_ts":1559753275665,"created_at":"2019-06-05 16:47:55"},{"id":"5cf7f242e3cecf1d3b1cfe21","post_id":"5c0c1e7aabc169173fada4ca","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=2sdORk7V-Do\",\"html\":\"<iframe width=\\\"480\\\" height=\\\"270\\\" src=\\\"https://www.youtube.com/embed/2sdORk7V-Do?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\",\"type\":\"video\",\"caption\":\"Craftsdwarf's video highlights one the core reasons why Skypiea is so amazing\"}],[\"hr\",{}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.youtube.com/channel/UCMG_DhlUf6UXgSaFfS6JD1g\"]],[\"a\",[\"href\",\"https://www.youtube.com/watch?v=2sdORk7V-Do\"]],[\"strong\"],[\"em\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Have you ever read a fantasy story which was so amazing that you regretted not being a part of? For me, it's Skypiea from One Piece.\"]]],[1,\"p\",[[0,[],0,\"I am fan of J. R. R. Tolkien and his world building prowess. If you thought Lord of the Rings was detailed enough, wait until you read Silmarillion which talks about creation of Arda (the world of LOTR), its mythology, revelations of mighty characters and their lineages (House of Beor, Noldorian elves, Numenors, etc.), history of all evil (Morgoth, Balrogs, Dragons, etc.) and the consequential story of the Silmarils. I was always in awe with the depth as well as the breadth of Tolkien's work. Then, around 3 years back, I started watching One Piece by Eiichiro Oda. I wasn't impressed at first but, after the Arlong Park arc, I began to acknowledge the character building and story telling in One Piece.\"]]],[1,\"p\",[[0,[],0,\"Then came Skypiea. I still consider it as Oda's finest work in terms of world building. You can check out \"],[0,[0],1,\"Craftsdwarf\"],[0,[],0,\"'s \"],[0,[1],1,\"video\"],[0,[],0,\" which delineates how impressively Skypiea was constructed.\"]]],[10,0],[1,\"p\",[[0,[],0,\"I will discuss this in two parts. First I will explain what makes this one so special and second, I will highlight a few amazing moments from the arcs.\"]]],[10,1],[1,\"blockquote\",[[0,[2],1,\"SPOILER ALERT:\"],[0,[],0,\" I will be exploring a lot of One Piece content. If you have never watched One Piece before, I would strongly suggest at least finishing till the Skypiea arc before reading on. You can continue at your own risk, if you want to.\"]]],[10,2],[1,\"h1\",[[0,[],0,\"What made Skypiea special\"]]],[1,\"h2\",[[0,[],0,\"The build up gives us mysteries to ponder over\"]]],[1,\"p\",[[0,[],0,\"The Sky Island saga is build up of two arcs - Jaya arc and Skypiea arc. Though Skypiea is where all the thrill happens, it is the Jaya arc which I appreciate the most. I will just highlight a few points here,\"]]],[1,\"h3\",[[0,[],0,\"Lot of major character introductions \"]]],[1,\"p\",[[0,[],0,\"First comes Robin aka \"],[0,[3],1,\"Miss All Sunday\"],[0,[],0,\", the villain from the Alabasta arc and Crocodile's second in command (I guess). For the first time, we see an antagonist willingly switching sides and getting into the main crew. Though her introduction and initial interaction with the crew members is hilarious, there's still an air of mystery around her. An archeologist and an assassin with a bounty of 79 million berries at a mere age of eight, she's definitely one of the most powerful crew members whose true strength is yet to be revealed.\"]]],[1,\"p\",[[0,[],0,\"Then comes the revelations of the most interesting pirate group in the entire One Piece universe. An amazing sniper who manages to shoot down a bird not even visible to human eye, a mad wrestler who plummets even the most hardened pirates on the island, an old sick man who offers explosive apples to people, and a big fat guy who talks about fate and shares Luffy's idea of pursuing dreams and not giving up. Who would know these guys would dramatically change the entire course of the One Piece world in future?\"]]],[1,\"p\",[[0,[],0,\"We further get to know about a guy named Montblanc Noland. He was a botanist and an adventurer who had explored the whole world. His adventures were so thrilling and captivating that it was difficult to tell apart whether he was lying or not. His death is also one of the most tragic ones wherein he gets executed by his king for lying about the gold treasure on Jaya island. Montblanc Noland would eventually become one of the most referenced characters in the story.\"]]],[1,\"h3\",[[0,[],0,\"Geographical phenomena\"]]],[1,\"p\",[[0,[],0,\"In the entire series so far, no arc has ever explored so much about the geographical aspects of the One Piece world than this one. Let's talk about a few of these concepts.\"]]],[3,\"ul\",[[[0,[],0,\"Knock-up streams: When water pockets trapped under sea heat up due to geothermal heat, it boils and once enough pressure accumulates, it causes a violent undersea explosion. The impact can propagate to the surface and shoot huge water column into the sky. I loved this simple explanation for such a fictional phenomenon and it looks plausible.\"]],[[0,[],0,\"Island clouds: When a sea stone element is trapped inside water vapor, it forms island cloud. Depending on its density, it either forms an island cloud or a sea cloud. The fact that it contains sea stone element makes up a good explanation why these clouds are sturdy enough to bear the weight of the sky islands and also why devil fruit users feel powerless when they \\\"drown\\\" in the sea cloud.\"]],[[0,[],0,\"Sky island biology: Owing to far lesser air pressure, any being coming from the ground experiences initial difficulties especially adjusting to this new environment. Also, beings which were put the \"]]]],[1,\"h3\",[[0,[],0,\"Lots of areas are left open to be explored afterwards\"]]],[1,\"p\",[[0,[],0,\"Jaya\"],[1,[],0,0],[0,[],0,\"Getting into the clouds\"],[1,[],0,1],[0,[],0,\"Exploration\"]]]]}","created_at_ts":1559753282046,"created_at":"2019-06-05 16:48:02"},{"id":"5cf7f272e3cecf1d3b1cfe23","post_id":"5c0c1e7aabc169173fada4ca","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=2sdORk7V-Do\",\"html\":\"<iframe width=\\\"480\\\" height=\\\"270\\\" src=\\\"https://www.youtube.com/embed/2sdORk7V-Do?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\",\"type\":\"video\",\"caption\":\"Craftsdwarf's video highlights one the core reasons why Skypiea is so amazing\"}],[\"hr\",{}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.youtube.com/channel/UCMG_DhlUf6UXgSaFfS6JD1g\"]],[\"a\",[\"href\",\"https://www.youtube.com/watch?v=2sdORk7V-Do\"]],[\"strong\"],[\"em\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Have you ever read a fantasy story which was so amazing that you regretted not being a part of? For me, it's Skypiea from One Piece.\"]]],[1,\"p\",[[0,[],0,\"I am fan of J. R. R. Tolkien and his world building prowess. If you thought Lord of the Rings was detailed enough, wait until you read Silmarillion which talks about creation of Arda (the world of LOTR), its mythology, revelations of mighty characters and their lineages (House of Beor, Noldorian elves, Numenors, etc.), history of all evil (Morgoth, Balrogs, Dragons, etc.) and the consequential story of the Silmarils. I was always in awe with the depth as well as the breadth of Tolkien's work. Then, around 3 years back, I started watching One Piece by Eiichiro Oda. I wasn't impressed at first but, after the Arlong Park arc, I began to acknowledge the character building and story telling in One Piece.\"]]],[1,\"p\",[[0,[],0,\"Then came Skypiea. I still consider it as Oda's finest work in terms of world building. You can check out \"],[0,[0],1,\"Craftsdwarf\"],[0,[],0,\"'s \"],[0,[1],1,\"video\"],[0,[],0,\" which delineates how impressively Skypiea was constructed.\"]]],[10,0],[1,\"p\",[[0,[],0,\"I will discuss this in two parts. First I will explain what makes this one so special and second, I will highlight a few amazing moments from the arcs.\"]]],[10,1],[1,\"blockquote\",[[0,[2],1,\"SPOILER ALERT:\"],[0,[],0,\" I will be exploring a lot of One Piece content. If you have never watched One Piece before, I would strongly suggest at least finishing till the Skypiea arc before reading on. You can continue at your own risk, if you want to.\"]]],[10,2],[1,\"h1\",[[0,[],0,\"What made Skypiea special\"]]],[1,\"h2\",[[0,[],0,\"The build up gives us mysteries to ponder over\"]]],[1,\"p\",[[0,[],0,\"The Sky Island saga is build up of two arcs - Jaya arc and Skypiea arc. Though Skypiea is where all the thrill happens, it is the Jaya arc which I appreciate the most. I will just highlight a few points here,\"]]],[1,\"h3\",[[0,[],0,\"Lot of major character introductions \"]]],[1,\"p\",[[0,[],0,\"First comes Robin aka \"],[0,[3],1,\"Miss All Sunday\"],[0,[],0,\", the villain from the Alabasta arc and Crocodile's second in command (I guess). For the first time, we see an antagonist willingly switching sides and getting into the main crew. Though her introduction and initial interaction with the crew members is hilarious, there's still an air of mystery around her. An archeologist and an assassin with a bounty of 79 million berries at a mere age of eight, she's definitely one of the most powerful crew members whose true strength is yet to be revealed.\"]]],[1,\"p\",[[0,[],0,\"Then comes the revelations of the most interesting pirate group in the entire One Piece universe. An amazing sniper who manages to shoot down a bird not even visible to human eye, a mad wrestler who plummets even the most hardened pirates on the island, an old sick man who offers explosive apples to people, and a big fat guy who talks about fate and shares Luffy's idea of pursuing dreams and not giving up. Who would know these guys would dramatically change the entire course of the One Piece world in future?\"]]],[1,\"p\",[[0,[],0,\"We further get to know about a guy named Montblanc Noland. He was a botanist and an adventurer who had explored the whole world. His adventures were so thrilling and captivating that it was difficult to tell apart whether he was lying or not. His death is also one of the most tragic ones wherein he gets executed by his king for lying about the gold treasure on Jaya island. Montblanc Noland would eventually become one of the most referenced characters in the story.\"]]],[1,\"h3\",[[0,[],0,\"Geographical phenomena\"]]],[1,\"p\",[[0,[],0,\"In the entire series so far, no arc has ever explored so much about the geographical aspects of the One Piece world than this one. Let's talk about a few of these concepts.\"]]],[3,\"ul\",[[[0,[],0,\"Knock-up streams: When water pockets trapped under sea heat up due to geothermal heat, it boils and once enough pressure accumulates, it causes a violent undersea explosion. The impact can propagate to the surface and shoot huge water column into the sky. I loved this simple explanation for such a fictional phenomenon and it looks plausible.\"]],[[0,[],0,\"Island clouds: When a sea stone element is trapped inside water vapor, it forms island cloud. Depending on its density, it either forms an island cloud or a sea cloud. The fact that it contains sea stone element makes up a good explanation why these clouds are sturdy enough to bear the weight of the sky islands and also why devil fruit users feel powerless when they \\\"drown\\\" in the sea cloud.\"]],[[0,[],0,\"Sky island biology: Owing to far lesser air pressure, any being coming from the ground experiences initial difficulties especially adjusting to this new environment. Also, beings on Jaya which landed on Sky Island over \"]]]],[1,\"h3\",[[0,[],0,\"Lots of areas are left open to be explored afterwards\"]]],[1,\"p\",[[0,[],0,\"Jaya\"],[1,[],0,0],[0,[],0,\"Getting into the clouds\"],[1,[],0,1],[0,[],0,\"Exploration\"]]]]}","created_at_ts":1559753330898,"created_at":"2019-06-05 16:48:50"},{"id":"5cf7f2dfe3cecf1d3b1cfe25","post_id":"5c0c1e7aabc169173fada4ca","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=2sdORk7V-Do\",\"html\":\"<iframe width=\\\"480\\\" height=\\\"270\\\" src=\\\"https://www.youtube.com/embed/2sdORk7V-Do?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\",\"type\":\"video\",\"caption\":\"Craftsdwarf's video highlights one the core reasons why Skypiea is so amazing\"}],[\"hr\",{}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.youtube.com/channel/UCMG_DhlUf6UXgSaFfS6JD1g\"]],[\"a\",[\"href\",\"https://www.youtube.com/watch?v=2sdORk7V-Do\"]],[\"strong\"],[\"em\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Have you ever read a fantasy story which was so amazing that you regretted not being a part of? For me, it's Skypiea from One Piece.\"]]],[1,\"p\",[[0,[],0,\"I am fan of J. R. R. Tolkien and his world building prowess. If you thought Lord of the Rings was detailed enough, wait until you read Silmarillion which talks about creation of Arda (the world of LOTR), its mythology, revelations of mighty characters and their lineages (House of Beor, Noldorian elves, Numenors, etc.), history of all evil (Morgoth, Balrogs, Dragons, etc.) and the consequential story of the Silmarils. I was always in awe with the depth as well as the breadth of Tolkien's work. Then, around 3 years back, I started watching One Piece by Eiichiro Oda. I wasn't impressed at first but, after the Arlong Park arc, I began to acknowledge the character building and story telling in One Piece.\"]]],[1,\"p\",[[0,[],0,\"Then came Skypiea. I still consider it as Oda's finest work in terms of world building. You can check out \"],[0,[0],1,\"Craftsdwarf\"],[0,[],0,\"'s \"],[0,[1],1,\"video\"],[0,[],0,\" which delineates how impressively Skypiea was constructed.\"]]],[10,0],[1,\"p\",[[0,[],0,\"I will discuss this in two parts. First I will explain what makes this one so special and second, I will highlight a few amazing moments from the arcs.\"]]],[10,1],[1,\"blockquote\",[[0,[2],1,\"SPOILER ALERT:\"],[0,[],0,\" I will be exploring a lot of One Piece content. If you have never watched One Piece before, I would strongly suggest at least finishing till the Skypiea arc before reading on. You can continue at your own risk, if you want to.\"]]],[10,2],[1,\"h1\",[[0,[],0,\"What made Skypiea special\"]]],[1,\"h2\",[[0,[],0,\"The build up gives us mysteries to ponder over\"]]],[1,\"p\",[[0,[],0,\"The Sky Island saga is build up of two arcs - Jaya arc and Skypiea arc. Though Skypiea is where all the thrill happens, it is the Jaya arc which I appreciate the most. I will just highlight a few points here,\"]]],[1,\"h3\",[[0,[],0,\"Lot of major character introductions \"]]],[1,\"p\",[[0,[],0,\"First comes Robin aka \"],[0,[3],1,\"Miss All Sunday\"],[0,[],0,\", the villain from the Alabasta arc and Crocodile's second in command (I guess). For the first time, we see an antagonist willingly switching sides and getting into the main crew. Though her introduction and initial interaction with the crew members is hilarious, there's still an air of mystery around her. An archeologist and an assassin with a bounty of 79 million berries at a mere age of eight, she's definitely one of the most powerful crew members whose true strength is yet to be revealed.\"]]],[1,\"p\",[[0,[],0,\"Then comes the revelations of the most interesting pirate group in the entire One Piece universe. An amazing sniper who manages to shoot down a bird not even visible to human eye, a mad wrestler who plummets even the most hardened pirates on the island, an old sick man who offers explosive apples to people, and a big fat guy who talks about fate and shares Luffy's idea of pursuing dreams and not giving up. Who would know these guys would dramatically change the entire course of the One Piece world in future?\"]]],[1,\"p\",[[0,[],0,\"We further get to know about a guy named Montblanc Noland. He was a botanist and an adventurer who had explored the whole world. His adventures were so thrilling and captivating that it was difficult to tell apart whether he was lying or not. His death is also one of the most tragic ones wherein he gets executed by his king for lying about the gold treasure on Jaya island. Montblanc Noland would eventually become one of the most referenced characters in the story.\"]]],[1,\"h3\",[[0,[],0,\"Geographical phenomena\"]]],[1,\"p\",[[0,[],0,\"In the entire series so far, no arc has ever explored so much about the geographical aspects of the One Piece world than this one. Let's talk about a few of these concepts.\"]]],[3,\"ul\",[[[0,[],0,\"Knock-up streams: When water pockets trapped under sea heat up due to geothermal heat, it boils and once enough pressure accumulates, it causes a violent undersea explosion. The impact can propagate to the surface and shoot huge water column into the sky. I loved this simple explanation for such a fictional phenomenon and it looks plausible.\"]],[[0,[],0,\"Island clouds: When a sea stone element is trapped inside water vapor, it forms island cloud. Depending on its density, it either forms an island cloud or a sea cloud. The fact that it contains sea stone element makes up a good explanation why these clouds are sturdy enough to bear the weight of the sky islands and also why devil fruit users feel powerless when they \\\"drown\\\" in the sea cloud.\"]],[[0,[],0,\"Sky island biology: Owing to far lesser air pressure, any being coming from the ground experiences initial difficulties especially adjusting to this new environment. Also, beings on Jaya which landed on Sky Island four hundred years back got adapted to this new and thinner atmosphere and instead got inflated.\"]]]],[1,\"h3\",[[0,[],0,\"Lots of areas are left open to be explored afterwards\"]]],[1,\"p\",[[0,[],0,\"Jaya\"],[1,[],0,0],[0,[],0,\"Getting into the clouds\"],[1,[],0,1],[0,[],0,\"Exploration\"]]]]}","created_at_ts":1559753439334,"created_at":"2019-06-05 16:50:39"},{"id":"5cf7f30be3cecf1d3b1cfe27","post_id":"5c0c1e7aabc169173fada4ca","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=2sdORk7V-Do\",\"html\":\"<iframe width=\\\"480\\\" height=\\\"270\\\" src=\\\"https://www.youtube.com/embed/2sdORk7V-Do?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\",\"type\":\"video\",\"caption\":\"Craftsdwarf's video highlights one the core reasons why Skypiea is so amazing\"}],[\"hr\",{}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.youtube.com/channel/UCMG_DhlUf6UXgSaFfS6JD1g\"]],[\"a\",[\"href\",\"https://www.youtube.com/watch?v=2sdORk7V-Do\"]],[\"strong\"],[\"em\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Have you ever read a fantasy story which was so amazing that you regretted not being a part of? For me, it's Skypiea from One Piece.\"]]],[1,\"p\",[[0,[],0,\"I am fan of J. R. R. Tolkien and his world building prowess. If you thought Lord of the Rings was detailed enough, wait until you read Silmarillion which talks about creation of Arda (the world of LOTR), its mythology, revelations of mighty characters and their lineages (House of Beor, Noldorian elves, Numenors, etc.), history of all evil (Morgoth, Balrogs, Dragons, etc.) and the consequential story of the Silmarils. I was always in awe with the depth as well as the breadth of Tolkien's work. Then, around 3 years back, I started watching One Piece by Eiichiro Oda. I wasn't impressed at first but, after the Arlong Park arc, I began to acknowledge the character building and story telling in One Piece.\"]]],[1,\"p\",[[0,[],0,\"Then came Skypiea. I still consider it as Oda's finest work in terms of world building. You can check out \"],[0,[0],1,\"Craftsdwarf\"],[0,[],0,\"'s \"],[0,[1],1,\"video\"],[0,[],0,\" which delineates how impressively Skypiea was constructed.\"]]],[10,0],[1,\"p\",[[0,[],0,\"I will discuss this in two parts. First I will explain what makes this one so special and second, I will highlight a few amazing moments from the arcs.\"]]],[10,1],[1,\"blockquote\",[[0,[2],1,\"SPOILER ALERT:\"],[0,[],0,\" I will be exploring a lot of One Piece content. If you have never watched One Piece before, I would strongly suggest at least finishing till the Skypiea arc before reading on. You can continue at your own risk, if you want to.\"]]],[10,2],[1,\"h1\",[[0,[],0,\"What made Skypiea special\"]]],[1,\"h2\",[[0,[],0,\"The build up gives us mysteries to ponder over\"]]],[1,\"p\",[[0,[],0,\"The Sky Island saga is build up of two arcs - Jaya arc and Skypiea arc. Though Skypiea is where all the thrill happens, it is the Jaya arc which I appreciate the most. I will just highlight a few points here,\"]]],[1,\"h3\",[[0,[],0,\"Lot of major character introductions \"]]],[1,\"p\",[[0,[],0,\"First comes Robin aka \"],[0,[3],1,\"Miss All Sunday\"],[0,[],0,\", the villain from the Alabasta arc and Crocodile's second in command (I guess). For the first time, we see an antagonist willingly switching sides and getting into the main crew. Though her introduction and initial interaction with the crew members is hilarious, there's still an air of mystery around her. An archeologist and an assassin with a bounty of 79 million berries at a mere age of eight, she's definitely one of the most powerful crew members whose true strength is yet to be revealed.\"]]],[1,\"p\",[[0,[],0,\"Then comes the revelations of the most interesting pirate group in the entire One Piece universe. An amazing sniper who manages to shoot down a bird not even visible to human eye, a mad wrestler who plummets even the most hardened pirates on the island, an old sick man who offers explosive apples to people, and a big fat guy who talks about fate and shares Luffy's idea of pursuing dreams and not giving up. Who would know these guys would dramatically change the entire course of the One Piece world in future?\"]]],[1,\"p\",[[0,[],0,\"We further get to know about a guy named Montblanc Noland. He was a botanist and an adventurer who had explored the whole world. His adventures were so thrilling and captivating that it was difficult to tell apart whether he was lying or not. His death is also one of the most tragic ones wherein he gets executed by his king for lying about the gold treasure on Jaya island. Montblanc Noland would eventually become one of the most referenced characters in the story.\"]]],[1,\"h3\",[[0,[],0,\"Geographical phenomena\"]]],[1,\"p\",[[0,[],0,\"In the entire series so far, no arc has ever explored so much about the geographical aspects of the One Piece world than this one. Let's talk about a few of these concepts.\"]]],[3,\"ul\",[[[0,[2],1,\"Knock-up streams:\"],[0,[],0,\" When water pockets trapped under sea heat up due to geothermal heat, it boils and once enough pressure accumulates, it causes a violent undersea explosion. The impact can propagate to the surface and shoot huge water column into the sky. I loved this simple explanation for such a fictional phenomenon and it looks plausible.\"]],[[0,[],0,\"Island clouds: When a sea stone element is trapped inside water vapor, it forms island cloud. Depending on its density, it either forms an island cloud or a sea cloud. The fact that it contains sea stone element makes up a good explanation why these clouds are sturdy enough to bear the weight of the sky islands and also why devil fruit users feel powerless when they \\\"drown\\\" in the sea cloud.\"]],[[0,[],0,\"Sky island biology: Owing to far lesser air pressure, any being coming from the ground experiences initial difficulties especially adjusting to this new environment. Also, beings on Jaya which landed on Sky Island four hundred years back got adapted to this new and thinner atmosphere and instead got inflated.\"]]]],[1,\"h3\",[[0,[],0,\"Lots of areas are left open to be explored afterwards\"]]],[1,\"p\",[[0,[],0,\"Jaya\"],[1,[],0,0],[0,[],0,\"Getting into the clouds\"],[1,[],0,1],[0,[],0,\"Exploration\"]]]]}","created_at_ts":1559753483590,"created_at":"2019-06-05 16:51:23"},{"id":"5cf7f310e3cecf1d3b1cfe29","post_id":"5c0c1e7aabc169173fada4ca","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=2sdORk7V-Do\",\"html\":\"<iframe width=\\\"480\\\" height=\\\"270\\\" src=\\\"https://www.youtube.com/embed/2sdORk7V-Do?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\",\"type\":\"video\",\"caption\":\"Craftsdwarf's video highlights one the core reasons why Skypiea is so amazing\"}],[\"hr\",{}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.youtube.com/channel/UCMG_DhlUf6UXgSaFfS6JD1g\"]],[\"a\",[\"href\",\"https://www.youtube.com/watch?v=2sdORk7V-Do\"]],[\"strong\"],[\"em\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Have you ever read a fantasy story which was so amazing that you regretted not being a part of? For me, it's Skypiea from One Piece.\"]]],[1,\"p\",[[0,[],0,\"I am fan of J. R. R. Tolkien and his world building prowess. If you thought Lord of the Rings was detailed enough, wait until you read Silmarillion which talks about creation of Arda (the world of LOTR), its mythology, revelations of mighty characters and their lineages (House of Beor, Noldorian elves, Numenors, etc.), history of all evil (Morgoth, Balrogs, Dragons, etc.) and the consequential story of the Silmarils. I was always in awe with the depth as well as the breadth of Tolkien's work. Then, around 3 years back, I started watching One Piece by Eiichiro Oda. I wasn't impressed at first but, after the Arlong Park arc, I began to acknowledge the character building and story telling in One Piece.\"]]],[1,\"p\",[[0,[],0,\"Then came Skypiea. I still consider it as Oda's finest work in terms of world building. You can check out \"],[0,[0],1,\"Craftsdwarf\"],[0,[],0,\"'s \"],[0,[1],1,\"video\"],[0,[],0,\" which delineates how impressively Skypiea was constructed.\"]]],[10,0],[1,\"p\",[[0,[],0,\"I will discuss this in two parts. First I will explain what makes this one so special and second, I will highlight a few amazing moments from the arcs.\"]]],[10,1],[1,\"blockquote\",[[0,[2],1,\"SPOILER ALERT:\"],[0,[],0,\" I will be exploring a lot of One Piece content. If you have never watched One Piece before, I would strongly suggest at least finishing till the Skypiea arc before reading on. You can continue at your own risk, if you want to.\"]]],[10,2],[1,\"h1\",[[0,[],0,\"What made Skypiea special\"]]],[1,\"h2\",[[0,[],0,\"The build up gives us mysteries to ponder over\"]]],[1,\"p\",[[0,[],0,\"The Sky Island saga is build up of two arcs - Jaya arc and Skypiea arc. Though Skypiea is where all the thrill happens, it is the Jaya arc which I appreciate the most. I will just highlight a few points here,\"]]],[1,\"h3\",[[0,[],0,\"Lot of major character introductions \"]]],[1,\"p\",[[0,[],0,\"First comes Robin aka \"],[0,[3],1,\"Miss All Sunday\"],[0,[],0,\", the villain from the Alabasta arc and Crocodile's second in command (I guess). For the first time, we see an antagonist willingly switching sides and getting into the main crew. Though her introduction and initial interaction with the crew members is hilarious, there's still an air of mystery around her. An archeologist and an assassin with a bounty of 79 million berries at a mere age of eight, she's definitely one of the most powerful crew members whose true strength is yet to be revealed.\"]]],[1,\"p\",[[0,[],0,\"Then comes the revelations of the most interesting pirate group in the entire One Piece universe. An amazing sniper who manages to shoot down a bird not even visible to human eye, a mad wrestler who plummets even the most hardened pirates on the island, an old sick man who offers explosive apples to people, and a big fat guy who talks about fate and shares Luffy's idea of pursuing dreams and not giving up. Who would know these guys would dramatically change the entire course of the One Piece world in future?\"]]],[1,\"p\",[[0,[],0,\"We further get to know about a guy named Montblanc Noland. He was a botanist and an adventurer who had explored the whole world. His adventures were so thrilling and captivating that it was difficult to tell apart whether he was lying or not. His death is also one of the most tragic ones wherein he gets executed by his king for lying about the gold treasure on Jaya island. Montblanc Noland would eventually become one of the most referenced characters in the story.\"]]],[1,\"h3\",[[0,[],0,\"Geographical phenomena\"]]],[1,\"p\",[[0,[],0,\"In the entire series so far, no arc has ever explored so much about the geographical aspects of the One Piece world than this one. Let's talk about a few of these concepts.\"]]],[3,\"ul\",[[[0,[2],1,\"Knock-up streams:\"],[0,[],0,\" When water pockets trapped under sea heat up due to geothermal heat, it boils and once enough pressure accumulates, it causes a violent undersea explosion. The impact can propagate to the surface and shoot huge water column into the sky. I loved this simple explanation for such a fictional phenomenon and it looks plausible.\"]],[[0,[2],1,\"Island clouds:\"],[0,[],0,\" When a sea stone element is trapped inside water vapor, it forms island cloud. Depending on its density, it either forms an island cloud or a sea cloud. The fact that it contains sea stone element makes up a good explanation why these clouds are sturdy enough to bear the weight of the sky islands and also why devil fruit users feel powerless when they \\\"drown\\\" in the sea cloud.\"]],[[0,[],0,\"Sky island biology: Owing to far lesser air pressure, any being coming from the ground experiences initial difficulties especially adjusting to this new environment. Also, beings on Jaya which landed on Sky Island four hundred years back got adapted to this new and thinner atmosphere and instead got inflated.\"]]]],[1,\"h3\",[[0,[],0,\"Lots of areas are left open to be explored afterwards\"]]],[1,\"p\",[[0,[],0,\"Jaya\"],[1,[],0,0],[0,[],0,\"Getting into the clouds\"],[1,[],0,1],[0,[],0,\"Exploration\"]]]]}","created_at_ts":1559753488289,"created_at":"2019-06-05 16:51:28"},{"id":"5cf7f313e3cecf1d3b1cfe2b","post_id":"5c0c1e7aabc169173fada4ca","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=2sdORk7V-Do\",\"html\":\"<iframe width=\\\"480\\\" height=\\\"270\\\" src=\\\"https://www.youtube.com/embed/2sdORk7V-Do?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\",\"type\":\"video\",\"caption\":\"Craftsdwarf's video highlights one the core reasons why Skypiea is so amazing\"}],[\"hr\",{}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.youtube.com/channel/UCMG_DhlUf6UXgSaFfS6JD1g\"]],[\"a\",[\"href\",\"https://www.youtube.com/watch?v=2sdORk7V-Do\"]],[\"strong\"],[\"em\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Have you ever read a fantasy story which was so amazing that you regretted not being a part of? For me, it's Skypiea from One Piece.\"]]],[1,\"p\",[[0,[],0,\"I am fan of J. R. R. Tolkien and his world building prowess. If you thought Lord of the Rings was detailed enough, wait until you read Silmarillion which talks about creation of Arda (the world of LOTR), its mythology, revelations of mighty characters and their lineages (House of Beor, Noldorian elves, Numenors, etc.), history of all evil (Morgoth, Balrogs, Dragons, etc.) and the consequential story of the Silmarils. I was always in awe with the depth as well as the breadth of Tolkien's work. Then, around 3 years back, I started watching One Piece by Eiichiro Oda. I wasn't impressed at first but, after the Arlong Park arc, I began to acknowledge the character building and story telling in One Piece.\"]]],[1,\"p\",[[0,[],0,\"Then came Skypiea. I still consider it as Oda's finest work in terms of world building. You can check out \"],[0,[0],1,\"Craftsdwarf\"],[0,[],0,\"'s \"],[0,[1],1,\"video\"],[0,[],0,\" which delineates how impressively Skypiea was constructed.\"]]],[10,0],[1,\"p\",[[0,[],0,\"I will discuss this in two parts. First I will explain what makes this one so special and second, I will highlight a few amazing moments from the arcs.\"]]],[10,1],[1,\"blockquote\",[[0,[2],1,\"SPOILER ALERT:\"],[0,[],0,\" I will be exploring a lot of One Piece content. If you have never watched One Piece before, I would strongly suggest at least finishing till the Skypiea arc before reading on. You can continue at your own risk, if you want to.\"]]],[10,2],[1,\"h1\",[[0,[],0,\"What made Skypiea special\"]]],[1,\"h2\",[[0,[],0,\"The build up gives us mysteries to ponder over\"]]],[1,\"p\",[[0,[],0,\"The Sky Island saga is build up of two arcs - Jaya arc and Skypiea arc. Though Skypiea is where all the thrill happens, it is the Jaya arc which I appreciate the most. I will just highlight a few points here,\"]]],[1,\"h3\",[[0,[],0,\"Lot of major character introductions \"]]],[1,\"p\",[[0,[],0,\"First comes Robin aka \"],[0,[3],1,\"Miss All Sunday\"],[0,[],0,\", the villain from the Alabasta arc and Crocodile's second in command (I guess). For the first time, we see an antagonist willingly switching sides and getting into the main crew. Though her introduction and initial interaction with the crew members is hilarious, there's still an air of mystery around her. An archeologist and an assassin with a bounty of 79 million berries at a mere age of eight, she's definitely one of the most powerful crew members whose true strength is yet to be revealed.\"]]],[1,\"p\",[[0,[],0,\"Then comes the revelations of the most interesting pirate group in the entire One Piece universe. An amazing sniper who manages to shoot down a bird not even visible to human eye, a mad wrestler who plummets even the most hardened pirates on the island, an old sick man who offers explosive apples to people, and a big fat guy who talks about fate and shares Luffy's idea of pursuing dreams and not giving up. Who would know these guys would dramatically change the entire course of the One Piece world in future?\"]]],[1,\"p\",[[0,[],0,\"We further get to know about a guy named Montblanc Noland. He was a botanist and an adventurer who had explored the whole world. His adventures were so thrilling and captivating that it was difficult to tell apart whether he was lying or not. His death is also one of the most tragic ones wherein he gets executed by his king for lying about the gold treasure on Jaya island. Montblanc Noland would eventually become one of the most referenced characters in the story.\"]]],[1,\"h3\",[[0,[],0,\"Geographical phenomena\"]]],[1,\"p\",[[0,[],0,\"In the entire series so far, no arc has ever explored so much about the geographical aspects of the One Piece world than this one. Let's talk about a few of these concepts.\"]]],[3,\"ul\",[[[0,[2],1,\"Knock-up streams:\"],[0,[],0,\" When water pockets trapped under sea heat up due to geothermal heat, it boils and once enough pressure accumulates, it causes a violent undersea explosion. The impact can propagate to the surface and shoot huge water column into the sky. I loved this simple explanation for such a fictional phenomenon and it looks plausible.\"]],[[0,[2],1,\"Island clouds:\"],[0,[],0,\" When a sea stone element is trapped inside water vapor, it forms island cloud. Depending on its density, it either forms an island cloud or a sea cloud. The fact that it contains sea stone element makes up a good explanation why these clouds are sturdy enough to bear the weight of the sky islands and also why devil fruit users feel powerless when they \\\"drown\\\" in the sea cloud.\"]],[[0,[2],1,\"Sky island biology:\"],[0,[],0,\" Owing to far lesser air pressure, any being coming from the ground experiences initial difficulties especially adjusting to this new environment. Also, beings on Jaya which landed on Sky Island four hundred years back got adapted to this new and thinner atmosphere and instead got inflated.\"]]]],[1,\"h3\",[[0,[],0,\"Lots of areas are left open to be explored afterwards\"]]],[1,\"p\",[[0,[],0,\"Jaya\"],[1,[],0,0],[0,[],0,\"Getting into the clouds\"],[1,[],0,1],[0,[],0,\"Exploration\"]]]]}","created_at_ts":1559753491364,"created_at":"2019-06-05 16:51:31"},{"id":"5cf7f31ae3cecf1d3b1cfe2d","post_id":"5c0c1e7aabc169173fada4ca","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=2sdORk7V-Do\",\"html\":\"<iframe width=\\\"480\\\" height=\\\"270\\\" src=\\\"https://www.youtube.com/embed/2sdORk7V-Do?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\",\"type\":\"video\",\"caption\":\"Craftsdwarf's video highlights one the core reasons why Skypiea is so amazing\"}],[\"hr\",{}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.youtube.com/channel/UCMG_DhlUf6UXgSaFfS6JD1g\"]],[\"a\",[\"href\",\"https://www.youtube.com/watch?v=2sdORk7V-Do\"]],[\"strong\"],[\"em\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Have you ever read a fantasy story which was so amazing that you regretted not being a part of? For me, it's Skypiea from One Piece.\"]]],[1,\"p\",[[0,[],0,\"I am fan of J. R. R. Tolkien and his world building prowess. If you thought Lord of the Rings was detailed enough, wait until you read Silmarillion which talks about creation of Arda (the world of LOTR), its mythology, revelations of mighty characters and their lineages (House of Beor, Noldorian elves, Numenors, etc.), history of all evil (Morgoth, Balrogs, Dragons, etc.) and the consequential story of the Silmarils. I was always in awe with the depth as well as the breadth of Tolkien's work. Then, around 3 years back, I started watching One Piece by Eiichiro Oda. I wasn't impressed at first but, after the Arlong Park arc, I began to acknowledge the character building and story telling in One Piece.\"]]],[1,\"p\",[[0,[],0,\"Then came Skypiea. I still consider it as Oda's finest work in terms of world building. You can check out \"],[0,[0],1,\"Craftsdwarf\"],[0,[],0,\"'s \"],[0,[1],1,\"video\"],[0,[],0,\" which delineates how impressively Skypiea was constructed.\"]]],[10,0],[1,\"p\",[[0,[],0,\"I will discuss this in two parts. First I will explain what makes this one so special and second, I will highlight a few amazing moments from the arcs.\"]]],[10,1],[1,\"blockquote\",[[0,[2],1,\"SPOILER ALERT:\"],[0,[],0,\" I will be exploring a lot of One Piece content. If you have never watched One Piece before, I would strongly suggest at least finishing till the Skypiea arc before reading on. You can continue at your own risk, if you want to.\"]]],[10,2],[1,\"h1\",[[0,[],0,\"What made Skypiea special\"]]],[1,\"h2\",[[0,[],0,\"The build up gives us mysteries to ponder over\"]]],[1,\"p\",[[0,[],0,\"The Sky Island saga is build up of two arcs - Jaya arc and Skypiea arc. Though Skypiea is where all the thrill happens, it is the Jaya arc which I appreciate the most. I will just highlight a few points here,\"]]],[1,\"h3\",[[0,[],0,\"Lot of major character introductions \"]]],[1,\"p\",[[0,[],0,\"First comes Robin aka \"],[0,[3],1,\"Miss All Sunday\"],[0,[],0,\", the villain from the Alabasta arc and Crocodile's second in command (I guess). For the first time, we see an antagonist willingly switching sides and getting into the main crew. Though her introduction and initial interaction with the crew members is hilarious, there's still an air of mystery around her. An archeologist and an assassin with a bounty of 79 million berries at a mere age of eight, she's definitely one of the most powerful crew members whose true strength is yet to be revealed.\"]]],[1,\"p\",[[0,[],0,\"Then comes the revelations of the most interesting pirate group in the entire One Piece universe. An amazing sniper who manages to shoot down a bird not even visible to human eye, a mad wrestler who plummets even the most hardened pirates on the island, an old sick man who offers explosive apples to people, and a big fat guy who talks about fate and shares Luffy's idea of pursuing dreams and not giving up. Who would know these guys would dramatically change the entire course of the One Piece world in future?\"]]],[1,\"p\",[[0,[],0,\"We further get to know about a guy named Montblanc Noland. He was a botanist and an adventurer who had explored the whole world. His adventures were so thrilling and captivating that it was difficult to tell apart whether he was lying or not. His death is also one of the most tragic ones wherein he gets executed by his king for lying about the gold treasure on Jaya island. Montblanc Noland would eventually become one of the most referenced characters in the story.\"]]],[1,\"h3\",[[0,[],0,\"Geographical phenomena\"]]],[1,\"p\",[[0,[],0,\"In the entire series so far, no arc has ever explored so much about the geographical aspects of the One Piece world than this one. Let's talk about a few of these concepts.\"]]],[3,\"ul\",[[[0,[2],1,\"Knock-up streams:\"],[0,[],0,\" When water pockets trapped under sea heat up due to geothermal heat, it boils and once enough pressure accumulates, it causes a violent undersea explosion. The impact can propagate to the surface and shoot huge water column into the sky. I loved this simple explanation for such a fictional phenomenon and it looks plausible.\"]],[[0,[2],1,\"Island clouds:\"],[0,[],0,\" When a sea stone element is trapped inside water vapor, it forms island cloud. Depending on its density, it either forms an island cloud or a sea cloud. The fact that it contains sea stone element makes up a good explanation why these clouds are sturdy enough to bear the weight of the sky islands and also why devil fruit users feel powerless when they \\\"drown\\\" in the sea cloud.\"]],[[0,[2],1,\"Sky island biology:\"],[0,[],0,\" Owing to far lesser air pressure, any being coming from the ground experiences initial difficulties especially adjusting to this new environment. Also, beings on Jaya which landed on Sky Island four hundred years back got adapted to this new and thinner atmosphere and instead got inflated.\"]],[]]],[1,\"h3\",[[0,[],0,\"Lots of areas are left open to be explored afterwards\"]]],[1,\"p\",[[0,[],0,\"Jaya\"],[1,[],0,0],[0,[],0,\"Getting into the clouds\"],[1,[],0,1],[0,[],0,\"Exploration\"]]]]}","created_at_ts":1559753498497,"created_at":"2019-06-05 16:51:38"},{"id":"5cf7f494e3cecf1d3b1cfe2f","post_id":"5c0c1e7aabc169173fada4ca","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=2sdORk7V-Do\",\"html\":\"<iframe width=\\\"480\\\" height=\\\"270\\\" src=\\\"https://www.youtube.com/embed/2sdORk7V-Do?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\",\"type\":\"video\",\"caption\":\"Craftsdwarf's video highlights one the core reasons why Skypiea is so amazing\"}],[\"hr\",{}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.youtube.com/channel/UCMG_DhlUf6UXgSaFfS6JD1g\"]],[\"a\",[\"href\",\"https://www.youtube.com/watch?v=2sdORk7V-Do\"]],[\"strong\"],[\"em\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Have you ever read a fantasy story which was so amazing that you regretted not being a part of? For me, it's Skypiea from One Piece.\"]]],[1,\"p\",[[0,[],0,\"I am fan of J. R. R. Tolkien and his world building prowess. If you thought Lord of the Rings was detailed enough, wait until you read Silmarillion which talks about creation of Arda (the world of LOTR), its mythology, revelations of mighty characters and their lineages (House of Beor, Noldorian elves, Numenors, etc.), history of all evil (Morgoth, Balrogs, Dragons, etc.) and the consequential story of the Silmarils. I was always in awe with the depth as well as the breadth of Tolkien's work. Then, around 3 years back, I started watching One Piece by Eiichiro Oda. I wasn't impressed at first but, after the Arlong Park arc, I began to acknowledge the character building and story telling in One Piece.\"]]],[1,\"p\",[[0,[],0,\"Then came Skypiea. I still consider it as Oda's finest work in terms of world building. You can check out \"],[0,[0],1,\"Craftsdwarf\"],[0,[],0,\"'s \"],[0,[1],1,\"video\"],[0,[],0,\" which delineates how impressively Skypiea was constructed.\"]]],[10,0],[1,\"p\",[[0,[],0,\"I will discuss this in two parts. First I will explain what makes this one so special and second, I will highlight a few amazing moments from the arcs.\"]]],[10,1],[1,\"blockquote\",[[0,[2],1,\"SPOILER ALERT:\"],[0,[],0,\" I will be exploring a lot of One Piece content. If you have never watched One Piece before, I would strongly suggest at least finishing till the Skypiea arc before reading on. You can continue at your own risk, if you want to.\"]]],[10,2],[1,\"h1\",[[0,[],0,\"What made Skypiea special\"]]],[1,\"h2\",[[0,[],0,\"The build up gives us mysteries to ponder over\"]]],[1,\"p\",[[0,[],0,\"The Sky Island saga is build up of two arcs - Jaya arc and Skypiea arc. Though Skypiea is where all the thrill happens, it is the Jaya arc which I appreciate the most. I will just highlight a few points here,\"]]],[1,\"h3\",[[0,[],0,\"Lot of major character introductions \"]]],[1,\"p\",[[0,[],0,\"First comes Robin aka \"],[0,[3],1,\"Miss All Sunday\"],[0,[],0,\", the villain from the Alabasta arc and Crocodile's second in command (I guess). For the first time, we see an antagonist willingly switching sides and getting into the main crew. Though her introduction and initial interaction with the crew members is hilarious, there's still an air of mystery around her. An archeologist and an assassin with a bounty of 79 million berries at a mere age of eight, she's definitely one of the most powerful crew members whose true strength is yet to be revealed.\"]]],[1,\"p\",[[0,[],0,\"Then comes the revelations of the most interesting pirate group in the entire One Piece universe. An amazing sniper who manages to shoot down a bird not even visible to human eye, a mad wrestler who plummets even the most hardened pirates on the island, an old sick man who offers explosive apples to people, and a big fat guy who talks about fate and shares Luffy's idea of pursuing dreams and not giving up. Who would know these guys would dramatically change the entire course of the One Piece world in future?\"]]],[1,\"p\",[[0,[],0,\"We further get to know about a guy named Montblanc Noland. He was a botanist and an adventurer who had explored the whole world. His adventures were so thrilling and captivating that it was difficult to tell apart whether he was lying or not. His death is also one of the most tragic ones wherein he gets executed by his king for lying about the gold treasure on Jaya island. Montblanc Noland would eventually become one of the most referenced characters in the story.\"]]],[1,\"h3\",[[0,[],0,\"Geographical phenomena\"]]],[1,\"p\",[[0,[],0,\"In the entire series so far, no arc has ever explored so much about the geographical aspects of the One Piece world than this one. Let's talk about a few of these concepts.\"]]],[3,\"ul\",[[[0,[2],1,\"Knock-up streams:\"],[0,[],0,\" When water pockets trapped under sea heat up due to geothermal heat, it boils and once enough pressure accumulates, it causes a violent undersea explosion. The impact can propagate to the surface and shoot huge water column into the sky. I loved this simple explanation for such a fictional phenomenon and it looks plausible.\"]],[[0,[2],1,\"Island clouds:\"],[0,[],0,\" When a sea stone element is trapped inside water vapor, it forms island cloud. Depending on its density, it either forms an island cloud or a sea cloud. The fact that it contains sea stone element makes up a good explanation why these clouds are sturdy enough to bear the weight of the sky islands and also why devil fruit users feel powerless when they \\\"drown\\\" in the sea cloud.\"]],[[0,[2],1,\"Sky island biology:\"],[0,[],0,\" Owing to far lesser air pressure, any being coming from the ground experiences initial difficulties especially adjusting to this new environment. Also, beings on Jaya which landed on Sky Island four hundred years back got adapted to this new and thinner atmosphere and instead got inflated - birds, fish, trees\"]],[]]],[1,\"h3\",[[0,[],0,\"Lots of areas are left open to be explored afterwards\"]]],[1,\"p\",[[0,[],0,\"Jaya\"],[1,[],0,0],[0,[],0,\"Getting into the clouds\"],[1,[],0,1],[0,[],0,\"Exploration\"]]]]}","created_at_ts":1559753876250,"created_at":"2019-06-05 16:57:56"},{"id":"5cf7f4a4e3cecf1d3b1cfe31","post_id":"5c0c1e7aabc169173fada4ca","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=2sdORk7V-Do\",\"html\":\"<iframe width=\\\"480\\\" height=\\\"270\\\" src=\\\"https://www.youtube.com/embed/2sdORk7V-Do?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\",\"type\":\"video\",\"caption\":\"Craftsdwarf's video highlights one the core reasons why Skypiea is so amazing\"}],[\"hr\",{}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.youtube.com/channel/UCMG_DhlUf6UXgSaFfS6JD1g\"]],[\"a\",[\"href\",\"https://www.youtube.com/watch?v=2sdORk7V-Do\"]],[\"strong\"],[\"em\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Have you ever read a fantasy story which was so amazing that you regretted not being a part of? For me, it's Skypiea from One Piece.\"]]],[1,\"p\",[[0,[],0,\"I am fan of J. R. R. Tolkien and his world building prowess. If you thought Lord of the Rings was detailed enough, wait until you read Silmarillion which talks about creation of Arda (the world of LOTR), its mythology, revelations of mighty characters and their lineages (House of Beor, Noldorian elves, Numenors, etc.), history of all evil (Morgoth, Balrogs, Dragons, etc.) and the consequential story of the Silmarils. I was always in awe with the depth as well as the breadth of Tolkien's work. Then, around 3 years back, I started watching One Piece by Eiichiro Oda. I wasn't impressed at first but, after the Arlong Park arc, I began to acknowledge the character building and story telling in One Piece.\"]]],[1,\"p\",[[0,[],0,\"Then came Skypiea. I still consider it as Oda's finest work in terms of world building. You can check out \"],[0,[0],1,\"Craftsdwarf\"],[0,[],0,\"'s \"],[0,[1],1,\"video\"],[0,[],0,\" which delineates how impressively Skypiea was constructed.\"]]],[10,0],[1,\"p\",[[0,[],0,\"I will discuss this in two parts. First I will explain what makes this one so special and second, I will highlight a few amazing moments from the arcs.\"]]],[10,1],[1,\"blockquote\",[[0,[2],1,\"SPOILER ALERT:\"],[0,[],0,\" I will be exploring a lot of One Piece content. If you have never watched One Piece before, I would strongly suggest at least finishing till the Skypiea arc before reading on. You can continue at your own risk, if you want to.\"]]],[10,2],[1,\"h1\",[[0,[],0,\"What made Skypiea special\"]]],[1,\"h2\",[[0,[],0,\"The build up gives us mysteries to ponder over\"]]],[1,\"p\",[[0,[],0,\"The Sky Island saga is build up of two arcs - Jaya arc and Skypiea arc. Though Skypiea is where all the thrill happens, it is the Jaya arc which I appreciate the most. I will just highlight a few points here,\"]]],[1,\"h3\",[[0,[],0,\"Lot of major character introductions \"]]],[1,\"p\",[[0,[],0,\"First comes Robin aka \"],[0,[3],1,\"Miss All Sunday\"],[0,[],0,\", the villain from the Alabasta arc and Crocodile's second in command (I guess). For the first time, we see an antagonist willingly switching sides and getting into the main crew. Though her introduction and initial interaction with the crew members is hilarious, there's still an air of mystery around her. An archeologist and an assassin with a bounty of 79 million berries at a mere age of eight, she's definitely one of the most powerful crew members whose true strength is yet to be revealed.\"]]],[1,\"p\",[[0,[],0,\"Then comes the revelations of the most interesting pirate group in the entire One Piece universe. An amazing sniper who manages to shoot down a bird not even visible to human eye, a mad wrestler who plummets even the most hardened pirates on the island, an old sick man who offers explosive apples to people, and a big fat guy who talks about fate and shares Luffy's idea of pursuing dreams and not giving up. Who would know these guys would dramatically change the entire course of the One Piece world in future?\"]]],[1,\"p\",[[0,[],0,\"We further get to know about a guy named Montblanc Noland. He was a botanist and an adventurer who had explored the whole world. His adventures were so thrilling and captivating that it was difficult to tell apart whether he was lying or not. His death is also one of the most tragic ones wherein he gets executed by his king for lying about the gold treasure on Jaya island. Montblanc Noland would eventually become one of the most referenced characters in the story.\"]]],[1,\"h3\",[[0,[],0,\"Geographical phenomena\"]]],[1,\"p\",[[0,[],0,\"In the entire series so far, no arc has ever explored so much about the geographical aspects of the One Piece world than this one. Let's talk about a few of these concepts.\"]]],[3,\"ul\",[[[0,[2],1,\"Knock-up streams:\"],[0,[],0,\" When water pockets trapped under sea heat up due to geothermal heat, it boils and once enough pressure accumulates, it causes a violent undersea explosion. The impact can propagate to the surface and shoot huge water column into the sky. I loved this simple explanation for such a fictional phenomenon and it looks plausible.\"]],[[0,[2],1,\"Island clouds:\"],[0,[],0,\" When a sea stone element is trapped inside water vapor, it forms island cloud. Depending on its density, it either forms an island cloud or a sea cloud. The fact that it contains sea stone element makes up a good explanation why these clouds are sturdy enough to bear the weight of the sky islands and also why devil fruit users feel powerless when they \\\"drown\\\" in the sea cloud.\"]],[[0,[2],1,\"Sky island biology:\"],[0,[],0,\" Owing to far lesser air pressure, any being coming from the ground experiences initial difficulties especially adjusting to this new environment. Also, beings on Jaya which landed on Sky Island four hundred years back got adapted to this new and thinner atmosphere and instead got inflated - birds, fish, trees (though I wonder why the Shandians didn't get big).\"]],[]]],[1,\"h3\",[[0,[],0,\"Lots of areas are left open to be explored afterwards\"]]],[1,\"p\",[[0,[],0,\"Jaya\"],[1,[],0,0],[0,[],0,\"Getting into the clouds\"],[1,[],0,1],[0,[],0,\"Exploration\"]]]]}","created_at_ts":1559753892912,"created_at":"2019-06-05 16:58:12"},{"id":"5d2255d17cd96712d0719037","post_id":"5d22225ae3cecf1d3b1cfe34","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"language\":\"bash\",\"code\":\"take ~/Playground/code-evolution\",\"caption\":\"<code>take</code> is equivalent of <code>mkdir -p $1 &amp;&amp; cd $1</code>\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git init\\ncurl https://gitignore.io/api/flask,python -o .gitignore\"}],[\"code\",{\"language\":\"bash\",\"code\":\"python3 -m venv .venv\\nsource .venv/bin/activate\"}],[\"code\",{\"language\":\"bash\",\"code\":\"pip install flask\\npip freeze > requirements.txt\"}],[\"code\",{\"language\":\"bash\",\"code\":\"cat > README.md <<EOF\\n# Notefy\\nNote sharing for dummies\\n\\n## TODO\\n1. Complete this README\\nEOF\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git add --all\\ngit commit -m 'Setup project with core dependencies and README'\"}]],\"markups\":[[\"code\"],[\"a\",[\"href\",\"https://gitignore.io\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"We'll be building the server side implementation of a simple note sharing app, which would have the following features,\"]]],[3,\"ol\",[[[0,[],0,\"A note is just a text where the first line (limited to first 50 characters) is the note title\"]],[[0,[],0,\"You (user) can create, edit, delete and view notes that you created\"]],[[0,[],0,\"You can set the visibility of these notes to public (anyone can read), shared (only people with whom the note is shared can read) or private (only you can read)\"]]]],[1,\"p\",[[0,[],0,\"I'll be using Python for building this app. \"]]],[1,\"p\",[[0,[],0,\"However, in whatever step our project is, we will always ensure that,\"]]],[3,\"ol\",[[[0,[],0,\"Our code remains readable\"]],[[0,[],0,\"Our commits and commit messages are complete\"]]]],[1,\"h1\",[[0,[],0,\"0. Project setup\"]]],[1,\"p\",[[0,[],0,\"Let's create our project directory first\"]]],[10,0],[1,\"p\",[[0,[],0,\"We'll initialize our Git repository and copy an auto-generated \"],[0,[0],1,\".gitignore\"],[0,[],0,\" file from \"],[0,[1],1,\"gitignore.io\"]]],[10,1],[1,\"p\",[[0,[],0,\"Create a Python virtual environment for our project\"]]],[10,2],[1,\"p\",[[0,[],0,\"Install Flask\"]]],[10,3],[1,\"p\",[[0,[],0,\"Add a simple \"],[0,[0],1,\"README.md\"]]],[10,4],[1,\"p\",[[0,[],0,\"Make our first commit\"]]],[10,5],[1,\"h1\",[]]]}","created_at_ts":1562531281545,"created_at":"2019-07-07 20:28:01"},{"id":"5d2255f37cd96712d0719039","post_id":"5d22225ae3cecf1d3b1cfe34","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"language\":\"bash\",\"code\":\"take ~/Playground/code-evolution\",\"caption\":\"<code>take</code> is equivalent of <code>mkdir -p $1 &amp;&amp; cd $1</code>\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git init\\ncurl https://gitignore.io/api/flask,python -o .gitignore\"}],[\"code\",{\"language\":\"bash\",\"code\":\"python3 -m venv .venv\\nsource .venv/bin/activate\"}],[\"code\",{\"language\":\"bash\",\"code\":\"pip install flask\\npip freeze > requirements.txt\"}],[\"code\",{\"language\":\"bash\",\"code\":\"cat > README.md <<EOF\\n# Notefy\\nNote sharing for dummies\\n\\n## TODO\\n1. Complete this README\\nEOF\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git add --all\\ngit commit -m 'Setup project with core dependencies and README'\"}]],\"markups\":[[\"code\"],[\"a\",[\"href\",\"https://gitignore.io\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"We'll be building the server side implementation of a simple note sharing app, which would have the following features,\"]]],[3,\"ol\",[[[0,[],0,\"A note is just a text where the first line (limited to first 50 characters) is the note title\"]],[[0,[],0,\"You (user) can create, edit, delete and view notes that you created\"]],[[0,[],0,\"You can set the visibility of these notes to public (anyone can read), shared (only people with whom the note is shared can read) or private (only you can read)\"]]]],[1,\"p\",[[0,[],0,\"I'll be using Python for building this app. \"]]],[1,\"p\",[[0,[],0,\"However, in whatever step our project is, we will always ensure that,\"]]],[3,\"ol\",[[[0,[],0,\"Our code remains readable\"]],[[0,[],0,\"Our commits and commit messages are complete\"]]]],[1,\"h1\",[[0,[],0,\"0. Project setup\"]]],[1,\"p\",[[0,[],0,\"Let's create our project directory first\"]]],[10,0],[1,\"p\",[[0,[],0,\"We'll initialize our Git repository and copy an auto-generated \"],[0,[0],1,\".gitignore\"],[0,[],0,\" file from \"],[0,[1],1,\"gitignore.io\"]]],[10,1],[1,\"p\",[[0,[],0,\"Create a Python virtual environment for our project\"]]],[10,2],[1,\"p\",[[0,[],0,\"Install Flask\"]]],[10,3],[1,\"p\",[[0,[],0,\"Add a simple \"],[0,[0],1,\"README.md\"]]],[10,4],[1,\"p\",[[0,[],0,\"Make our first commit\"]]],[10,5],[1,\"h1\",[[0,[],0,\"Create a simple CRUD API for handling notes\"]]],[1,\"p\",[]]]}","created_at_ts":1562531315174,"created_at":"2019-07-07 20:28:35"},{"id":"5d2255fc7cd96712d071903b","post_id":"5d22225ae3cecf1d3b1cfe34","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"language\":\"bash\",\"code\":\"take ~/Playground/code-evolution\",\"caption\":\"<code>take</code> is equivalent of <code>mkdir -p $1 &amp;&amp; cd $1</code>\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git init\\ncurl https://gitignore.io/api/flask,python -o .gitignore\"}],[\"code\",{\"language\":\"bash\",\"code\":\"python3 -m venv .venv\\nsource .venv/bin/activate\"}],[\"code\",{\"language\":\"bash\",\"code\":\"pip install flask\\npip freeze > requirements.txt\"}],[\"code\",{\"language\":\"bash\",\"code\":\"cat > README.md <<EOF\\n# Notefy\\nNote sharing for dummies\\n\\n## TODO\\n1. Complete this README\\nEOF\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git add --all\\ngit commit -m 'Setup project with core dependencies and README'\"}]],\"markups\":[[\"code\"],[\"a\",[\"href\",\"https://gitignore.io\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"We'll be building the server side implementation of a simple note sharing app, which would have the following features,\"]]],[3,\"ol\",[[[0,[],0,\"A note is just a text where the first line (limited to first 50 characters) is the note title\"]],[[0,[],0,\"You (user) can create, edit, delete and view notes that you created\"]],[[0,[],0,\"You can set the visibility of these notes to public (anyone can read), shared (only people with whom the note is shared can read) or private (only you can read)\"]]]],[1,\"p\",[[0,[],0,\"I'll be using Python for building this app. \"]]],[1,\"p\",[[0,[],0,\"However, in whatever step our project is, we will always ensure that,\"]]],[3,\"ol\",[[[0,[],0,\"Our code remains readable\"]],[[0,[],0,\"Our commits and commit messages are complete\"]]]],[1,\"h1\",[[0,[],0,\"0. Project setup\"]]],[1,\"p\",[[0,[],0,\"Let's create our project directory first\"]]],[10,0],[1,\"p\",[[0,[],0,\"We'll initialize our Git repository and copy an auto-generated \"],[0,[0],1,\".gitignore\"],[0,[],0,\" file from \"],[0,[1],1,\"gitignore.io\"]]],[10,1],[1,\"p\",[[0,[],0,\"Create a Python virtual environment for our project\"]]],[10,2],[1,\"p\",[[0,[],0,\"Install Flask\"]]],[10,3],[1,\"p\",[[0,[],0,\"Add a simple \"],[0,[0],1,\"README.md\"]]],[10,4],[1,\"p\",[[0,[],0,\"Make our first commit\"]]],[10,5],[1,\"h1\",[[0,[],0,\"Create a simple CRUD API for handling notes\"]]]]}","created_at_ts":1562531324260,"created_at":"2019-07-07 20:28:44"},{"id":"5d226c567cd96712d071903d","post_id":"5d22225ae3cecf1d3b1cfe34","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"language\":\"bash\",\"code\":\"take ~/Playground/code-evolution\",\"caption\":\"<code>take</code> is equivalent of <code>mkdir -p $1 &amp;&amp; cd $1</code>\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git init\\ncurl https://gitignore.io/api/flask,python -o .gitignore\"}],[\"code\",{\"language\":\"bash\",\"code\":\"python3 -m venv .venv\\nsource .venv/bin/activate\"}],[\"code\",{\"language\":\"bash\",\"code\":\"pip install flask\\npip freeze > requirements.txt\"}],[\"code\",{\"language\":\"bash\",\"code\":\"cat > README.md <<EOF\\n# Notefy\\nNote sharing for dummies\\n\\n## TODO\\n1. Complete this README\\nEOF\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git add --all\\ngit commit -m 'Setup project with core dependencies and README'\"}]],\"markups\":[[\"code\"],[\"a\",[\"href\",\"https://gitignore.io\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"We'll be building the server side implementation of a simple note sharing app, which would have the following features,\"]]],[3,\"ol\",[[[0,[],0,\"A note is just a text where the first line (limited to first 50 characters) is the note title\"]],[[0,[],0,\"You (user) can create, edit, delete and view notes that you created\"]],[[0,[],0,\"You can set the visibility of these notes to public (anyone can read), shared (only people with whom the note is shared can read) or private (only you can read)\"]]]],[1,\"p\",[[0,[],0,\"I'll be using Python for building this app. \"]]],[1,\"p\",[[0,[],0,\"However, in whatever step our project is, we will always ensure that,\"]]],[3,\"ol\",[[[0,[],0,\"Our code remains readable\"]],[[0,[],0,\"Our commits and commit messages are complete\"]]]],[1,\"h1\",[[0,[],0,\"0. Project setup\"]]],[1,\"p\",[[0,[],0,\"Let's create our project directory first\"]]],[10,0],[1,\"p\",[[0,[],0,\"We'll initialize our Git repository and copy an auto-generated \"],[0,[0],1,\".gitignore\"],[0,[],0,\" file from \"],[0,[1],1,\"gitignore.io\"]]],[10,1],[1,\"p\",[[0,[],0,\"Create a Python virtual environment for our project\"]]],[10,2],[1,\"p\",[[0,[],0,\"Install Flask\"]]],[10,3],[1,\"p\",[[0,[],0,\"Add a simple \"],[0,[0],1,\"README.md\"]]],[10,4],[1,\"p\",[[0,[],0,\"Make our first commit\"]]],[10,5],[1,\"h1\",[]]]}","created_at_ts":1562537046728,"created_at":"2019-07-07 22:04:06"},{"id":"5d226c657cd96712d071903f","post_id":"5d22225ae3cecf1d3b1cfe34","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"language\":\"bash\",\"code\":\"take ~/Playground/code-evolution\",\"caption\":\"<code>take</code> is equivalent of <code>mkdir -p $1 &amp;&amp; cd $1</code>\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git init\\ncurl https://gitignore.io/api/flask,python -o .gitignore\"}],[\"code\",{\"language\":\"bash\",\"code\":\"python3 -m venv .venv\\nsource .venv/bin/activate\"}],[\"code\",{\"language\":\"bash\",\"code\":\"pip install flask\\npip freeze > requirements.txt\"}],[\"code\",{\"language\":\"bash\",\"code\":\"cat > README.md <<EOF\\n# Notefy\\nNote sharing for dummies\\n\\n## TODO\\n1. Complete this README\\nEOF\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git add --all\\ngit commit -m 'Setup project with core dependencies and README'\"}]],\"markups\":[[\"code\"],[\"a\",[\"href\",\"https://gitignore.io\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"We'll be building the server side implementation of a simple note sharing app, which would have the following features,\"]]],[3,\"ol\",[[[0,[],0,\"A note is just a text where the first line (limited to first 50 characters) is the note title\"]],[[0,[],0,\"You (user) can create, edit, delete and view notes that you created\"]],[[0,[],0,\"You can set the visibility of these notes to public (anyone can read), shared (only people with whom the note is shared can read) or private (only you can read)\"]]]],[1,\"p\",[[0,[],0,\"I'll be using Python for building this app. \"]]],[1,\"p\",[[0,[],0,\"However, in whatever step our project is, we will always ensure that,\"]]],[3,\"ol\",[[[0,[],0,\"Our code remains readable\"]],[[0,[],0,\"Our commits and commit messages are complete\"]]]],[1,\"h1\",[[0,[],0,\"0. Project setup\"]]],[1,\"p\",[[0,[],0,\"Let's create our project directory first\"]]],[10,0],[1,\"p\",[[0,[],0,\"We'll initialize our Git repository and copy an auto-generated \"],[0,[0],1,\".gitignore\"],[0,[],0,\" file from \"],[0,[1],1,\"gitignore.io\"]]],[10,1],[1,\"p\",[[0,[],0,\"Create a Python virtual environment for our project\"]]],[10,2],[1,\"p\",[[0,[],0,\"Install Flask\"]]],[10,3],[1,\"p\",[[0,[],0,\"Add a simple \"],[0,[0],1,\"README.md\"]]],[10,4],[1,\"p\",[[0,[],0,\"Make our first commit\"]]],[10,5],[1,\"h1\",[[0,[],0,\"MVP 1: Simple CRUD API for notes\"]]]]}","created_at_ts":1562537061285,"created_at":"2019-07-07 22:04:21"},{"id":"5d226c6e7cd96712d0719041","post_id":"5d22225ae3cecf1d3b1cfe34","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"language\":\"bash\",\"code\":\"take ~/Playground/code-evolution\",\"caption\":\"<code>take</code> is equivalent of <code>mkdir -p $1 &amp;&amp; cd $1</code>\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git init\\ncurl https://gitignore.io/api/flask,python -o .gitignore\"}],[\"code\",{\"language\":\"bash\",\"code\":\"python3 -m venv .venv\\nsource .venv/bin/activate\"}],[\"code\",{\"language\":\"bash\",\"code\":\"pip install flask\\npip freeze > requirements.txt\"}],[\"code\",{\"language\":\"bash\",\"code\":\"cat > README.md <<EOF\\n# Notefy\\nNote sharing for dummies\\n\\n## TODO\\n1. Complete this README\\nEOF\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git add --all\\ngit commit -m 'Setup project with core dependencies and README'\"}]],\"markups\":[[\"code\"],[\"a\",[\"href\",\"https://gitignore.io\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"We'll be building the server side implementation of a simple note sharing app, which would have the following features,\"]]],[3,\"ol\",[[[0,[],0,\"A note is just a text where the first line (limited to first 50 characters) is the note title\"]],[[0,[],0,\"You (user) can create, edit, delete and view notes that you created\"]],[[0,[],0,\"You can set the visibility of these notes to public (anyone can read), shared (only people with whom the note is shared can read) or private (only you can read)\"]]]],[1,\"p\",[[0,[],0,\"I'll be using Python for building this app. \"]]],[1,\"p\",[[0,[],0,\"However, in whatever step our project is, we will always ensure that,\"]]],[3,\"ol\",[[[0,[],0,\"Our code remains readable\"]],[[0,[],0,\"Our commits and commit messages are complete\"]]]],[1,\"h1\",[[0,[],0,\"0. Project setup\"]]],[1,\"p\",[[0,[],0,\"Let's create our project directory first\"]]],[10,0],[1,\"p\",[[0,[],0,\"We'll initialize our Git repository and copy an auto-generated \"],[0,[0],1,\".gitignore\"],[0,[],0,\" file from \"],[0,[1],1,\"gitignore.io\"]]],[10,1],[1,\"p\",[[0,[],0,\"Create a Python virtual environment for our project\"]]],[10,2],[1,\"p\",[[0,[],0,\"Install Flask\"]]],[10,3],[1,\"p\",[[0,[],0,\"Add a simple \"],[0,[0],1,\"README.md\"]]],[10,4],[1,\"p\",[[0,[],0,\"Make our first commit\"]]],[10,5],[1,\"h1\",[[0,[],0,\"MVP 1: Simple CRUD API for notes\"]]],[1,\"p\",[[0,[],0,\"Our first MVP would be to \"]]]]}","created_at_ts":1562537070956,"created_at":"2019-07-07 22:04:30"},{"id":"5d226c947cd96712d0719043","post_id":"5d22225ae3cecf1d3b1cfe34","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"language\":\"bash\",\"code\":\"take ~/Playground/code-evolution\",\"caption\":\"<code>take</code> is equivalent of <code>mkdir -p $1 &amp;&amp; cd $1</code>\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git init\\ncurl https://gitignore.io/api/flask,python -o .gitignore\"}],[\"code\",{\"language\":\"bash\",\"code\":\"python3 -m venv .venv\\nsource .venv/bin/activate\"}],[\"code\",{\"language\":\"bash\",\"code\":\"pip install flask\\npip freeze > requirements.txt\"}],[\"code\",{\"language\":\"bash\",\"code\":\"cat > README.md <<EOF\\n# Notefy\\nNote sharing for dummies\\n\\n## TODO\\n1. Complete this README\\nEOF\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git add --all\\ngit commit -m 'Setup project with core dependencies and README'\"}]],\"markups\":[[\"code\"],[\"a\",[\"href\",\"https://gitignore.io\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"We'll be building the server side implementation of a simple note sharing app, which would have the following features,\"]]],[3,\"ol\",[[[0,[],0,\"A note is just a text where the first line (limited to first 50 characters) is the note title\"]],[[0,[],0,\"You (user) can create, edit, delete and view notes that you created\"]],[[0,[],0,\"You can set the visibility of these notes to public (anyone can read), shared (only people with whom the note is shared can read) or private (only you can read)\"]]]],[1,\"p\",[[0,[],0,\"I'll be using Python for building this app. \"]]],[1,\"p\",[[0,[],0,\"However, in whatever step our project is, we will always ensure that,\"]]],[3,\"ol\",[[[0,[],0,\"Our code remains readable\"]],[[0,[],0,\"Our commits and commit messages are complete\"]]]],[1,\"h1\",[[0,[],0,\"0. Project setup\"]]],[1,\"p\",[[0,[],0,\"Let's create our project directory first\"]]],[10,0],[1,\"p\",[[0,[],0,\"We'll initialize our Git repository and copy an auto-generated \"],[0,[0],1,\".gitignore\"],[0,[],0,\" file from \"],[0,[1],1,\"gitignore.io\"]]],[10,1],[1,\"p\",[[0,[],0,\"Create a Python virtual environment for our project\"]]],[10,2],[1,\"p\",[[0,[],0,\"Install Flask\"]]],[10,3],[1,\"p\",[[0,[],0,\"Add a simple \"],[0,[0],1,\"README.md\"]]],[10,4],[1,\"p\",[[0,[],0,\"Make our first commit\"]]],[10,5],[1,\"h1\",[[0,[],0,\"MVP 1: Simple CRUD API for notes\"]]],[1,\"p\",[[0,[],0,\"Our first MVP would be to build an API which can allow us to create, read, update or delete our notes.\"]]]]}","created_at_ts":1562537108517,"created_at":"2019-07-07 22:05:08"},{"id":"5d226cc57cd96712d0719045","post_id":"5d22225ae3cecf1d3b1cfe34","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"language\":\"bash\",\"code\":\"take ~/Playground/code-evolution\",\"caption\":\"<code>take</code> is equivalent of <code>mkdir -p $1 &amp;&amp; cd $1</code>\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git init\\ncurl https://gitignore.io/api/flask,python -o .gitignore\"}],[\"code\",{\"language\":\"bash\",\"code\":\"python3 -m venv .venv\\nsource .venv/bin/activate\"}],[\"code\",{\"language\":\"bash\",\"code\":\"pip install flask\\npip freeze > requirements.txt\"}],[\"code\",{\"language\":\"bash\",\"code\":\"cat > README.md <<EOF\\n# Notefy\\nNote sharing for dummies\\n\\n## TODO\\n1. Complete this README\\nEOF\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git add --all\\ngit commit -m 'Setup project with core dependencies and README'\"}]],\"markups\":[[\"code\"],[\"a\",[\"href\",\"https://gitignore.io\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"We'll be building the server side implementation of a simple note sharing app, which would have the following features,\"]]],[3,\"ol\",[[[0,[],0,\"A note is just a text where the first line (limited to first 50 characters) is the note title\"]],[[0,[],0,\"You (user) can create, edit, delete and view notes that you created\"]],[[0,[],0,\"You can set the visibility of these notes to public (anyone can read), shared (only people with whom the note is shared can read) or private (only you can read)\"]]]],[1,\"p\",[[0,[],0,\"I'll be using Python for building this app. \"]]],[1,\"p\",[[0,[],0,\"However, in whatever step our project is, we will always ensure that,\"]]],[3,\"ol\",[[[0,[],0,\"Our code remains readable\"]],[[0,[],0,\"Our commits and commit messages are complete\"]]]],[1,\"h1\",[[0,[],0,\"0. Project setup\"]]],[1,\"p\",[[0,[],0,\"Let's create our project directory first\"]]],[10,0],[1,\"p\",[[0,[],0,\"We'll initialize our Git repository and copy an auto-generated \"],[0,[0],1,\".gitignore\"],[0,[],0,\" file from \"],[0,[1],1,\"gitignore.io\"]]],[10,1],[1,\"p\",[[0,[],0,\"Create a Python virtual environment for our project\"]]],[10,2],[1,\"p\",[[0,[],0,\"Install Flask\"]]],[10,3],[1,\"p\",[[0,[],0,\"Add a simple \"],[0,[0],1,\"README.md\"]]],[10,4],[1,\"p\",[[0,[],0,\"Make our first commit\"]]],[10,5],[1,\"h1\",[[0,[],0,\"MVP 1: Simple CRUD API for notes\"]]],[1,\"p\",[[0,[],0,\"To begin with, our MVP stage 1 would have the following objectives,\"]]],[3,\"ol\",[[[0,[],0,\"Simple CRUD API for notes\"]],[]]]]}","created_at_ts":1562537157925,"created_at":"2019-07-07 22:05:57"},{"id":"5d226cde7cd96712d0719047","post_id":"5d22225ae3cecf1d3b1cfe34","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"language\":\"bash\",\"code\":\"take ~/Playground/code-evolution\",\"caption\":\"<code>take</code> is equivalent of <code>mkdir -p $1 &amp;&amp; cd $1</code>\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git init\\ncurl https://gitignore.io/api/flask,python -o .gitignore\"}],[\"code\",{\"language\":\"bash\",\"code\":\"python3 -m venv .venv\\nsource .venv/bin/activate\"}],[\"code\",{\"language\":\"bash\",\"code\":\"pip install flask\\npip freeze > requirements.txt\"}],[\"code\",{\"language\":\"bash\",\"code\":\"cat > README.md <<EOF\\n# Notefy\\nNote sharing for dummies\\n\\n## TODO\\n1. Complete this README\\nEOF\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git add --all\\ngit commit -m 'Setup project with core dependencies and README'\"}]],\"markups\":[[\"code\"],[\"a\",[\"href\",\"https://gitignore.io\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"We'll be building the server side implementation of a simple note sharing app, which would have the following features,\"]]],[3,\"ol\",[[[0,[],0,\"A note is just a text where the first line (limited to first 50 characters) is the note title\"]],[[0,[],0,\"You (user) can create, edit, delete and view notes that you created\"]],[[0,[],0,\"You can set the visibility of these notes to public (anyone can read), shared (only people with whom the note is shared can read) or private (only you can read)\"]]]],[1,\"p\",[[0,[],0,\"I'll be using Python for building this app. \"]]],[1,\"p\",[[0,[],0,\"However, in whatever step our project is, we will always ensure that,\"]]],[3,\"ol\",[[[0,[],0,\"Our code remains readable\"]],[[0,[],0,\"Our commits and commit messages are complete\"]]]],[1,\"h1\",[[0,[],0,\"0. Project setup\"]]],[1,\"p\",[[0,[],0,\"Let's create our project directory first\"]]],[10,0],[1,\"p\",[[0,[],0,\"We'll initialize our Git repository and copy an auto-generated \"],[0,[0],1,\".gitignore\"],[0,[],0,\" file from \"],[0,[1],1,\"gitignore.io\"]]],[10,1],[1,\"p\",[[0,[],0,\"Create a Python virtual environment for our project\"]]],[10,2],[1,\"p\",[[0,[],0,\"Install Flask\"]]],[10,3],[1,\"p\",[[0,[],0,\"Add a simple \"],[0,[0],1,\"README.md\"]]],[10,4],[1,\"p\",[[0,[],0,\"Make our first commit\"]]],[10,5],[1,\"h1\",[[0,[],0,\"MVP 1: Simple CRUD API for notes\"]]],[1,\"p\",[[0,[],0,\"To begin with, our MVP stage 1 would have the following objectives,\"]]],[3,\"ol\",[[[0,[],0,\"Simple CRUD API for notes\"]],[[0,[],0,\"No authentication or user data required\"]]]]]}","created_at_ts":1562537182413,"created_at":"2019-07-07 22:06:22"},{"id":"5d226ce17cd96712d0719049","post_id":"5d22225ae3cecf1d3b1cfe34","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"language\":\"bash\",\"code\":\"take ~/Playground/code-evolution\",\"caption\":\"<code>take</code> is equivalent of <code>mkdir -p $1 &amp;&amp; cd $1</code>\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git init\\ncurl https://gitignore.io/api/flask,python -o .gitignore\"}],[\"code\",{\"language\":\"bash\",\"code\":\"python3 -m venv .venv\\nsource .venv/bin/activate\"}],[\"code\",{\"language\":\"bash\",\"code\":\"pip install flask\\npip freeze > requirements.txt\"}],[\"code\",{\"language\":\"bash\",\"code\":\"cat > README.md <<EOF\\n# Notefy\\nNote sharing for dummies\\n\\n## TODO\\n1. Complete this README\\nEOF\"}],[\"code\",{\"language\":\"bash\",\"code\":\"git add --all\\ngit commit -m 'Setup project with core dependencies and README'\"}]],\"markups\":[[\"code\"],[\"a\",[\"href\",\"https://gitignore.io\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"We'll be building the server side implementation of a simple note sharing app, which would have the following features,\"]]],[3,\"ol\",[[[0,[],0,\"A note is just a text where the first line (limited to first 50 characters) is the note title\"]],[[0,[],0,\"You (user) can create, edit, delete and view notes that you created\"]],[[0,[],0,\"You can set the visibility of these notes to public (anyone can read), shared (only people with whom the note is shared can read) or private (only you can read)\"]]]],[1,\"p\",[[0,[],0,\"I'll be using Python for building this app. \"]]],[1,\"p\",[[0,[],0,\"However, in whatever step our project is, we will always ensure that,\"]]],[3,\"ol\",[[[0,[],0,\"Our code remains readable\"]],[[0,[],0,\"Our commits and commit messages are complete\"]]]],[1,\"h1\",[[0,[],0,\"0. Project setup\"]]],[1,\"p\",[[0,[],0,\"Let's create our project directory first\"]]],[10,0],[1,\"p\",[[0,[],0,\"We'll initialize our Git repository and copy an auto-generated \"],[0,[0],1,\".gitignore\"],[0,[],0,\" file from \"],[0,[1],1,\"gitignore.io\"]]],[10,1],[1,\"p\",[[0,[],0,\"Create a Python virtual environment for our project\"]]],[10,2],[1,\"p\",[[0,[],0,\"Install Flask\"]]],[10,3],[1,\"p\",[[0,[],0,\"Add a simple \"],[0,[0],1,\"README.md\"]]],[10,4],[1,\"p\",[[0,[],0,\"Make our first commit\"]]],[10,5],[1,\"h1\",[[0,[],0,\"MVP 1: Simple CRUD API for notes\"]]],[1,\"p\",[[0,[],0,\"To begin with, our MVP stage 1 would have the following objectives,\"]]],[3,\"ol\",[[[0,[],0,\"Simple CRUD API for notes\"]],[[0,[],0,\"No authentication or user data required\"]],[]]]]}","created_at_ts":1562537185423,"created_at":"2019-07-07 22:06:25"},{"id":"5d5025d165d2576b7bb99d28","post_id":"5d5025d165d2576b7bb99d26","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}","created_at_ts":1565533649972,"created_at":"2019-08-11 14:27:29"}],"members":[],"actions":[{"id":"5cf7f00ee3cecf1d3b1cfe18","resource_id":"5c0c1e7aabc169173fada4ca","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-06-05 16:38:38"},{"id":"5cf7f1e3e3cecf1d3b1cfe1a","resource_id":"5c0c1e7aabc169173fada4ca","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-06-05 16:46:27"},{"id":"5cf7f1f4e3cecf1d3b1cfe1c","resource_id":"5c0c1e7aabc169173fada4ca","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-06-05 16:46:44"},{"id":"5cf7f20ee3cecf1d3b1cfe1e","resource_id":"5c0c1e7aabc169173fada4ca","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-06-05 16:47:10"},{"id":"5cf7f23be3cecf1d3b1cfe20","resource_id":"5c0c1e7aabc169173fada4ca","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-06-05 16:47:55"},{"id":"5cf7f242e3cecf1d3b1cfe22","resource_id":"5c0c1e7aabc169173fada4ca","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-06-05 16:48:02"},{"id":"5cf7f272e3cecf1d3b1cfe24","resource_id":"5c0c1e7aabc169173fada4ca","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-06-05 16:48:50"},{"id":"5cf7f2dfe3cecf1d3b1cfe26","resource_id":"5c0c1e7aabc169173fada4ca","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-06-05 16:50:39"},{"id":"5cf7f30be3cecf1d3b1cfe28","resource_id":"5c0c1e7aabc169173fada4ca","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-06-05 16:51:23"},{"id":"5cf7f310e3cecf1d3b1cfe2a","resource_id":"5c0c1e7aabc169173fada4ca","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-06-05 16:51:28"},{"id":"5cf7f313e3cecf1d3b1cfe2c","resource_id":"5c0c1e7aabc169173fada4ca","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-06-05 16:51:31"},{"id":"5cf7f31ae3cecf1d3b1cfe2e","resource_id":"5c0c1e7aabc169173fada4ca","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-06-05 16:51:38"},{"id":"5cf7f494e3cecf1d3b1cfe30","resource_id":"5c0c1e7aabc169173fada4ca","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-06-05 16:57:56"},{"id":"5cf7f4a4e3cecf1d3b1cfe32","resource_id":"5c0c1e7aabc169173fada4ca","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-06-05 16:58:12"},{"id":"5d22225ae3cecf1d3b1cfe37","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2019-07-07 16:48:26"},{"id":"5d22229be3cecf1d3b1cfe39","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:49:31"},{"id":"5d2222bbe3cecf1d3b1cfe3b","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:50:03"},{"id":"5d2222e0e3cecf1d3b1cfe3d","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:50:40"},{"id":"5d222303e3cecf1d3b1cfe3f","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:51:15"},{"id":"5d222308e3cecf1d3b1cfe41","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:51:20"},{"id":"5d222356e3cecf1d3b1cfe43","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:52:38"},{"id":"5d222377e3cecf1d3b1cfe45","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:53:11"},{"id":"5d2223b6e3cecf1d3b1cfe47","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:54:14"},{"id":"5d2223e0e3cecf1d3b1cfe49","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:54:56"},{"id":"5d2223efe3cecf1d3b1cfe4b","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:55:11"},{"id":"5d22242ce3cecf1d3b1cfe4d","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:56:12"},{"id":"5d22243de3cecf1d3b1cfe4f","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:56:29"},{"id":"5d22244ce3cecf1d3b1cfe51","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:56:44"},{"id":"5d222466e3cecf1d3b1cfe53","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:57:10"},{"id":"5d22246fe3cecf1d3b1cfe55","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:57:19"},{"id":"5d222476e3cecf1d3b1cfe57","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:57:26"},{"id":"5d22247be3cecf1d3b1cfe59","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 16:57:31"},{"id":"5d22421be3cecf1d3b1cfe5b","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:03:55"},{"id":"5d224246e3cecf1d3b1cfe5d","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:04:38"},{"id":"5d224315e3cecf1d3b1cfe5f","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:08:05"},{"id":"5d22433ce3cecf1d3b1cfe61","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:08:44"},{"id":"5d224359e3cecf1d3b1cfe63","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:09:13"},{"id":"5d224367e3cecf1d3b1cfe65","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:09:27"},{"id":"5d224373e3cecf1d3b1cfe67","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:09:39"},{"id":"5d22437de3cecf1d3b1cfe69","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:09:49"},{"id":"5d224384e3cecf1d3b1cfe6b","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:09:56"},{"id":"5d224395e3cecf1d3b1cfe6d","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:10:13"},{"id":"5d2243b4e3cecf1d3b1cfe6f","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:10:44"},{"id":"5d2243bae3cecf1d3b1cfe71","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:10:50"},{"id":"5d224405e3cecf1d3b1cfe73","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:12:05"},{"id":"5d224431e3cecf1d3b1cfe75","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:12:49"},{"id":"5d22443ae3cecf1d3b1cfe77","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:12:58"},{"id":"5d224474e3cecf1d3b1cfe79","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:13:56"},{"id":"5d224484e3cecf1d3b1cfe7b","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:14:12"},{"id":"5d22449ce3cecf1d3b1cfe7d","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:14:36"},{"id":"5d2244bde3cecf1d3b1cfe7f","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:15:09"},{"id":"5d2244cce3cecf1d3b1cfe81","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:15:24"},{"id":"5d224509e3cecf1d3b1cfe83","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:16:25"},{"id":"5d224521e3cecf1d3b1cfe85","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:16:49"},{"id":"5d224533e3cecf1d3b1cfe87","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:17:07"},{"id":"5d22454fe3cecf1d3b1cfe89","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:17:35"},{"id":"5d224565e3cecf1d3b1cfe8b","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:17:57"},{"id":"5d2245c0e3cecf1d3b1cfe8d","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:19:28"},{"id":"5d2245d5e3cecf1d3b1cfe8f","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:19:49"},{"id":"5d2245e0e3cecf1d3b1cfe91","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:20:00"},{"id":"5d2245e4e3cecf1d3b1cfe93","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:20:04"},{"id":"5d224606e3cecf1d3b1cfe95","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:20:38"},{"id":"5d22460fe3cecf1d3b1cfe97","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:20:47"},{"id":"5d22461fe3cecf1d3b1cfe99","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:21:03"},{"id":"5d224631e3cecf1d3b1cfe9b","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:21:21"},{"id":"5d224638e3cecf1d3b1cfe9d","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:21:28"},{"id":"5d224652e3cecf1d3b1cfe9f","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:21:54"},{"id":"5d224668e3cecf1d3b1cfea1","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:22:16"},{"id":"5d224671e3cecf1d3b1cfea3","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:22:25"},{"id":"5d224676e3cecf1d3b1cfea5","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:22:30"},{"id":"5d224683e3cecf1d3b1cfea7","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:22:43"},{"id":"5d224786e3cecf1d3b1cfea9","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:27:02"},{"id":"5d224793e3cecf1d3b1cfeab","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 19:27:15"},{"id":"5d22535f7cd96712d0719030","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 20:17:35"},{"id":"5d2255987cd96712d0719032","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 20:27:04"},{"id":"5d2255ab7cd96712d0719034","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 20:27:23"},{"id":"5d2255bd7cd96712d0719036","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 20:27:41"},{"id":"5d2255d17cd96712d0719038","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 20:28:01"},{"id":"5d2255f37cd96712d071903a","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 20:28:35"},{"id":"5d2255fc7cd96712d071903c","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 20:28:44"},{"id":"5d226c567cd96712d071903e","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 22:04:06"},{"id":"5d226c657cd96712d0719040","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 22:04:21"},{"id":"5d226c6f7cd96712d0719042","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 22:04:31"},{"id":"5d226c947cd96712d0719044","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 22:05:08"},{"id":"5d226cc57cd96712d0719046","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 22:05:57"},{"id":"5d226cde7cd96712d0719048","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 22:06:22"},{"id":"5d226ce17cd96712d071904a","resource_id":"5d22225ae3cecf1d3b1cfe34","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2019-07-07 22:06:25"},{"id":"5d5025d165d2576b7bb99d29","resource_id":"5d5025d165d2576b7bb99d26","resource_type":"post","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2019-08-11 14:27:29"}]}}]}